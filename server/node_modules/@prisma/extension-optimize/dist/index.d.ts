import * as _prisma_client_extension from '@prisma/client/extension';
import * as _prisma_client_runtime_library from '@prisma/client/runtime/library';

declare const PROD_INGESTION_URL = "https://optimize-ingestion.datacdn.workers.dev/";
declare const PROD_DASHBOARD_URL = "https://optimize.prisma.io";
type OptimizeOptions = {
    /**
     * Whether to enable Prisma Optimize. Defaults to `true`.
     */
    enable?: boolean;
    /**
     * A Prisma Optimize API key. Head to the Prisma Optimize dashboard to
     * create one.
     */
    apiKey: string;
    /**
     * The minimum interval (in milliseconds) for sending batched Prisma
     * operations to the Prisma Optimize interface.
     *
     * @default 500
     * @remarks setting this value too low may impact your app performance.
     */
    sendInterval?: number;
    /**
     * The maximum time a query can be waited for before being discarded. If a
     * query takes too long to complete, it will be discarded. Increase this if
     * you have very slow queries.
     *
     * @default 10000
     * @remarks when below `minSendInterval`, it defaults to `minSendInterval`.
     */
    sendTimeout?: number;
    /**
     * The URL of the ingestion service of Prisma Optimize.
     */
    ingestionUrl?: string;
    /**
     * The URL of the dashboard of Prisma Optimize
     */
    dashboardUrl?: string;
    /**
     * Whether to show a toast notification when the dashboard is ready.
     */
    showNotification?: boolean;
};
declare function withOptimize({ enable, ingestionUrl, dashboardUrl, sendInterval, sendTimeout, showNotification, apiKey, }: OptimizeOptions): (client: any) => _prisma_client_extension.PrismaClientExtends<_prisma_client_runtime_library.InternalArgs<{}, {}, {}, {}> & _prisma_client_runtime_library.DefaultArgs>;

export { type OptimizeOptions, PROD_DASHBOARD_URL, PROD_INGESTION_URL, withOptimize };
