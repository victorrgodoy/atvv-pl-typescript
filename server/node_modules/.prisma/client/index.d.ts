
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Client
 * 
 */
export type Client = $Result.DefaultSelection<Prisma.$ClientPayload>
/**
 * Model Cpf
 * 
 */
export type Cpf = $Result.DefaultSelection<Prisma.$CpfPayload>
/**
 * Model Rg
 * 
 */
export type Rg = $Result.DefaultSelection<Prisma.$RgPayload>
/**
 * Model Phone
 * 
 */
export type Phone = $Result.DefaultSelection<Prisma.$PhonePayload>
/**
 * Model Pet
 * 
 */
export type Pet = $Result.DefaultSelection<Prisma.$PetPayload>
/**
 * Model Product
 * 
 */
export type Product = $Result.DefaultSelection<Prisma.$ProductPayload>
/**
 * Model Service
 * 
 */
export type Service = $Result.DefaultSelection<Prisma.$ServicePayload>
/**
 * Model ConsumedProduct
 * 
 */
export type ConsumedProduct = $Result.DefaultSelection<Prisma.$ConsumedProductPayload>
/**
 * Model ConsumedService
 * 
 */
export type ConsumedService = $Result.DefaultSelection<Prisma.$ConsumedServicePayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Clients
 * const clients = await prisma.client.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Clients
   * const clients = await prisma.client.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.client`: Exposes CRUD operations for the **Client** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Clients
    * const clients = await prisma.client.findMany()
    * ```
    */
  get client(): Prisma.ClientDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.cpf`: Exposes CRUD operations for the **Cpf** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Cpfs
    * const cpfs = await prisma.cpf.findMany()
    * ```
    */
  get cpf(): Prisma.CpfDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.rg`: Exposes CRUD operations for the **Rg** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Rgs
    * const rgs = await prisma.rg.findMany()
    * ```
    */
  get rg(): Prisma.RgDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.phone`: Exposes CRUD operations for the **Phone** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Phones
    * const phones = await prisma.phone.findMany()
    * ```
    */
  get phone(): Prisma.PhoneDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.pet`: Exposes CRUD operations for the **Pet** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Pets
    * const pets = await prisma.pet.findMany()
    * ```
    */
  get pet(): Prisma.PetDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.product`: Exposes CRUD operations for the **Product** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Products
    * const products = await prisma.product.findMany()
    * ```
    */
  get product(): Prisma.ProductDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.service`: Exposes CRUD operations for the **Service** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Services
    * const services = await prisma.service.findMany()
    * ```
    */
  get service(): Prisma.ServiceDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.consumedProduct`: Exposes CRUD operations for the **ConsumedProduct** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ConsumedProducts
    * const consumedProducts = await prisma.consumedProduct.findMany()
    * ```
    */
  get consumedProduct(): Prisma.ConsumedProductDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.consumedService`: Exposes CRUD operations for the **ConsumedService** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ConsumedServices
    * const consumedServices = await prisma.consumedService.findMany()
    * ```
    */
  get consumedService(): Prisma.ConsumedServiceDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.8.0
   * Query Engine version: 2060c79ba17c6bb9f5823312b6f6b7f4a845738e
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Client: 'Client',
    Cpf: 'Cpf',
    Rg: 'Rg',
    Phone: 'Phone',
    Pet: 'Pet',
    Product: 'Product',
    Service: 'Service',
    ConsumedProduct: 'ConsumedProduct',
    ConsumedService: 'ConsumedService'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "client" | "cpf" | "rg" | "phone" | "pet" | "product" | "service" | "consumedProduct" | "consumedService"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Client: {
        payload: Prisma.$ClientPayload<ExtArgs>
        fields: Prisma.ClientFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ClientFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ClientFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientPayload>
          }
          findFirst: {
            args: Prisma.ClientFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ClientFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientPayload>
          }
          findMany: {
            args: Prisma.ClientFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientPayload>[]
          }
          create: {
            args: Prisma.ClientCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientPayload>
          }
          createMany: {
            args: Prisma.ClientCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ClientCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientPayload>[]
          }
          delete: {
            args: Prisma.ClientDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientPayload>
          }
          update: {
            args: Prisma.ClientUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientPayload>
          }
          deleteMany: {
            args: Prisma.ClientDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ClientUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ClientUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientPayload>[]
          }
          upsert: {
            args: Prisma.ClientUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientPayload>
          }
          aggregate: {
            args: Prisma.ClientAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateClient>
          }
          groupBy: {
            args: Prisma.ClientGroupByArgs<ExtArgs>
            result: $Utils.Optional<ClientGroupByOutputType>[]
          }
          count: {
            args: Prisma.ClientCountArgs<ExtArgs>
            result: $Utils.Optional<ClientCountAggregateOutputType> | number
          }
        }
      }
      Cpf: {
        payload: Prisma.$CpfPayload<ExtArgs>
        fields: Prisma.CpfFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CpfFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CpfPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CpfFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CpfPayload>
          }
          findFirst: {
            args: Prisma.CpfFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CpfPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CpfFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CpfPayload>
          }
          findMany: {
            args: Prisma.CpfFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CpfPayload>[]
          }
          create: {
            args: Prisma.CpfCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CpfPayload>
          }
          createMany: {
            args: Prisma.CpfCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CpfCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CpfPayload>[]
          }
          delete: {
            args: Prisma.CpfDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CpfPayload>
          }
          update: {
            args: Prisma.CpfUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CpfPayload>
          }
          deleteMany: {
            args: Prisma.CpfDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CpfUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CpfUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CpfPayload>[]
          }
          upsert: {
            args: Prisma.CpfUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CpfPayload>
          }
          aggregate: {
            args: Prisma.CpfAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCpf>
          }
          groupBy: {
            args: Prisma.CpfGroupByArgs<ExtArgs>
            result: $Utils.Optional<CpfGroupByOutputType>[]
          }
          count: {
            args: Prisma.CpfCountArgs<ExtArgs>
            result: $Utils.Optional<CpfCountAggregateOutputType> | number
          }
        }
      }
      Rg: {
        payload: Prisma.$RgPayload<ExtArgs>
        fields: Prisma.RgFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RgFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RgPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RgFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RgPayload>
          }
          findFirst: {
            args: Prisma.RgFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RgPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RgFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RgPayload>
          }
          findMany: {
            args: Prisma.RgFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RgPayload>[]
          }
          create: {
            args: Prisma.RgCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RgPayload>
          }
          createMany: {
            args: Prisma.RgCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RgCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RgPayload>[]
          }
          delete: {
            args: Prisma.RgDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RgPayload>
          }
          update: {
            args: Prisma.RgUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RgPayload>
          }
          deleteMany: {
            args: Prisma.RgDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RgUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.RgUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RgPayload>[]
          }
          upsert: {
            args: Prisma.RgUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RgPayload>
          }
          aggregate: {
            args: Prisma.RgAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRg>
          }
          groupBy: {
            args: Prisma.RgGroupByArgs<ExtArgs>
            result: $Utils.Optional<RgGroupByOutputType>[]
          }
          count: {
            args: Prisma.RgCountArgs<ExtArgs>
            result: $Utils.Optional<RgCountAggregateOutputType> | number
          }
        }
      }
      Phone: {
        payload: Prisma.$PhonePayload<ExtArgs>
        fields: Prisma.PhoneFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PhoneFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PhonePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PhoneFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PhonePayload>
          }
          findFirst: {
            args: Prisma.PhoneFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PhonePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PhoneFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PhonePayload>
          }
          findMany: {
            args: Prisma.PhoneFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PhonePayload>[]
          }
          create: {
            args: Prisma.PhoneCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PhonePayload>
          }
          createMany: {
            args: Prisma.PhoneCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PhoneCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PhonePayload>[]
          }
          delete: {
            args: Prisma.PhoneDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PhonePayload>
          }
          update: {
            args: Prisma.PhoneUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PhonePayload>
          }
          deleteMany: {
            args: Prisma.PhoneDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PhoneUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PhoneUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PhonePayload>[]
          }
          upsert: {
            args: Prisma.PhoneUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PhonePayload>
          }
          aggregate: {
            args: Prisma.PhoneAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePhone>
          }
          groupBy: {
            args: Prisma.PhoneGroupByArgs<ExtArgs>
            result: $Utils.Optional<PhoneGroupByOutputType>[]
          }
          count: {
            args: Prisma.PhoneCountArgs<ExtArgs>
            result: $Utils.Optional<PhoneCountAggregateOutputType> | number
          }
        }
      }
      Pet: {
        payload: Prisma.$PetPayload<ExtArgs>
        fields: Prisma.PetFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PetFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PetPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PetFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PetPayload>
          }
          findFirst: {
            args: Prisma.PetFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PetPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PetFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PetPayload>
          }
          findMany: {
            args: Prisma.PetFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PetPayload>[]
          }
          create: {
            args: Prisma.PetCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PetPayload>
          }
          createMany: {
            args: Prisma.PetCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PetCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PetPayload>[]
          }
          delete: {
            args: Prisma.PetDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PetPayload>
          }
          update: {
            args: Prisma.PetUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PetPayload>
          }
          deleteMany: {
            args: Prisma.PetDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PetUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PetUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PetPayload>[]
          }
          upsert: {
            args: Prisma.PetUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PetPayload>
          }
          aggregate: {
            args: Prisma.PetAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePet>
          }
          groupBy: {
            args: Prisma.PetGroupByArgs<ExtArgs>
            result: $Utils.Optional<PetGroupByOutputType>[]
          }
          count: {
            args: Prisma.PetCountArgs<ExtArgs>
            result: $Utils.Optional<PetCountAggregateOutputType> | number
          }
        }
      }
      Product: {
        payload: Prisma.$ProductPayload<ExtArgs>
        fields: Prisma.ProductFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProductFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProductFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          findFirst: {
            args: Prisma.ProductFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProductFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          findMany: {
            args: Prisma.ProductFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>[]
          }
          create: {
            args: Prisma.ProductCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          createMany: {
            args: Prisma.ProductCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProductCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>[]
          }
          delete: {
            args: Prisma.ProductDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          update: {
            args: Prisma.ProductUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          deleteMany: {
            args: Prisma.ProductDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProductUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ProductUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>[]
          }
          upsert: {
            args: Prisma.ProductUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          aggregate: {
            args: Prisma.ProductAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProduct>
          }
          groupBy: {
            args: Prisma.ProductGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProductGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProductCountArgs<ExtArgs>
            result: $Utils.Optional<ProductCountAggregateOutputType> | number
          }
        }
      }
      Service: {
        payload: Prisma.$ServicePayload<ExtArgs>
        fields: Prisma.ServiceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ServiceFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ServiceFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicePayload>
          }
          findFirst: {
            args: Prisma.ServiceFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ServiceFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicePayload>
          }
          findMany: {
            args: Prisma.ServiceFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicePayload>[]
          }
          create: {
            args: Prisma.ServiceCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicePayload>
          }
          createMany: {
            args: Prisma.ServiceCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ServiceCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicePayload>[]
          }
          delete: {
            args: Prisma.ServiceDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicePayload>
          }
          update: {
            args: Prisma.ServiceUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicePayload>
          }
          deleteMany: {
            args: Prisma.ServiceDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ServiceUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ServiceUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicePayload>[]
          }
          upsert: {
            args: Prisma.ServiceUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicePayload>
          }
          aggregate: {
            args: Prisma.ServiceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateService>
          }
          groupBy: {
            args: Prisma.ServiceGroupByArgs<ExtArgs>
            result: $Utils.Optional<ServiceGroupByOutputType>[]
          }
          count: {
            args: Prisma.ServiceCountArgs<ExtArgs>
            result: $Utils.Optional<ServiceCountAggregateOutputType> | number
          }
        }
      }
      ConsumedProduct: {
        payload: Prisma.$ConsumedProductPayload<ExtArgs>
        fields: Prisma.ConsumedProductFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ConsumedProductFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsumedProductPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ConsumedProductFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsumedProductPayload>
          }
          findFirst: {
            args: Prisma.ConsumedProductFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsumedProductPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ConsumedProductFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsumedProductPayload>
          }
          findMany: {
            args: Prisma.ConsumedProductFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsumedProductPayload>[]
          }
          create: {
            args: Prisma.ConsumedProductCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsumedProductPayload>
          }
          createMany: {
            args: Prisma.ConsumedProductCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ConsumedProductCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsumedProductPayload>[]
          }
          delete: {
            args: Prisma.ConsumedProductDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsumedProductPayload>
          }
          update: {
            args: Prisma.ConsumedProductUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsumedProductPayload>
          }
          deleteMany: {
            args: Prisma.ConsumedProductDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ConsumedProductUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ConsumedProductUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsumedProductPayload>[]
          }
          upsert: {
            args: Prisma.ConsumedProductUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsumedProductPayload>
          }
          aggregate: {
            args: Prisma.ConsumedProductAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateConsumedProduct>
          }
          groupBy: {
            args: Prisma.ConsumedProductGroupByArgs<ExtArgs>
            result: $Utils.Optional<ConsumedProductGroupByOutputType>[]
          }
          count: {
            args: Prisma.ConsumedProductCountArgs<ExtArgs>
            result: $Utils.Optional<ConsumedProductCountAggregateOutputType> | number
          }
        }
      }
      ConsumedService: {
        payload: Prisma.$ConsumedServicePayload<ExtArgs>
        fields: Prisma.ConsumedServiceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ConsumedServiceFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsumedServicePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ConsumedServiceFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsumedServicePayload>
          }
          findFirst: {
            args: Prisma.ConsumedServiceFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsumedServicePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ConsumedServiceFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsumedServicePayload>
          }
          findMany: {
            args: Prisma.ConsumedServiceFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsumedServicePayload>[]
          }
          create: {
            args: Prisma.ConsumedServiceCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsumedServicePayload>
          }
          createMany: {
            args: Prisma.ConsumedServiceCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ConsumedServiceCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsumedServicePayload>[]
          }
          delete: {
            args: Prisma.ConsumedServiceDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsumedServicePayload>
          }
          update: {
            args: Prisma.ConsumedServiceUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsumedServicePayload>
          }
          deleteMany: {
            args: Prisma.ConsumedServiceDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ConsumedServiceUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ConsumedServiceUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsumedServicePayload>[]
          }
          upsert: {
            args: Prisma.ConsumedServiceUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsumedServicePayload>
          }
          aggregate: {
            args: Prisma.ConsumedServiceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateConsumedService>
          }
          groupBy: {
            args: Prisma.ConsumedServiceGroupByArgs<ExtArgs>
            result: $Utils.Optional<ConsumedServiceGroupByOutputType>[]
          }
          count: {
            args: Prisma.ConsumedServiceCountArgs<ExtArgs>
            result: $Utils.Optional<ConsumedServiceCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    client?: ClientOmit
    cpf?: CpfOmit
    rg?: RgOmit
    phone?: PhoneOmit
    pet?: PetOmit
    product?: ProductOmit
    service?: ServiceOmit
    consumedProduct?: ConsumedProductOmit
    consumedService?: ConsumedServiceOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type ClientCountOutputType
   */

  export type ClientCountOutputType = {
    rgs: number
    phones: number
    consumedProducts: number
    consumedServices: number
    pets: number
  }

  export type ClientCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    rgs?: boolean | ClientCountOutputTypeCountRgsArgs
    phones?: boolean | ClientCountOutputTypeCountPhonesArgs
    consumedProducts?: boolean | ClientCountOutputTypeCountConsumedProductsArgs
    consumedServices?: boolean | ClientCountOutputTypeCountConsumedServicesArgs
    pets?: boolean | ClientCountOutputTypeCountPetsArgs
  }

  // Custom InputTypes
  /**
   * ClientCountOutputType without action
   */
  export type ClientCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClientCountOutputType
     */
    select?: ClientCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ClientCountOutputType without action
   */
  export type ClientCountOutputTypeCountRgsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RgWhereInput
  }

  /**
   * ClientCountOutputType without action
   */
  export type ClientCountOutputTypeCountPhonesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PhoneWhereInput
  }

  /**
   * ClientCountOutputType without action
   */
  export type ClientCountOutputTypeCountConsumedProductsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ConsumedProductWhereInput
  }

  /**
   * ClientCountOutputType without action
   */
  export type ClientCountOutputTypeCountConsumedServicesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ConsumedServiceWhereInput
  }

  /**
   * ClientCountOutputType without action
   */
  export type ClientCountOutputTypeCountPetsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PetWhereInput
  }


  /**
   * Count Type ProductCountOutputType
   */

  export type ProductCountOutputType = {
    consumptions: number
  }

  export type ProductCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    consumptions?: boolean | ProductCountOutputTypeCountConsumptionsArgs
  }

  // Custom InputTypes
  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductCountOutputType
     */
    select?: ProductCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeCountConsumptionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ConsumedProductWhereInput
  }


  /**
   * Count Type ServiceCountOutputType
   */

  export type ServiceCountOutputType = {
    consumptions: number
  }

  export type ServiceCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    consumptions?: boolean | ServiceCountOutputTypeCountConsumptionsArgs
  }

  // Custom InputTypes
  /**
   * ServiceCountOutputType without action
   */
  export type ServiceCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceCountOutputType
     */
    select?: ServiceCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ServiceCountOutputType without action
   */
  export type ServiceCountOutputTypeCountConsumptionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ConsumedServiceWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Client
   */

  export type AggregateClient = {
    _count: ClientCountAggregateOutputType | null
    _avg: ClientAvgAggregateOutputType | null
    _sum: ClientSumAggregateOutputType | null
    _min: ClientMinAggregateOutputType | null
    _max: ClientMaxAggregateOutputType | null
  }

  export type ClientAvgAggregateOutputType = {
    id: number | null
  }

  export type ClientSumAggregateOutputType = {
    id: number | null
  }

  export type ClientMinAggregateOutputType = {
    id: number | null
    name: string | null
    socialName: string | null
    registrationDate: Date | null
  }

  export type ClientMaxAggregateOutputType = {
    id: number | null
    name: string | null
    socialName: string | null
    registrationDate: Date | null
  }

  export type ClientCountAggregateOutputType = {
    id: number
    name: number
    socialName: number
    registrationDate: number
    _all: number
  }


  export type ClientAvgAggregateInputType = {
    id?: true
  }

  export type ClientSumAggregateInputType = {
    id?: true
  }

  export type ClientMinAggregateInputType = {
    id?: true
    name?: true
    socialName?: true
    registrationDate?: true
  }

  export type ClientMaxAggregateInputType = {
    id?: true
    name?: true
    socialName?: true
    registrationDate?: true
  }

  export type ClientCountAggregateInputType = {
    id?: true
    name?: true
    socialName?: true
    registrationDate?: true
    _all?: true
  }

  export type ClientAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Client to aggregate.
     */
    where?: ClientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clients to fetch.
     */
    orderBy?: ClientOrderByWithRelationInput | ClientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ClientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Clients
    **/
    _count?: true | ClientCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ClientAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ClientSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ClientMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ClientMaxAggregateInputType
  }

  export type GetClientAggregateType<T extends ClientAggregateArgs> = {
        [P in keyof T & keyof AggregateClient]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateClient[P]>
      : GetScalarType<T[P], AggregateClient[P]>
  }




  export type ClientGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClientWhereInput
    orderBy?: ClientOrderByWithAggregationInput | ClientOrderByWithAggregationInput[]
    by: ClientScalarFieldEnum[] | ClientScalarFieldEnum
    having?: ClientScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ClientCountAggregateInputType | true
    _avg?: ClientAvgAggregateInputType
    _sum?: ClientSumAggregateInputType
    _min?: ClientMinAggregateInputType
    _max?: ClientMaxAggregateInputType
  }

  export type ClientGroupByOutputType = {
    id: number
    name: string
    socialName: string
    registrationDate: Date
    _count: ClientCountAggregateOutputType | null
    _avg: ClientAvgAggregateOutputType | null
    _sum: ClientSumAggregateOutputType | null
    _min: ClientMinAggregateOutputType | null
    _max: ClientMaxAggregateOutputType | null
  }

  type GetClientGroupByPayload<T extends ClientGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ClientGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ClientGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ClientGroupByOutputType[P]>
            : GetScalarType<T[P], ClientGroupByOutputType[P]>
        }
      >
    >


  export type ClientSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    socialName?: boolean
    registrationDate?: boolean
    cpf?: boolean | Client$cpfArgs<ExtArgs>
    rgs?: boolean | Client$rgsArgs<ExtArgs>
    phones?: boolean | Client$phonesArgs<ExtArgs>
    consumedProducts?: boolean | Client$consumedProductsArgs<ExtArgs>
    consumedServices?: boolean | Client$consumedServicesArgs<ExtArgs>
    pets?: boolean | Client$petsArgs<ExtArgs>
    _count?: boolean | ClientCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["client"]>

  export type ClientSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    socialName?: boolean
    registrationDate?: boolean
  }, ExtArgs["result"]["client"]>

  export type ClientSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    socialName?: boolean
    registrationDate?: boolean
  }, ExtArgs["result"]["client"]>

  export type ClientSelectScalar = {
    id?: boolean
    name?: boolean
    socialName?: boolean
    registrationDate?: boolean
  }

  export type ClientOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "socialName" | "registrationDate", ExtArgs["result"]["client"]>
  export type ClientInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cpf?: boolean | Client$cpfArgs<ExtArgs>
    rgs?: boolean | Client$rgsArgs<ExtArgs>
    phones?: boolean | Client$phonesArgs<ExtArgs>
    consumedProducts?: boolean | Client$consumedProductsArgs<ExtArgs>
    consumedServices?: boolean | Client$consumedServicesArgs<ExtArgs>
    pets?: boolean | Client$petsArgs<ExtArgs>
    _count?: boolean | ClientCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ClientIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type ClientIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $ClientPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Client"
    objects: {
      cpf: Prisma.$CpfPayload<ExtArgs> | null
      rgs: Prisma.$RgPayload<ExtArgs>[]
      phones: Prisma.$PhonePayload<ExtArgs>[]
      consumedProducts: Prisma.$ConsumedProductPayload<ExtArgs>[]
      consumedServices: Prisma.$ConsumedServicePayload<ExtArgs>[]
      pets: Prisma.$PetPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      socialName: string
      registrationDate: Date
    }, ExtArgs["result"]["client"]>
    composites: {}
  }

  type ClientGetPayload<S extends boolean | null | undefined | ClientDefaultArgs> = $Result.GetResult<Prisma.$ClientPayload, S>

  type ClientCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ClientFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ClientCountAggregateInputType | true
    }

  export interface ClientDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Client'], meta: { name: 'Client' } }
    /**
     * Find zero or one Client that matches the filter.
     * @param {ClientFindUniqueArgs} args - Arguments to find a Client
     * @example
     * // Get one Client
     * const client = await prisma.client.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ClientFindUniqueArgs>(args: SelectSubset<T, ClientFindUniqueArgs<ExtArgs>>): Prisma__ClientClient<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Client that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ClientFindUniqueOrThrowArgs} args - Arguments to find a Client
     * @example
     * // Get one Client
     * const client = await prisma.client.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ClientFindUniqueOrThrowArgs>(args: SelectSubset<T, ClientFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ClientClient<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Client that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientFindFirstArgs} args - Arguments to find a Client
     * @example
     * // Get one Client
     * const client = await prisma.client.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ClientFindFirstArgs>(args?: SelectSubset<T, ClientFindFirstArgs<ExtArgs>>): Prisma__ClientClient<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Client that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientFindFirstOrThrowArgs} args - Arguments to find a Client
     * @example
     * // Get one Client
     * const client = await prisma.client.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ClientFindFirstOrThrowArgs>(args?: SelectSubset<T, ClientFindFirstOrThrowArgs<ExtArgs>>): Prisma__ClientClient<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Clients that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Clients
     * const clients = await prisma.client.findMany()
     * 
     * // Get first 10 Clients
     * const clients = await prisma.client.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const clientWithIdOnly = await prisma.client.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ClientFindManyArgs>(args?: SelectSubset<T, ClientFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Client.
     * @param {ClientCreateArgs} args - Arguments to create a Client.
     * @example
     * // Create one Client
     * const Client = await prisma.client.create({
     *   data: {
     *     // ... data to create a Client
     *   }
     * })
     * 
     */
    create<T extends ClientCreateArgs>(args: SelectSubset<T, ClientCreateArgs<ExtArgs>>): Prisma__ClientClient<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Clients.
     * @param {ClientCreateManyArgs} args - Arguments to create many Clients.
     * @example
     * // Create many Clients
     * const client = await prisma.client.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ClientCreateManyArgs>(args?: SelectSubset<T, ClientCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Clients and returns the data saved in the database.
     * @param {ClientCreateManyAndReturnArgs} args - Arguments to create many Clients.
     * @example
     * // Create many Clients
     * const client = await prisma.client.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Clients and only return the `id`
     * const clientWithIdOnly = await prisma.client.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ClientCreateManyAndReturnArgs>(args?: SelectSubset<T, ClientCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Client.
     * @param {ClientDeleteArgs} args - Arguments to delete one Client.
     * @example
     * // Delete one Client
     * const Client = await prisma.client.delete({
     *   where: {
     *     // ... filter to delete one Client
     *   }
     * })
     * 
     */
    delete<T extends ClientDeleteArgs>(args: SelectSubset<T, ClientDeleteArgs<ExtArgs>>): Prisma__ClientClient<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Client.
     * @param {ClientUpdateArgs} args - Arguments to update one Client.
     * @example
     * // Update one Client
     * const client = await prisma.client.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ClientUpdateArgs>(args: SelectSubset<T, ClientUpdateArgs<ExtArgs>>): Prisma__ClientClient<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Clients.
     * @param {ClientDeleteManyArgs} args - Arguments to filter Clients to delete.
     * @example
     * // Delete a few Clients
     * const { count } = await prisma.client.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ClientDeleteManyArgs>(args?: SelectSubset<T, ClientDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Clients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Clients
     * const client = await prisma.client.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ClientUpdateManyArgs>(args: SelectSubset<T, ClientUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Clients and returns the data updated in the database.
     * @param {ClientUpdateManyAndReturnArgs} args - Arguments to update many Clients.
     * @example
     * // Update many Clients
     * const client = await prisma.client.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Clients and only return the `id`
     * const clientWithIdOnly = await prisma.client.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ClientUpdateManyAndReturnArgs>(args: SelectSubset<T, ClientUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Client.
     * @param {ClientUpsertArgs} args - Arguments to update or create a Client.
     * @example
     * // Update or create a Client
     * const client = await prisma.client.upsert({
     *   create: {
     *     // ... data to create a Client
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Client we want to update
     *   }
     * })
     */
    upsert<T extends ClientUpsertArgs>(args: SelectSubset<T, ClientUpsertArgs<ExtArgs>>): Prisma__ClientClient<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Clients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientCountArgs} args - Arguments to filter Clients to count.
     * @example
     * // Count the number of Clients
     * const count = await prisma.client.count({
     *   where: {
     *     // ... the filter for the Clients we want to count
     *   }
     * })
    **/
    count<T extends ClientCountArgs>(
      args?: Subset<T, ClientCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ClientCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Client.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ClientAggregateArgs>(args: Subset<T, ClientAggregateArgs>): Prisma.PrismaPromise<GetClientAggregateType<T>>

    /**
     * Group by Client.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ClientGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ClientGroupByArgs['orderBy'] }
        : { orderBy?: ClientGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ClientGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetClientGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Client model
   */
  readonly fields: ClientFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Client.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ClientClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    cpf<T extends Client$cpfArgs<ExtArgs> = {}>(args?: Subset<T, Client$cpfArgs<ExtArgs>>): Prisma__CpfClient<$Result.GetResult<Prisma.$CpfPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    rgs<T extends Client$rgsArgs<ExtArgs> = {}>(args?: Subset<T, Client$rgsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RgPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    phones<T extends Client$phonesArgs<ExtArgs> = {}>(args?: Subset<T, Client$phonesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PhonePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    consumedProducts<T extends Client$consumedProductsArgs<ExtArgs> = {}>(args?: Subset<T, Client$consumedProductsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConsumedProductPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    consumedServices<T extends Client$consumedServicesArgs<ExtArgs> = {}>(args?: Subset<T, Client$consumedServicesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConsumedServicePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    pets<T extends Client$petsArgs<ExtArgs> = {}>(args?: Subset<T, Client$petsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PetPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Client model
   */
  interface ClientFieldRefs {
    readonly id: FieldRef<"Client", 'Int'>
    readonly name: FieldRef<"Client", 'String'>
    readonly socialName: FieldRef<"Client", 'String'>
    readonly registrationDate: FieldRef<"Client", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Client findUnique
   */
  export type ClientFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Client
     */
    omit?: ClientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientInclude<ExtArgs> | null
    /**
     * Filter, which Client to fetch.
     */
    where: ClientWhereUniqueInput
  }

  /**
   * Client findUniqueOrThrow
   */
  export type ClientFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Client
     */
    omit?: ClientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientInclude<ExtArgs> | null
    /**
     * Filter, which Client to fetch.
     */
    where: ClientWhereUniqueInput
  }

  /**
   * Client findFirst
   */
  export type ClientFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Client
     */
    omit?: ClientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientInclude<ExtArgs> | null
    /**
     * Filter, which Client to fetch.
     */
    where?: ClientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clients to fetch.
     */
    orderBy?: ClientOrderByWithRelationInput | ClientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Clients.
     */
    cursor?: ClientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Clients.
     */
    distinct?: ClientScalarFieldEnum | ClientScalarFieldEnum[]
  }

  /**
   * Client findFirstOrThrow
   */
  export type ClientFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Client
     */
    omit?: ClientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientInclude<ExtArgs> | null
    /**
     * Filter, which Client to fetch.
     */
    where?: ClientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clients to fetch.
     */
    orderBy?: ClientOrderByWithRelationInput | ClientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Clients.
     */
    cursor?: ClientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Clients.
     */
    distinct?: ClientScalarFieldEnum | ClientScalarFieldEnum[]
  }

  /**
   * Client findMany
   */
  export type ClientFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Client
     */
    omit?: ClientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientInclude<ExtArgs> | null
    /**
     * Filter, which Clients to fetch.
     */
    where?: ClientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clients to fetch.
     */
    orderBy?: ClientOrderByWithRelationInput | ClientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Clients.
     */
    cursor?: ClientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clients.
     */
    skip?: number
    distinct?: ClientScalarFieldEnum | ClientScalarFieldEnum[]
  }

  /**
   * Client create
   */
  export type ClientCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Client
     */
    omit?: ClientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientInclude<ExtArgs> | null
    /**
     * The data needed to create a Client.
     */
    data: XOR<ClientCreateInput, ClientUncheckedCreateInput>
  }

  /**
   * Client createMany
   */
  export type ClientCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Clients.
     */
    data: ClientCreateManyInput | ClientCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Client createManyAndReturn
   */
  export type ClientCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Client
     */
    omit?: ClientOmit<ExtArgs> | null
    /**
     * The data used to create many Clients.
     */
    data: ClientCreateManyInput | ClientCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Client update
   */
  export type ClientUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Client
     */
    omit?: ClientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientInclude<ExtArgs> | null
    /**
     * The data needed to update a Client.
     */
    data: XOR<ClientUpdateInput, ClientUncheckedUpdateInput>
    /**
     * Choose, which Client to update.
     */
    where: ClientWhereUniqueInput
  }

  /**
   * Client updateMany
   */
  export type ClientUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Clients.
     */
    data: XOR<ClientUpdateManyMutationInput, ClientUncheckedUpdateManyInput>
    /**
     * Filter which Clients to update
     */
    where?: ClientWhereInput
    /**
     * Limit how many Clients to update.
     */
    limit?: number
  }

  /**
   * Client updateManyAndReturn
   */
  export type ClientUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Client
     */
    omit?: ClientOmit<ExtArgs> | null
    /**
     * The data used to update Clients.
     */
    data: XOR<ClientUpdateManyMutationInput, ClientUncheckedUpdateManyInput>
    /**
     * Filter which Clients to update
     */
    where?: ClientWhereInput
    /**
     * Limit how many Clients to update.
     */
    limit?: number
  }

  /**
   * Client upsert
   */
  export type ClientUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Client
     */
    omit?: ClientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientInclude<ExtArgs> | null
    /**
     * The filter to search for the Client to update in case it exists.
     */
    where: ClientWhereUniqueInput
    /**
     * In case the Client found by the `where` argument doesn't exist, create a new Client with this data.
     */
    create: XOR<ClientCreateInput, ClientUncheckedCreateInput>
    /**
     * In case the Client was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ClientUpdateInput, ClientUncheckedUpdateInput>
  }

  /**
   * Client delete
   */
  export type ClientDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Client
     */
    omit?: ClientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientInclude<ExtArgs> | null
    /**
     * Filter which Client to delete.
     */
    where: ClientWhereUniqueInput
  }

  /**
   * Client deleteMany
   */
  export type ClientDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Clients to delete
     */
    where?: ClientWhereInput
    /**
     * Limit how many Clients to delete.
     */
    limit?: number
  }

  /**
   * Client.cpf
   */
  export type Client$cpfArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cpf
     */
    select?: CpfSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cpf
     */
    omit?: CpfOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CpfInclude<ExtArgs> | null
    where?: CpfWhereInput
  }

  /**
   * Client.rgs
   */
  export type Client$rgsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rg
     */
    select?: RgSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Rg
     */
    omit?: RgOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RgInclude<ExtArgs> | null
    where?: RgWhereInput
    orderBy?: RgOrderByWithRelationInput | RgOrderByWithRelationInput[]
    cursor?: RgWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RgScalarFieldEnum | RgScalarFieldEnum[]
  }

  /**
   * Client.phones
   */
  export type Client$phonesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Phone
     */
    select?: PhoneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Phone
     */
    omit?: PhoneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PhoneInclude<ExtArgs> | null
    where?: PhoneWhereInput
    orderBy?: PhoneOrderByWithRelationInput | PhoneOrderByWithRelationInput[]
    cursor?: PhoneWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PhoneScalarFieldEnum | PhoneScalarFieldEnum[]
  }

  /**
   * Client.consumedProducts
   */
  export type Client$consumedProductsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConsumedProduct
     */
    select?: ConsumedProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ConsumedProduct
     */
    omit?: ConsumedProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsumedProductInclude<ExtArgs> | null
    where?: ConsumedProductWhereInput
    orderBy?: ConsumedProductOrderByWithRelationInput | ConsumedProductOrderByWithRelationInput[]
    cursor?: ConsumedProductWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ConsumedProductScalarFieldEnum | ConsumedProductScalarFieldEnum[]
  }

  /**
   * Client.consumedServices
   */
  export type Client$consumedServicesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConsumedService
     */
    select?: ConsumedServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ConsumedService
     */
    omit?: ConsumedServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsumedServiceInclude<ExtArgs> | null
    where?: ConsumedServiceWhereInput
    orderBy?: ConsumedServiceOrderByWithRelationInput | ConsumedServiceOrderByWithRelationInput[]
    cursor?: ConsumedServiceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ConsumedServiceScalarFieldEnum | ConsumedServiceScalarFieldEnum[]
  }

  /**
   * Client.pets
   */
  export type Client$petsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pet
     */
    select?: PetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Pet
     */
    omit?: PetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PetInclude<ExtArgs> | null
    where?: PetWhereInput
    orderBy?: PetOrderByWithRelationInput | PetOrderByWithRelationInput[]
    cursor?: PetWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PetScalarFieldEnum | PetScalarFieldEnum[]
  }

  /**
   * Client without action
   */
  export type ClientDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Client
     */
    omit?: ClientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientInclude<ExtArgs> | null
  }


  /**
   * Model Cpf
   */

  export type AggregateCpf = {
    _count: CpfCountAggregateOutputType | null
    _avg: CpfAvgAggregateOutputType | null
    _sum: CpfSumAggregateOutputType | null
    _min: CpfMinAggregateOutputType | null
    _max: CpfMaxAggregateOutputType | null
  }

  export type CpfAvgAggregateOutputType = {
    id: number | null
    clientId: number | null
  }

  export type CpfSumAggregateOutputType = {
    id: number | null
    clientId: number | null
  }

  export type CpfMinAggregateOutputType = {
    id: number | null
    number: string | null
    issueDate: Date | null
    clientId: number | null
  }

  export type CpfMaxAggregateOutputType = {
    id: number | null
    number: string | null
    issueDate: Date | null
    clientId: number | null
  }

  export type CpfCountAggregateOutputType = {
    id: number
    number: number
    issueDate: number
    clientId: number
    _all: number
  }


  export type CpfAvgAggregateInputType = {
    id?: true
    clientId?: true
  }

  export type CpfSumAggregateInputType = {
    id?: true
    clientId?: true
  }

  export type CpfMinAggregateInputType = {
    id?: true
    number?: true
    issueDate?: true
    clientId?: true
  }

  export type CpfMaxAggregateInputType = {
    id?: true
    number?: true
    issueDate?: true
    clientId?: true
  }

  export type CpfCountAggregateInputType = {
    id?: true
    number?: true
    issueDate?: true
    clientId?: true
    _all?: true
  }

  export type CpfAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Cpf to aggregate.
     */
    where?: CpfWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cpfs to fetch.
     */
    orderBy?: CpfOrderByWithRelationInput | CpfOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CpfWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cpfs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cpfs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Cpfs
    **/
    _count?: true | CpfCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CpfAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CpfSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CpfMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CpfMaxAggregateInputType
  }

  export type GetCpfAggregateType<T extends CpfAggregateArgs> = {
        [P in keyof T & keyof AggregateCpf]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCpf[P]>
      : GetScalarType<T[P], AggregateCpf[P]>
  }




  export type CpfGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CpfWhereInput
    orderBy?: CpfOrderByWithAggregationInput | CpfOrderByWithAggregationInput[]
    by: CpfScalarFieldEnum[] | CpfScalarFieldEnum
    having?: CpfScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CpfCountAggregateInputType | true
    _avg?: CpfAvgAggregateInputType
    _sum?: CpfSumAggregateInputType
    _min?: CpfMinAggregateInputType
    _max?: CpfMaxAggregateInputType
  }

  export type CpfGroupByOutputType = {
    id: number
    number: string
    issueDate: Date
    clientId: number
    _count: CpfCountAggregateOutputType | null
    _avg: CpfAvgAggregateOutputType | null
    _sum: CpfSumAggregateOutputType | null
    _min: CpfMinAggregateOutputType | null
    _max: CpfMaxAggregateOutputType | null
  }

  type GetCpfGroupByPayload<T extends CpfGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CpfGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CpfGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CpfGroupByOutputType[P]>
            : GetScalarType<T[P], CpfGroupByOutputType[P]>
        }
      >
    >


  export type CpfSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    number?: boolean
    issueDate?: boolean
    clientId?: boolean
    client?: boolean | ClientDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["cpf"]>

  export type CpfSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    number?: boolean
    issueDate?: boolean
    clientId?: boolean
    client?: boolean | ClientDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["cpf"]>

  export type CpfSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    number?: boolean
    issueDate?: boolean
    clientId?: boolean
    client?: boolean | ClientDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["cpf"]>

  export type CpfSelectScalar = {
    id?: boolean
    number?: boolean
    issueDate?: boolean
    clientId?: boolean
  }

  export type CpfOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "number" | "issueDate" | "clientId", ExtArgs["result"]["cpf"]>
  export type CpfInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    client?: boolean | ClientDefaultArgs<ExtArgs>
  }
  export type CpfIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    client?: boolean | ClientDefaultArgs<ExtArgs>
  }
  export type CpfIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    client?: boolean | ClientDefaultArgs<ExtArgs>
  }

  export type $CpfPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Cpf"
    objects: {
      client: Prisma.$ClientPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      number: string
      issueDate: Date
      clientId: number
    }, ExtArgs["result"]["cpf"]>
    composites: {}
  }

  type CpfGetPayload<S extends boolean | null | undefined | CpfDefaultArgs> = $Result.GetResult<Prisma.$CpfPayload, S>

  type CpfCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CpfFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CpfCountAggregateInputType | true
    }

  export interface CpfDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Cpf'], meta: { name: 'Cpf' } }
    /**
     * Find zero or one Cpf that matches the filter.
     * @param {CpfFindUniqueArgs} args - Arguments to find a Cpf
     * @example
     * // Get one Cpf
     * const cpf = await prisma.cpf.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CpfFindUniqueArgs>(args: SelectSubset<T, CpfFindUniqueArgs<ExtArgs>>): Prisma__CpfClient<$Result.GetResult<Prisma.$CpfPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Cpf that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CpfFindUniqueOrThrowArgs} args - Arguments to find a Cpf
     * @example
     * // Get one Cpf
     * const cpf = await prisma.cpf.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CpfFindUniqueOrThrowArgs>(args: SelectSubset<T, CpfFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CpfClient<$Result.GetResult<Prisma.$CpfPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Cpf that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CpfFindFirstArgs} args - Arguments to find a Cpf
     * @example
     * // Get one Cpf
     * const cpf = await prisma.cpf.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CpfFindFirstArgs>(args?: SelectSubset<T, CpfFindFirstArgs<ExtArgs>>): Prisma__CpfClient<$Result.GetResult<Prisma.$CpfPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Cpf that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CpfFindFirstOrThrowArgs} args - Arguments to find a Cpf
     * @example
     * // Get one Cpf
     * const cpf = await prisma.cpf.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CpfFindFirstOrThrowArgs>(args?: SelectSubset<T, CpfFindFirstOrThrowArgs<ExtArgs>>): Prisma__CpfClient<$Result.GetResult<Prisma.$CpfPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Cpfs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CpfFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Cpfs
     * const cpfs = await prisma.cpf.findMany()
     * 
     * // Get first 10 Cpfs
     * const cpfs = await prisma.cpf.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const cpfWithIdOnly = await prisma.cpf.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CpfFindManyArgs>(args?: SelectSubset<T, CpfFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CpfPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Cpf.
     * @param {CpfCreateArgs} args - Arguments to create a Cpf.
     * @example
     * // Create one Cpf
     * const Cpf = await prisma.cpf.create({
     *   data: {
     *     // ... data to create a Cpf
     *   }
     * })
     * 
     */
    create<T extends CpfCreateArgs>(args: SelectSubset<T, CpfCreateArgs<ExtArgs>>): Prisma__CpfClient<$Result.GetResult<Prisma.$CpfPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Cpfs.
     * @param {CpfCreateManyArgs} args - Arguments to create many Cpfs.
     * @example
     * // Create many Cpfs
     * const cpf = await prisma.cpf.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CpfCreateManyArgs>(args?: SelectSubset<T, CpfCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Cpfs and returns the data saved in the database.
     * @param {CpfCreateManyAndReturnArgs} args - Arguments to create many Cpfs.
     * @example
     * // Create many Cpfs
     * const cpf = await prisma.cpf.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Cpfs and only return the `id`
     * const cpfWithIdOnly = await prisma.cpf.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CpfCreateManyAndReturnArgs>(args?: SelectSubset<T, CpfCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CpfPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Cpf.
     * @param {CpfDeleteArgs} args - Arguments to delete one Cpf.
     * @example
     * // Delete one Cpf
     * const Cpf = await prisma.cpf.delete({
     *   where: {
     *     // ... filter to delete one Cpf
     *   }
     * })
     * 
     */
    delete<T extends CpfDeleteArgs>(args: SelectSubset<T, CpfDeleteArgs<ExtArgs>>): Prisma__CpfClient<$Result.GetResult<Prisma.$CpfPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Cpf.
     * @param {CpfUpdateArgs} args - Arguments to update one Cpf.
     * @example
     * // Update one Cpf
     * const cpf = await prisma.cpf.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CpfUpdateArgs>(args: SelectSubset<T, CpfUpdateArgs<ExtArgs>>): Prisma__CpfClient<$Result.GetResult<Prisma.$CpfPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Cpfs.
     * @param {CpfDeleteManyArgs} args - Arguments to filter Cpfs to delete.
     * @example
     * // Delete a few Cpfs
     * const { count } = await prisma.cpf.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CpfDeleteManyArgs>(args?: SelectSubset<T, CpfDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Cpfs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CpfUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Cpfs
     * const cpf = await prisma.cpf.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CpfUpdateManyArgs>(args: SelectSubset<T, CpfUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Cpfs and returns the data updated in the database.
     * @param {CpfUpdateManyAndReturnArgs} args - Arguments to update many Cpfs.
     * @example
     * // Update many Cpfs
     * const cpf = await prisma.cpf.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Cpfs and only return the `id`
     * const cpfWithIdOnly = await prisma.cpf.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CpfUpdateManyAndReturnArgs>(args: SelectSubset<T, CpfUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CpfPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Cpf.
     * @param {CpfUpsertArgs} args - Arguments to update or create a Cpf.
     * @example
     * // Update or create a Cpf
     * const cpf = await prisma.cpf.upsert({
     *   create: {
     *     // ... data to create a Cpf
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Cpf we want to update
     *   }
     * })
     */
    upsert<T extends CpfUpsertArgs>(args: SelectSubset<T, CpfUpsertArgs<ExtArgs>>): Prisma__CpfClient<$Result.GetResult<Prisma.$CpfPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Cpfs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CpfCountArgs} args - Arguments to filter Cpfs to count.
     * @example
     * // Count the number of Cpfs
     * const count = await prisma.cpf.count({
     *   where: {
     *     // ... the filter for the Cpfs we want to count
     *   }
     * })
    **/
    count<T extends CpfCountArgs>(
      args?: Subset<T, CpfCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CpfCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Cpf.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CpfAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CpfAggregateArgs>(args: Subset<T, CpfAggregateArgs>): Prisma.PrismaPromise<GetCpfAggregateType<T>>

    /**
     * Group by Cpf.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CpfGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CpfGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CpfGroupByArgs['orderBy'] }
        : { orderBy?: CpfGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CpfGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCpfGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Cpf model
   */
  readonly fields: CpfFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Cpf.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CpfClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    client<T extends ClientDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ClientDefaultArgs<ExtArgs>>): Prisma__ClientClient<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Cpf model
   */
  interface CpfFieldRefs {
    readonly id: FieldRef<"Cpf", 'Int'>
    readonly number: FieldRef<"Cpf", 'String'>
    readonly issueDate: FieldRef<"Cpf", 'DateTime'>
    readonly clientId: FieldRef<"Cpf", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Cpf findUnique
   */
  export type CpfFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cpf
     */
    select?: CpfSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cpf
     */
    omit?: CpfOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CpfInclude<ExtArgs> | null
    /**
     * Filter, which Cpf to fetch.
     */
    where: CpfWhereUniqueInput
  }

  /**
   * Cpf findUniqueOrThrow
   */
  export type CpfFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cpf
     */
    select?: CpfSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cpf
     */
    omit?: CpfOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CpfInclude<ExtArgs> | null
    /**
     * Filter, which Cpf to fetch.
     */
    where: CpfWhereUniqueInput
  }

  /**
   * Cpf findFirst
   */
  export type CpfFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cpf
     */
    select?: CpfSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cpf
     */
    omit?: CpfOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CpfInclude<ExtArgs> | null
    /**
     * Filter, which Cpf to fetch.
     */
    where?: CpfWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cpfs to fetch.
     */
    orderBy?: CpfOrderByWithRelationInput | CpfOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Cpfs.
     */
    cursor?: CpfWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cpfs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cpfs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Cpfs.
     */
    distinct?: CpfScalarFieldEnum | CpfScalarFieldEnum[]
  }

  /**
   * Cpf findFirstOrThrow
   */
  export type CpfFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cpf
     */
    select?: CpfSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cpf
     */
    omit?: CpfOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CpfInclude<ExtArgs> | null
    /**
     * Filter, which Cpf to fetch.
     */
    where?: CpfWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cpfs to fetch.
     */
    orderBy?: CpfOrderByWithRelationInput | CpfOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Cpfs.
     */
    cursor?: CpfWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cpfs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cpfs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Cpfs.
     */
    distinct?: CpfScalarFieldEnum | CpfScalarFieldEnum[]
  }

  /**
   * Cpf findMany
   */
  export type CpfFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cpf
     */
    select?: CpfSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cpf
     */
    omit?: CpfOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CpfInclude<ExtArgs> | null
    /**
     * Filter, which Cpfs to fetch.
     */
    where?: CpfWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cpfs to fetch.
     */
    orderBy?: CpfOrderByWithRelationInput | CpfOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Cpfs.
     */
    cursor?: CpfWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cpfs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cpfs.
     */
    skip?: number
    distinct?: CpfScalarFieldEnum | CpfScalarFieldEnum[]
  }

  /**
   * Cpf create
   */
  export type CpfCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cpf
     */
    select?: CpfSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cpf
     */
    omit?: CpfOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CpfInclude<ExtArgs> | null
    /**
     * The data needed to create a Cpf.
     */
    data: XOR<CpfCreateInput, CpfUncheckedCreateInput>
  }

  /**
   * Cpf createMany
   */
  export type CpfCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Cpfs.
     */
    data: CpfCreateManyInput | CpfCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Cpf createManyAndReturn
   */
  export type CpfCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cpf
     */
    select?: CpfSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Cpf
     */
    omit?: CpfOmit<ExtArgs> | null
    /**
     * The data used to create many Cpfs.
     */
    data: CpfCreateManyInput | CpfCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CpfIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Cpf update
   */
  export type CpfUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cpf
     */
    select?: CpfSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cpf
     */
    omit?: CpfOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CpfInclude<ExtArgs> | null
    /**
     * The data needed to update a Cpf.
     */
    data: XOR<CpfUpdateInput, CpfUncheckedUpdateInput>
    /**
     * Choose, which Cpf to update.
     */
    where: CpfWhereUniqueInput
  }

  /**
   * Cpf updateMany
   */
  export type CpfUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Cpfs.
     */
    data: XOR<CpfUpdateManyMutationInput, CpfUncheckedUpdateManyInput>
    /**
     * Filter which Cpfs to update
     */
    where?: CpfWhereInput
    /**
     * Limit how many Cpfs to update.
     */
    limit?: number
  }

  /**
   * Cpf updateManyAndReturn
   */
  export type CpfUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cpf
     */
    select?: CpfSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Cpf
     */
    omit?: CpfOmit<ExtArgs> | null
    /**
     * The data used to update Cpfs.
     */
    data: XOR<CpfUpdateManyMutationInput, CpfUncheckedUpdateManyInput>
    /**
     * Filter which Cpfs to update
     */
    where?: CpfWhereInput
    /**
     * Limit how many Cpfs to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CpfIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Cpf upsert
   */
  export type CpfUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cpf
     */
    select?: CpfSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cpf
     */
    omit?: CpfOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CpfInclude<ExtArgs> | null
    /**
     * The filter to search for the Cpf to update in case it exists.
     */
    where: CpfWhereUniqueInput
    /**
     * In case the Cpf found by the `where` argument doesn't exist, create a new Cpf with this data.
     */
    create: XOR<CpfCreateInput, CpfUncheckedCreateInput>
    /**
     * In case the Cpf was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CpfUpdateInput, CpfUncheckedUpdateInput>
  }

  /**
   * Cpf delete
   */
  export type CpfDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cpf
     */
    select?: CpfSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cpf
     */
    omit?: CpfOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CpfInclude<ExtArgs> | null
    /**
     * Filter which Cpf to delete.
     */
    where: CpfWhereUniqueInput
  }

  /**
   * Cpf deleteMany
   */
  export type CpfDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Cpfs to delete
     */
    where?: CpfWhereInput
    /**
     * Limit how many Cpfs to delete.
     */
    limit?: number
  }

  /**
   * Cpf without action
   */
  export type CpfDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cpf
     */
    select?: CpfSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cpf
     */
    omit?: CpfOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CpfInclude<ExtArgs> | null
  }


  /**
   * Model Rg
   */

  export type AggregateRg = {
    _count: RgCountAggregateOutputType | null
    _avg: RgAvgAggregateOutputType | null
    _sum: RgSumAggregateOutputType | null
    _min: RgMinAggregateOutputType | null
    _max: RgMaxAggregateOutputType | null
  }

  export type RgAvgAggregateOutputType = {
    id: number | null
    clientId: number | null
  }

  export type RgSumAggregateOutputType = {
    id: number | null
    clientId: number | null
  }

  export type RgMinAggregateOutputType = {
    id: number | null
    number: string | null
    issueDate: Date | null
    clientId: number | null
  }

  export type RgMaxAggregateOutputType = {
    id: number | null
    number: string | null
    issueDate: Date | null
    clientId: number | null
  }

  export type RgCountAggregateOutputType = {
    id: number
    number: number
    issueDate: number
    clientId: number
    _all: number
  }


  export type RgAvgAggregateInputType = {
    id?: true
    clientId?: true
  }

  export type RgSumAggregateInputType = {
    id?: true
    clientId?: true
  }

  export type RgMinAggregateInputType = {
    id?: true
    number?: true
    issueDate?: true
    clientId?: true
  }

  export type RgMaxAggregateInputType = {
    id?: true
    number?: true
    issueDate?: true
    clientId?: true
  }

  export type RgCountAggregateInputType = {
    id?: true
    number?: true
    issueDate?: true
    clientId?: true
    _all?: true
  }

  export type RgAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Rg to aggregate.
     */
    where?: RgWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Rgs to fetch.
     */
    orderBy?: RgOrderByWithRelationInput | RgOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RgWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Rgs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Rgs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Rgs
    **/
    _count?: true | RgCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RgAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RgSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RgMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RgMaxAggregateInputType
  }

  export type GetRgAggregateType<T extends RgAggregateArgs> = {
        [P in keyof T & keyof AggregateRg]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRg[P]>
      : GetScalarType<T[P], AggregateRg[P]>
  }




  export type RgGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RgWhereInput
    orderBy?: RgOrderByWithAggregationInput | RgOrderByWithAggregationInput[]
    by: RgScalarFieldEnum[] | RgScalarFieldEnum
    having?: RgScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RgCountAggregateInputType | true
    _avg?: RgAvgAggregateInputType
    _sum?: RgSumAggregateInputType
    _min?: RgMinAggregateInputType
    _max?: RgMaxAggregateInputType
  }

  export type RgGroupByOutputType = {
    id: number
    number: string
    issueDate: Date
    clientId: number
    _count: RgCountAggregateOutputType | null
    _avg: RgAvgAggregateOutputType | null
    _sum: RgSumAggregateOutputType | null
    _min: RgMinAggregateOutputType | null
    _max: RgMaxAggregateOutputType | null
  }

  type GetRgGroupByPayload<T extends RgGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RgGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RgGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RgGroupByOutputType[P]>
            : GetScalarType<T[P], RgGroupByOutputType[P]>
        }
      >
    >


  export type RgSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    number?: boolean
    issueDate?: boolean
    clientId?: boolean
    client?: boolean | ClientDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["rg"]>

  export type RgSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    number?: boolean
    issueDate?: boolean
    clientId?: boolean
    client?: boolean | ClientDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["rg"]>

  export type RgSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    number?: boolean
    issueDate?: boolean
    clientId?: boolean
    client?: boolean | ClientDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["rg"]>

  export type RgSelectScalar = {
    id?: boolean
    number?: boolean
    issueDate?: boolean
    clientId?: boolean
  }

  export type RgOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "number" | "issueDate" | "clientId", ExtArgs["result"]["rg"]>
  export type RgInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    client?: boolean | ClientDefaultArgs<ExtArgs>
  }
  export type RgIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    client?: boolean | ClientDefaultArgs<ExtArgs>
  }
  export type RgIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    client?: boolean | ClientDefaultArgs<ExtArgs>
  }

  export type $RgPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Rg"
    objects: {
      client: Prisma.$ClientPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      number: string
      issueDate: Date
      clientId: number
    }, ExtArgs["result"]["rg"]>
    composites: {}
  }

  type RgGetPayload<S extends boolean | null | undefined | RgDefaultArgs> = $Result.GetResult<Prisma.$RgPayload, S>

  type RgCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<RgFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RgCountAggregateInputType | true
    }

  export interface RgDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Rg'], meta: { name: 'Rg' } }
    /**
     * Find zero or one Rg that matches the filter.
     * @param {RgFindUniqueArgs} args - Arguments to find a Rg
     * @example
     * // Get one Rg
     * const rg = await prisma.rg.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RgFindUniqueArgs>(args: SelectSubset<T, RgFindUniqueArgs<ExtArgs>>): Prisma__RgClient<$Result.GetResult<Prisma.$RgPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Rg that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {RgFindUniqueOrThrowArgs} args - Arguments to find a Rg
     * @example
     * // Get one Rg
     * const rg = await prisma.rg.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RgFindUniqueOrThrowArgs>(args: SelectSubset<T, RgFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RgClient<$Result.GetResult<Prisma.$RgPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Rg that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RgFindFirstArgs} args - Arguments to find a Rg
     * @example
     * // Get one Rg
     * const rg = await prisma.rg.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RgFindFirstArgs>(args?: SelectSubset<T, RgFindFirstArgs<ExtArgs>>): Prisma__RgClient<$Result.GetResult<Prisma.$RgPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Rg that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RgFindFirstOrThrowArgs} args - Arguments to find a Rg
     * @example
     * // Get one Rg
     * const rg = await prisma.rg.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RgFindFirstOrThrowArgs>(args?: SelectSubset<T, RgFindFirstOrThrowArgs<ExtArgs>>): Prisma__RgClient<$Result.GetResult<Prisma.$RgPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Rgs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RgFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Rgs
     * const rgs = await prisma.rg.findMany()
     * 
     * // Get first 10 Rgs
     * const rgs = await prisma.rg.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const rgWithIdOnly = await prisma.rg.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RgFindManyArgs>(args?: SelectSubset<T, RgFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RgPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Rg.
     * @param {RgCreateArgs} args - Arguments to create a Rg.
     * @example
     * // Create one Rg
     * const Rg = await prisma.rg.create({
     *   data: {
     *     // ... data to create a Rg
     *   }
     * })
     * 
     */
    create<T extends RgCreateArgs>(args: SelectSubset<T, RgCreateArgs<ExtArgs>>): Prisma__RgClient<$Result.GetResult<Prisma.$RgPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Rgs.
     * @param {RgCreateManyArgs} args - Arguments to create many Rgs.
     * @example
     * // Create many Rgs
     * const rg = await prisma.rg.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RgCreateManyArgs>(args?: SelectSubset<T, RgCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Rgs and returns the data saved in the database.
     * @param {RgCreateManyAndReturnArgs} args - Arguments to create many Rgs.
     * @example
     * // Create many Rgs
     * const rg = await prisma.rg.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Rgs and only return the `id`
     * const rgWithIdOnly = await prisma.rg.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RgCreateManyAndReturnArgs>(args?: SelectSubset<T, RgCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RgPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Rg.
     * @param {RgDeleteArgs} args - Arguments to delete one Rg.
     * @example
     * // Delete one Rg
     * const Rg = await prisma.rg.delete({
     *   where: {
     *     // ... filter to delete one Rg
     *   }
     * })
     * 
     */
    delete<T extends RgDeleteArgs>(args: SelectSubset<T, RgDeleteArgs<ExtArgs>>): Prisma__RgClient<$Result.GetResult<Prisma.$RgPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Rg.
     * @param {RgUpdateArgs} args - Arguments to update one Rg.
     * @example
     * // Update one Rg
     * const rg = await prisma.rg.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RgUpdateArgs>(args: SelectSubset<T, RgUpdateArgs<ExtArgs>>): Prisma__RgClient<$Result.GetResult<Prisma.$RgPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Rgs.
     * @param {RgDeleteManyArgs} args - Arguments to filter Rgs to delete.
     * @example
     * // Delete a few Rgs
     * const { count } = await prisma.rg.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RgDeleteManyArgs>(args?: SelectSubset<T, RgDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Rgs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RgUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Rgs
     * const rg = await prisma.rg.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RgUpdateManyArgs>(args: SelectSubset<T, RgUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Rgs and returns the data updated in the database.
     * @param {RgUpdateManyAndReturnArgs} args - Arguments to update many Rgs.
     * @example
     * // Update many Rgs
     * const rg = await prisma.rg.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Rgs and only return the `id`
     * const rgWithIdOnly = await prisma.rg.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends RgUpdateManyAndReturnArgs>(args: SelectSubset<T, RgUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RgPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Rg.
     * @param {RgUpsertArgs} args - Arguments to update or create a Rg.
     * @example
     * // Update or create a Rg
     * const rg = await prisma.rg.upsert({
     *   create: {
     *     // ... data to create a Rg
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Rg we want to update
     *   }
     * })
     */
    upsert<T extends RgUpsertArgs>(args: SelectSubset<T, RgUpsertArgs<ExtArgs>>): Prisma__RgClient<$Result.GetResult<Prisma.$RgPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Rgs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RgCountArgs} args - Arguments to filter Rgs to count.
     * @example
     * // Count the number of Rgs
     * const count = await prisma.rg.count({
     *   where: {
     *     // ... the filter for the Rgs we want to count
     *   }
     * })
    **/
    count<T extends RgCountArgs>(
      args?: Subset<T, RgCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RgCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Rg.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RgAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RgAggregateArgs>(args: Subset<T, RgAggregateArgs>): Prisma.PrismaPromise<GetRgAggregateType<T>>

    /**
     * Group by Rg.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RgGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RgGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RgGroupByArgs['orderBy'] }
        : { orderBy?: RgGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RgGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRgGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Rg model
   */
  readonly fields: RgFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Rg.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RgClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    client<T extends ClientDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ClientDefaultArgs<ExtArgs>>): Prisma__ClientClient<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Rg model
   */
  interface RgFieldRefs {
    readonly id: FieldRef<"Rg", 'Int'>
    readonly number: FieldRef<"Rg", 'String'>
    readonly issueDate: FieldRef<"Rg", 'DateTime'>
    readonly clientId: FieldRef<"Rg", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Rg findUnique
   */
  export type RgFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rg
     */
    select?: RgSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Rg
     */
    omit?: RgOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RgInclude<ExtArgs> | null
    /**
     * Filter, which Rg to fetch.
     */
    where: RgWhereUniqueInput
  }

  /**
   * Rg findUniqueOrThrow
   */
  export type RgFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rg
     */
    select?: RgSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Rg
     */
    omit?: RgOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RgInclude<ExtArgs> | null
    /**
     * Filter, which Rg to fetch.
     */
    where: RgWhereUniqueInput
  }

  /**
   * Rg findFirst
   */
  export type RgFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rg
     */
    select?: RgSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Rg
     */
    omit?: RgOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RgInclude<ExtArgs> | null
    /**
     * Filter, which Rg to fetch.
     */
    where?: RgWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Rgs to fetch.
     */
    orderBy?: RgOrderByWithRelationInput | RgOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Rgs.
     */
    cursor?: RgWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Rgs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Rgs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Rgs.
     */
    distinct?: RgScalarFieldEnum | RgScalarFieldEnum[]
  }

  /**
   * Rg findFirstOrThrow
   */
  export type RgFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rg
     */
    select?: RgSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Rg
     */
    omit?: RgOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RgInclude<ExtArgs> | null
    /**
     * Filter, which Rg to fetch.
     */
    where?: RgWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Rgs to fetch.
     */
    orderBy?: RgOrderByWithRelationInput | RgOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Rgs.
     */
    cursor?: RgWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Rgs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Rgs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Rgs.
     */
    distinct?: RgScalarFieldEnum | RgScalarFieldEnum[]
  }

  /**
   * Rg findMany
   */
  export type RgFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rg
     */
    select?: RgSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Rg
     */
    omit?: RgOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RgInclude<ExtArgs> | null
    /**
     * Filter, which Rgs to fetch.
     */
    where?: RgWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Rgs to fetch.
     */
    orderBy?: RgOrderByWithRelationInput | RgOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Rgs.
     */
    cursor?: RgWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Rgs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Rgs.
     */
    skip?: number
    distinct?: RgScalarFieldEnum | RgScalarFieldEnum[]
  }

  /**
   * Rg create
   */
  export type RgCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rg
     */
    select?: RgSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Rg
     */
    omit?: RgOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RgInclude<ExtArgs> | null
    /**
     * The data needed to create a Rg.
     */
    data: XOR<RgCreateInput, RgUncheckedCreateInput>
  }

  /**
   * Rg createMany
   */
  export type RgCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Rgs.
     */
    data: RgCreateManyInput | RgCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Rg createManyAndReturn
   */
  export type RgCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rg
     */
    select?: RgSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Rg
     */
    omit?: RgOmit<ExtArgs> | null
    /**
     * The data used to create many Rgs.
     */
    data: RgCreateManyInput | RgCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RgIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Rg update
   */
  export type RgUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rg
     */
    select?: RgSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Rg
     */
    omit?: RgOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RgInclude<ExtArgs> | null
    /**
     * The data needed to update a Rg.
     */
    data: XOR<RgUpdateInput, RgUncheckedUpdateInput>
    /**
     * Choose, which Rg to update.
     */
    where: RgWhereUniqueInput
  }

  /**
   * Rg updateMany
   */
  export type RgUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Rgs.
     */
    data: XOR<RgUpdateManyMutationInput, RgUncheckedUpdateManyInput>
    /**
     * Filter which Rgs to update
     */
    where?: RgWhereInput
    /**
     * Limit how many Rgs to update.
     */
    limit?: number
  }

  /**
   * Rg updateManyAndReturn
   */
  export type RgUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rg
     */
    select?: RgSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Rg
     */
    omit?: RgOmit<ExtArgs> | null
    /**
     * The data used to update Rgs.
     */
    data: XOR<RgUpdateManyMutationInput, RgUncheckedUpdateManyInput>
    /**
     * Filter which Rgs to update
     */
    where?: RgWhereInput
    /**
     * Limit how many Rgs to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RgIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Rg upsert
   */
  export type RgUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rg
     */
    select?: RgSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Rg
     */
    omit?: RgOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RgInclude<ExtArgs> | null
    /**
     * The filter to search for the Rg to update in case it exists.
     */
    where: RgWhereUniqueInput
    /**
     * In case the Rg found by the `where` argument doesn't exist, create a new Rg with this data.
     */
    create: XOR<RgCreateInput, RgUncheckedCreateInput>
    /**
     * In case the Rg was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RgUpdateInput, RgUncheckedUpdateInput>
  }

  /**
   * Rg delete
   */
  export type RgDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rg
     */
    select?: RgSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Rg
     */
    omit?: RgOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RgInclude<ExtArgs> | null
    /**
     * Filter which Rg to delete.
     */
    where: RgWhereUniqueInput
  }

  /**
   * Rg deleteMany
   */
  export type RgDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Rgs to delete
     */
    where?: RgWhereInput
    /**
     * Limit how many Rgs to delete.
     */
    limit?: number
  }

  /**
   * Rg without action
   */
  export type RgDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rg
     */
    select?: RgSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Rg
     */
    omit?: RgOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RgInclude<ExtArgs> | null
  }


  /**
   * Model Phone
   */

  export type AggregatePhone = {
    _count: PhoneCountAggregateOutputType | null
    _avg: PhoneAvgAggregateOutputType | null
    _sum: PhoneSumAggregateOutputType | null
    _min: PhoneMinAggregateOutputType | null
    _max: PhoneMaxAggregateOutputType | null
  }

  export type PhoneAvgAggregateOutputType = {
    id: number | null
    clientId: number | null
  }

  export type PhoneSumAggregateOutputType = {
    id: number | null
    clientId: number | null
  }

  export type PhoneMinAggregateOutputType = {
    id: number | null
    ddd: string | null
    number: string | null
    clientId: number | null
  }

  export type PhoneMaxAggregateOutputType = {
    id: number | null
    ddd: string | null
    number: string | null
    clientId: number | null
  }

  export type PhoneCountAggregateOutputType = {
    id: number
    ddd: number
    number: number
    clientId: number
    _all: number
  }


  export type PhoneAvgAggregateInputType = {
    id?: true
    clientId?: true
  }

  export type PhoneSumAggregateInputType = {
    id?: true
    clientId?: true
  }

  export type PhoneMinAggregateInputType = {
    id?: true
    ddd?: true
    number?: true
    clientId?: true
  }

  export type PhoneMaxAggregateInputType = {
    id?: true
    ddd?: true
    number?: true
    clientId?: true
  }

  export type PhoneCountAggregateInputType = {
    id?: true
    ddd?: true
    number?: true
    clientId?: true
    _all?: true
  }

  export type PhoneAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Phone to aggregate.
     */
    where?: PhoneWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Phones to fetch.
     */
    orderBy?: PhoneOrderByWithRelationInput | PhoneOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PhoneWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Phones from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Phones.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Phones
    **/
    _count?: true | PhoneCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PhoneAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PhoneSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PhoneMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PhoneMaxAggregateInputType
  }

  export type GetPhoneAggregateType<T extends PhoneAggregateArgs> = {
        [P in keyof T & keyof AggregatePhone]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePhone[P]>
      : GetScalarType<T[P], AggregatePhone[P]>
  }




  export type PhoneGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PhoneWhereInput
    orderBy?: PhoneOrderByWithAggregationInput | PhoneOrderByWithAggregationInput[]
    by: PhoneScalarFieldEnum[] | PhoneScalarFieldEnum
    having?: PhoneScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PhoneCountAggregateInputType | true
    _avg?: PhoneAvgAggregateInputType
    _sum?: PhoneSumAggregateInputType
    _min?: PhoneMinAggregateInputType
    _max?: PhoneMaxAggregateInputType
  }

  export type PhoneGroupByOutputType = {
    id: number
    ddd: string
    number: string
    clientId: number
    _count: PhoneCountAggregateOutputType | null
    _avg: PhoneAvgAggregateOutputType | null
    _sum: PhoneSumAggregateOutputType | null
    _min: PhoneMinAggregateOutputType | null
    _max: PhoneMaxAggregateOutputType | null
  }

  type GetPhoneGroupByPayload<T extends PhoneGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PhoneGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PhoneGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PhoneGroupByOutputType[P]>
            : GetScalarType<T[P], PhoneGroupByOutputType[P]>
        }
      >
    >


  export type PhoneSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    ddd?: boolean
    number?: boolean
    clientId?: boolean
    client?: boolean | ClientDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["phone"]>

  export type PhoneSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    ddd?: boolean
    number?: boolean
    clientId?: boolean
    client?: boolean | ClientDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["phone"]>

  export type PhoneSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    ddd?: boolean
    number?: boolean
    clientId?: boolean
    client?: boolean | ClientDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["phone"]>

  export type PhoneSelectScalar = {
    id?: boolean
    ddd?: boolean
    number?: boolean
    clientId?: boolean
  }

  export type PhoneOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "ddd" | "number" | "clientId", ExtArgs["result"]["phone"]>
  export type PhoneInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    client?: boolean | ClientDefaultArgs<ExtArgs>
  }
  export type PhoneIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    client?: boolean | ClientDefaultArgs<ExtArgs>
  }
  export type PhoneIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    client?: boolean | ClientDefaultArgs<ExtArgs>
  }

  export type $PhonePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Phone"
    objects: {
      client: Prisma.$ClientPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      ddd: string
      number: string
      clientId: number
    }, ExtArgs["result"]["phone"]>
    composites: {}
  }

  type PhoneGetPayload<S extends boolean | null | undefined | PhoneDefaultArgs> = $Result.GetResult<Prisma.$PhonePayload, S>

  type PhoneCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PhoneFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PhoneCountAggregateInputType | true
    }

  export interface PhoneDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Phone'], meta: { name: 'Phone' } }
    /**
     * Find zero or one Phone that matches the filter.
     * @param {PhoneFindUniqueArgs} args - Arguments to find a Phone
     * @example
     * // Get one Phone
     * const phone = await prisma.phone.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PhoneFindUniqueArgs>(args: SelectSubset<T, PhoneFindUniqueArgs<ExtArgs>>): Prisma__PhoneClient<$Result.GetResult<Prisma.$PhonePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Phone that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PhoneFindUniqueOrThrowArgs} args - Arguments to find a Phone
     * @example
     * // Get one Phone
     * const phone = await prisma.phone.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PhoneFindUniqueOrThrowArgs>(args: SelectSubset<T, PhoneFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PhoneClient<$Result.GetResult<Prisma.$PhonePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Phone that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PhoneFindFirstArgs} args - Arguments to find a Phone
     * @example
     * // Get one Phone
     * const phone = await prisma.phone.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PhoneFindFirstArgs>(args?: SelectSubset<T, PhoneFindFirstArgs<ExtArgs>>): Prisma__PhoneClient<$Result.GetResult<Prisma.$PhonePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Phone that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PhoneFindFirstOrThrowArgs} args - Arguments to find a Phone
     * @example
     * // Get one Phone
     * const phone = await prisma.phone.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PhoneFindFirstOrThrowArgs>(args?: SelectSubset<T, PhoneFindFirstOrThrowArgs<ExtArgs>>): Prisma__PhoneClient<$Result.GetResult<Prisma.$PhonePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Phones that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PhoneFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Phones
     * const phones = await prisma.phone.findMany()
     * 
     * // Get first 10 Phones
     * const phones = await prisma.phone.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const phoneWithIdOnly = await prisma.phone.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PhoneFindManyArgs>(args?: SelectSubset<T, PhoneFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PhonePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Phone.
     * @param {PhoneCreateArgs} args - Arguments to create a Phone.
     * @example
     * // Create one Phone
     * const Phone = await prisma.phone.create({
     *   data: {
     *     // ... data to create a Phone
     *   }
     * })
     * 
     */
    create<T extends PhoneCreateArgs>(args: SelectSubset<T, PhoneCreateArgs<ExtArgs>>): Prisma__PhoneClient<$Result.GetResult<Prisma.$PhonePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Phones.
     * @param {PhoneCreateManyArgs} args - Arguments to create many Phones.
     * @example
     * // Create many Phones
     * const phone = await prisma.phone.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PhoneCreateManyArgs>(args?: SelectSubset<T, PhoneCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Phones and returns the data saved in the database.
     * @param {PhoneCreateManyAndReturnArgs} args - Arguments to create many Phones.
     * @example
     * // Create many Phones
     * const phone = await prisma.phone.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Phones and only return the `id`
     * const phoneWithIdOnly = await prisma.phone.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PhoneCreateManyAndReturnArgs>(args?: SelectSubset<T, PhoneCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PhonePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Phone.
     * @param {PhoneDeleteArgs} args - Arguments to delete one Phone.
     * @example
     * // Delete one Phone
     * const Phone = await prisma.phone.delete({
     *   where: {
     *     // ... filter to delete one Phone
     *   }
     * })
     * 
     */
    delete<T extends PhoneDeleteArgs>(args: SelectSubset<T, PhoneDeleteArgs<ExtArgs>>): Prisma__PhoneClient<$Result.GetResult<Prisma.$PhonePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Phone.
     * @param {PhoneUpdateArgs} args - Arguments to update one Phone.
     * @example
     * // Update one Phone
     * const phone = await prisma.phone.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PhoneUpdateArgs>(args: SelectSubset<T, PhoneUpdateArgs<ExtArgs>>): Prisma__PhoneClient<$Result.GetResult<Prisma.$PhonePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Phones.
     * @param {PhoneDeleteManyArgs} args - Arguments to filter Phones to delete.
     * @example
     * // Delete a few Phones
     * const { count } = await prisma.phone.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PhoneDeleteManyArgs>(args?: SelectSubset<T, PhoneDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Phones.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PhoneUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Phones
     * const phone = await prisma.phone.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PhoneUpdateManyArgs>(args: SelectSubset<T, PhoneUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Phones and returns the data updated in the database.
     * @param {PhoneUpdateManyAndReturnArgs} args - Arguments to update many Phones.
     * @example
     * // Update many Phones
     * const phone = await prisma.phone.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Phones and only return the `id`
     * const phoneWithIdOnly = await prisma.phone.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PhoneUpdateManyAndReturnArgs>(args: SelectSubset<T, PhoneUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PhonePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Phone.
     * @param {PhoneUpsertArgs} args - Arguments to update or create a Phone.
     * @example
     * // Update or create a Phone
     * const phone = await prisma.phone.upsert({
     *   create: {
     *     // ... data to create a Phone
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Phone we want to update
     *   }
     * })
     */
    upsert<T extends PhoneUpsertArgs>(args: SelectSubset<T, PhoneUpsertArgs<ExtArgs>>): Prisma__PhoneClient<$Result.GetResult<Prisma.$PhonePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Phones.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PhoneCountArgs} args - Arguments to filter Phones to count.
     * @example
     * // Count the number of Phones
     * const count = await prisma.phone.count({
     *   where: {
     *     // ... the filter for the Phones we want to count
     *   }
     * })
    **/
    count<T extends PhoneCountArgs>(
      args?: Subset<T, PhoneCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PhoneCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Phone.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PhoneAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PhoneAggregateArgs>(args: Subset<T, PhoneAggregateArgs>): Prisma.PrismaPromise<GetPhoneAggregateType<T>>

    /**
     * Group by Phone.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PhoneGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PhoneGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PhoneGroupByArgs['orderBy'] }
        : { orderBy?: PhoneGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PhoneGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPhoneGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Phone model
   */
  readonly fields: PhoneFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Phone.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PhoneClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    client<T extends ClientDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ClientDefaultArgs<ExtArgs>>): Prisma__ClientClient<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Phone model
   */
  interface PhoneFieldRefs {
    readonly id: FieldRef<"Phone", 'Int'>
    readonly ddd: FieldRef<"Phone", 'String'>
    readonly number: FieldRef<"Phone", 'String'>
    readonly clientId: FieldRef<"Phone", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Phone findUnique
   */
  export type PhoneFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Phone
     */
    select?: PhoneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Phone
     */
    omit?: PhoneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PhoneInclude<ExtArgs> | null
    /**
     * Filter, which Phone to fetch.
     */
    where: PhoneWhereUniqueInput
  }

  /**
   * Phone findUniqueOrThrow
   */
  export type PhoneFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Phone
     */
    select?: PhoneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Phone
     */
    omit?: PhoneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PhoneInclude<ExtArgs> | null
    /**
     * Filter, which Phone to fetch.
     */
    where: PhoneWhereUniqueInput
  }

  /**
   * Phone findFirst
   */
  export type PhoneFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Phone
     */
    select?: PhoneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Phone
     */
    omit?: PhoneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PhoneInclude<ExtArgs> | null
    /**
     * Filter, which Phone to fetch.
     */
    where?: PhoneWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Phones to fetch.
     */
    orderBy?: PhoneOrderByWithRelationInput | PhoneOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Phones.
     */
    cursor?: PhoneWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Phones from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Phones.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Phones.
     */
    distinct?: PhoneScalarFieldEnum | PhoneScalarFieldEnum[]
  }

  /**
   * Phone findFirstOrThrow
   */
  export type PhoneFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Phone
     */
    select?: PhoneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Phone
     */
    omit?: PhoneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PhoneInclude<ExtArgs> | null
    /**
     * Filter, which Phone to fetch.
     */
    where?: PhoneWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Phones to fetch.
     */
    orderBy?: PhoneOrderByWithRelationInput | PhoneOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Phones.
     */
    cursor?: PhoneWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Phones from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Phones.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Phones.
     */
    distinct?: PhoneScalarFieldEnum | PhoneScalarFieldEnum[]
  }

  /**
   * Phone findMany
   */
  export type PhoneFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Phone
     */
    select?: PhoneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Phone
     */
    omit?: PhoneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PhoneInclude<ExtArgs> | null
    /**
     * Filter, which Phones to fetch.
     */
    where?: PhoneWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Phones to fetch.
     */
    orderBy?: PhoneOrderByWithRelationInput | PhoneOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Phones.
     */
    cursor?: PhoneWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Phones from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Phones.
     */
    skip?: number
    distinct?: PhoneScalarFieldEnum | PhoneScalarFieldEnum[]
  }

  /**
   * Phone create
   */
  export type PhoneCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Phone
     */
    select?: PhoneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Phone
     */
    omit?: PhoneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PhoneInclude<ExtArgs> | null
    /**
     * The data needed to create a Phone.
     */
    data: XOR<PhoneCreateInput, PhoneUncheckedCreateInput>
  }

  /**
   * Phone createMany
   */
  export type PhoneCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Phones.
     */
    data: PhoneCreateManyInput | PhoneCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Phone createManyAndReturn
   */
  export type PhoneCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Phone
     */
    select?: PhoneSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Phone
     */
    omit?: PhoneOmit<ExtArgs> | null
    /**
     * The data used to create many Phones.
     */
    data: PhoneCreateManyInput | PhoneCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PhoneIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Phone update
   */
  export type PhoneUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Phone
     */
    select?: PhoneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Phone
     */
    omit?: PhoneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PhoneInclude<ExtArgs> | null
    /**
     * The data needed to update a Phone.
     */
    data: XOR<PhoneUpdateInput, PhoneUncheckedUpdateInput>
    /**
     * Choose, which Phone to update.
     */
    where: PhoneWhereUniqueInput
  }

  /**
   * Phone updateMany
   */
  export type PhoneUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Phones.
     */
    data: XOR<PhoneUpdateManyMutationInput, PhoneUncheckedUpdateManyInput>
    /**
     * Filter which Phones to update
     */
    where?: PhoneWhereInput
    /**
     * Limit how many Phones to update.
     */
    limit?: number
  }

  /**
   * Phone updateManyAndReturn
   */
  export type PhoneUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Phone
     */
    select?: PhoneSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Phone
     */
    omit?: PhoneOmit<ExtArgs> | null
    /**
     * The data used to update Phones.
     */
    data: XOR<PhoneUpdateManyMutationInput, PhoneUncheckedUpdateManyInput>
    /**
     * Filter which Phones to update
     */
    where?: PhoneWhereInput
    /**
     * Limit how many Phones to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PhoneIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Phone upsert
   */
  export type PhoneUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Phone
     */
    select?: PhoneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Phone
     */
    omit?: PhoneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PhoneInclude<ExtArgs> | null
    /**
     * The filter to search for the Phone to update in case it exists.
     */
    where: PhoneWhereUniqueInput
    /**
     * In case the Phone found by the `where` argument doesn't exist, create a new Phone with this data.
     */
    create: XOR<PhoneCreateInput, PhoneUncheckedCreateInput>
    /**
     * In case the Phone was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PhoneUpdateInput, PhoneUncheckedUpdateInput>
  }

  /**
   * Phone delete
   */
  export type PhoneDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Phone
     */
    select?: PhoneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Phone
     */
    omit?: PhoneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PhoneInclude<ExtArgs> | null
    /**
     * Filter which Phone to delete.
     */
    where: PhoneWhereUniqueInput
  }

  /**
   * Phone deleteMany
   */
  export type PhoneDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Phones to delete
     */
    where?: PhoneWhereInput
    /**
     * Limit how many Phones to delete.
     */
    limit?: number
  }

  /**
   * Phone without action
   */
  export type PhoneDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Phone
     */
    select?: PhoneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Phone
     */
    omit?: PhoneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PhoneInclude<ExtArgs> | null
  }


  /**
   * Model Pet
   */

  export type AggregatePet = {
    _count: PetCountAggregateOutputType | null
    _avg: PetAvgAggregateOutputType | null
    _sum: PetSumAggregateOutputType | null
    _min: PetMinAggregateOutputType | null
    _max: PetMaxAggregateOutputType | null
  }

  export type PetAvgAggregateOutputType = {
    id: number | null
    clientId: number | null
  }

  export type PetSumAggregateOutputType = {
    id: number | null
    clientId: number | null
  }

  export type PetMinAggregateOutputType = {
    id: number | null
    name: string | null
    breed: string | null
    species: string | null
    clientId: number | null
  }

  export type PetMaxAggregateOutputType = {
    id: number | null
    name: string | null
    breed: string | null
    species: string | null
    clientId: number | null
  }

  export type PetCountAggregateOutputType = {
    id: number
    name: number
    breed: number
    species: number
    clientId: number
    _all: number
  }


  export type PetAvgAggregateInputType = {
    id?: true
    clientId?: true
  }

  export type PetSumAggregateInputType = {
    id?: true
    clientId?: true
  }

  export type PetMinAggregateInputType = {
    id?: true
    name?: true
    breed?: true
    species?: true
    clientId?: true
  }

  export type PetMaxAggregateInputType = {
    id?: true
    name?: true
    breed?: true
    species?: true
    clientId?: true
  }

  export type PetCountAggregateInputType = {
    id?: true
    name?: true
    breed?: true
    species?: true
    clientId?: true
    _all?: true
  }

  export type PetAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Pet to aggregate.
     */
    where?: PetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pets to fetch.
     */
    orderBy?: PetOrderByWithRelationInput | PetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Pets
    **/
    _count?: true | PetCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PetAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PetSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PetMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PetMaxAggregateInputType
  }

  export type GetPetAggregateType<T extends PetAggregateArgs> = {
        [P in keyof T & keyof AggregatePet]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePet[P]>
      : GetScalarType<T[P], AggregatePet[P]>
  }




  export type PetGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PetWhereInput
    orderBy?: PetOrderByWithAggregationInput | PetOrderByWithAggregationInput[]
    by: PetScalarFieldEnum[] | PetScalarFieldEnum
    having?: PetScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PetCountAggregateInputType | true
    _avg?: PetAvgAggregateInputType
    _sum?: PetSumAggregateInputType
    _min?: PetMinAggregateInputType
    _max?: PetMaxAggregateInputType
  }

  export type PetGroupByOutputType = {
    id: number
    name: string
    breed: string
    species: string
    clientId: number
    _count: PetCountAggregateOutputType | null
    _avg: PetAvgAggregateOutputType | null
    _sum: PetSumAggregateOutputType | null
    _min: PetMinAggregateOutputType | null
    _max: PetMaxAggregateOutputType | null
  }

  type GetPetGroupByPayload<T extends PetGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PetGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PetGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PetGroupByOutputType[P]>
            : GetScalarType<T[P], PetGroupByOutputType[P]>
        }
      >
    >


  export type PetSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    breed?: boolean
    species?: boolean
    clientId?: boolean
    client?: boolean | ClientDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["pet"]>

  export type PetSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    breed?: boolean
    species?: boolean
    clientId?: boolean
    client?: boolean | ClientDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["pet"]>

  export type PetSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    breed?: boolean
    species?: boolean
    clientId?: boolean
    client?: boolean | ClientDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["pet"]>

  export type PetSelectScalar = {
    id?: boolean
    name?: boolean
    breed?: boolean
    species?: boolean
    clientId?: boolean
  }

  export type PetOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "breed" | "species" | "clientId", ExtArgs["result"]["pet"]>
  export type PetInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    client?: boolean | ClientDefaultArgs<ExtArgs>
  }
  export type PetIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    client?: boolean | ClientDefaultArgs<ExtArgs>
  }
  export type PetIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    client?: boolean | ClientDefaultArgs<ExtArgs>
  }

  export type $PetPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Pet"
    objects: {
      client: Prisma.$ClientPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      breed: string
      species: string
      clientId: number
    }, ExtArgs["result"]["pet"]>
    composites: {}
  }

  type PetGetPayload<S extends boolean | null | undefined | PetDefaultArgs> = $Result.GetResult<Prisma.$PetPayload, S>

  type PetCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PetFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PetCountAggregateInputType | true
    }

  export interface PetDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Pet'], meta: { name: 'Pet' } }
    /**
     * Find zero or one Pet that matches the filter.
     * @param {PetFindUniqueArgs} args - Arguments to find a Pet
     * @example
     * // Get one Pet
     * const pet = await prisma.pet.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PetFindUniqueArgs>(args: SelectSubset<T, PetFindUniqueArgs<ExtArgs>>): Prisma__PetClient<$Result.GetResult<Prisma.$PetPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Pet that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PetFindUniqueOrThrowArgs} args - Arguments to find a Pet
     * @example
     * // Get one Pet
     * const pet = await prisma.pet.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PetFindUniqueOrThrowArgs>(args: SelectSubset<T, PetFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PetClient<$Result.GetResult<Prisma.$PetPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Pet that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PetFindFirstArgs} args - Arguments to find a Pet
     * @example
     * // Get one Pet
     * const pet = await prisma.pet.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PetFindFirstArgs>(args?: SelectSubset<T, PetFindFirstArgs<ExtArgs>>): Prisma__PetClient<$Result.GetResult<Prisma.$PetPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Pet that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PetFindFirstOrThrowArgs} args - Arguments to find a Pet
     * @example
     * // Get one Pet
     * const pet = await prisma.pet.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PetFindFirstOrThrowArgs>(args?: SelectSubset<T, PetFindFirstOrThrowArgs<ExtArgs>>): Prisma__PetClient<$Result.GetResult<Prisma.$PetPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Pets that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PetFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Pets
     * const pets = await prisma.pet.findMany()
     * 
     * // Get first 10 Pets
     * const pets = await prisma.pet.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const petWithIdOnly = await prisma.pet.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PetFindManyArgs>(args?: SelectSubset<T, PetFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PetPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Pet.
     * @param {PetCreateArgs} args - Arguments to create a Pet.
     * @example
     * // Create one Pet
     * const Pet = await prisma.pet.create({
     *   data: {
     *     // ... data to create a Pet
     *   }
     * })
     * 
     */
    create<T extends PetCreateArgs>(args: SelectSubset<T, PetCreateArgs<ExtArgs>>): Prisma__PetClient<$Result.GetResult<Prisma.$PetPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Pets.
     * @param {PetCreateManyArgs} args - Arguments to create many Pets.
     * @example
     * // Create many Pets
     * const pet = await prisma.pet.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PetCreateManyArgs>(args?: SelectSubset<T, PetCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Pets and returns the data saved in the database.
     * @param {PetCreateManyAndReturnArgs} args - Arguments to create many Pets.
     * @example
     * // Create many Pets
     * const pet = await prisma.pet.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Pets and only return the `id`
     * const petWithIdOnly = await prisma.pet.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PetCreateManyAndReturnArgs>(args?: SelectSubset<T, PetCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PetPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Pet.
     * @param {PetDeleteArgs} args - Arguments to delete one Pet.
     * @example
     * // Delete one Pet
     * const Pet = await prisma.pet.delete({
     *   where: {
     *     // ... filter to delete one Pet
     *   }
     * })
     * 
     */
    delete<T extends PetDeleteArgs>(args: SelectSubset<T, PetDeleteArgs<ExtArgs>>): Prisma__PetClient<$Result.GetResult<Prisma.$PetPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Pet.
     * @param {PetUpdateArgs} args - Arguments to update one Pet.
     * @example
     * // Update one Pet
     * const pet = await prisma.pet.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PetUpdateArgs>(args: SelectSubset<T, PetUpdateArgs<ExtArgs>>): Prisma__PetClient<$Result.GetResult<Prisma.$PetPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Pets.
     * @param {PetDeleteManyArgs} args - Arguments to filter Pets to delete.
     * @example
     * // Delete a few Pets
     * const { count } = await prisma.pet.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PetDeleteManyArgs>(args?: SelectSubset<T, PetDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Pets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PetUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Pets
     * const pet = await prisma.pet.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PetUpdateManyArgs>(args: SelectSubset<T, PetUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Pets and returns the data updated in the database.
     * @param {PetUpdateManyAndReturnArgs} args - Arguments to update many Pets.
     * @example
     * // Update many Pets
     * const pet = await prisma.pet.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Pets and only return the `id`
     * const petWithIdOnly = await prisma.pet.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PetUpdateManyAndReturnArgs>(args: SelectSubset<T, PetUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PetPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Pet.
     * @param {PetUpsertArgs} args - Arguments to update or create a Pet.
     * @example
     * // Update or create a Pet
     * const pet = await prisma.pet.upsert({
     *   create: {
     *     // ... data to create a Pet
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Pet we want to update
     *   }
     * })
     */
    upsert<T extends PetUpsertArgs>(args: SelectSubset<T, PetUpsertArgs<ExtArgs>>): Prisma__PetClient<$Result.GetResult<Prisma.$PetPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Pets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PetCountArgs} args - Arguments to filter Pets to count.
     * @example
     * // Count the number of Pets
     * const count = await prisma.pet.count({
     *   where: {
     *     // ... the filter for the Pets we want to count
     *   }
     * })
    **/
    count<T extends PetCountArgs>(
      args?: Subset<T, PetCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PetCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Pet.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PetAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PetAggregateArgs>(args: Subset<T, PetAggregateArgs>): Prisma.PrismaPromise<GetPetAggregateType<T>>

    /**
     * Group by Pet.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PetGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PetGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PetGroupByArgs['orderBy'] }
        : { orderBy?: PetGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PetGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPetGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Pet model
   */
  readonly fields: PetFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Pet.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PetClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    client<T extends ClientDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ClientDefaultArgs<ExtArgs>>): Prisma__ClientClient<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Pet model
   */
  interface PetFieldRefs {
    readonly id: FieldRef<"Pet", 'Int'>
    readonly name: FieldRef<"Pet", 'String'>
    readonly breed: FieldRef<"Pet", 'String'>
    readonly species: FieldRef<"Pet", 'String'>
    readonly clientId: FieldRef<"Pet", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Pet findUnique
   */
  export type PetFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pet
     */
    select?: PetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Pet
     */
    omit?: PetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PetInclude<ExtArgs> | null
    /**
     * Filter, which Pet to fetch.
     */
    where: PetWhereUniqueInput
  }

  /**
   * Pet findUniqueOrThrow
   */
  export type PetFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pet
     */
    select?: PetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Pet
     */
    omit?: PetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PetInclude<ExtArgs> | null
    /**
     * Filter, which Pet to fetch.
     */
    where: PetWhereUniqueInput
  }

  /**
   * Pet findFirst
   */
  export type PetFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pet
     */
    select?: PetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Pet
     */
    omit?: PetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PetInclude<ExtArgs> | null
    /**
     * Filter, which Pet to fetch.
     */
    where?: PetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pets to fetch.
     */
    orderBy?: PetOrderByWithRelationInput | PetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Pets.
     */
    cursor?: PetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Pets.
     */
    distinct?: PetScalarFieldEnum | PetScalarFieldEnum[]
  }

  /**
   * Pet findFirstOrThrow
   */
  export type PetFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pet
     */
    select?: PetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Pet
     */
    omit?: PetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PetInclude<ExtArgs> | null
    /**
     * Filter, which Pet to fetch.
     */
    where?: PetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pets to fetch.
     */
    orderBy?: PetOrderByWithRelationInput | PetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Pets.
     */
    cursor?: PetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Pets.
     */
    distinct?: PetScalarFieldEnum | PetScalarFieldEnum[]
  }

  /**
   * Pet findMany
   */
  export type PetFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pet
     */
    select?: PetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Pet
     */
    omit?: PetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PetInclude<ExtArgs> | null
    /**
     * Filter, which Pets to fetch.
     */
    where?: PetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pets to fetch.
     */
    orderBy?: PetOrderByWithRelationInput | PetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Pets.
     */
    cursor?: PetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pets.
     */
    skip?: number
    distinct?: PetScalarFieldEnum | PetScalarFieldEnum[]
  }

  /**
   * Pet create
   */
  export type PetCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pet
     */
    select?: PetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Pet
     */
    omit?: PetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PetInclude<ExtArgs> | null
    /**
     * The data needed to create a Pet.
     */
    data: XOR<PetCreateInput, PetUncheckedCreateInput>
  }

  /**
   * Pet createMany
   */
  export type PetCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Pets.
     */
    data: PetCreateManyInput | PetCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Pet createManyAndReturn
   */
  export type PetCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pet
     */
    select?: PetSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Pet
     */
    omit?: PetOmit<ExtArgs> | null
    /**
     * The data used to create many Pets.
     */
    data: PetCreateManyInput | PetCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PetIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Pet update
   */
  export type PetUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pet
     */
    select?: PetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Pet
     */
    omit?: PetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PetInclude<ExtArgs> | null
    /**
     * The data needed to update a Pet.
     */
    data: XOR<PetUpdateInput, PetUncheckedUpdateInput>
    /**
     * Choose, which Pet to update.
     */
    where: PetWhereUniqueInput
  }

  /**
   * Pet updateMany
   */
  export type PetUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Pets.
     */
    data: XOR<PetUpdateManyMutationInput, PetUncheckedUpdateManyInput>
    /**
     * Filter which Pets to update
     */
    where?: PetWhereInput
    /**
     * Limit how many Pets to update.
     */
    limit?: number
  }

  /**
   * Pet updateManyAndReturn
   */
  export type PetUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pet
     */
    select?: PetSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Pet
     */
    omit?: PetOmit<ExtArgs> | null
    /**
     * The data used to update Pets.
     */
    data: XOR<PetUpdateManyMutationInput, PetUncheckedUpdateManyInput>
    /**
     * Filter which Pets to update
     */
    where?: PetWhereInput
    /**
     * Limit how many Pets to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PetIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Pet upsert
   */
  export type PetUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pet
     */
    select?: PetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Pet
     */
    omit?: PetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PetInclude<ExtArgs> | null
    /**
     * The filter to search for the Pet to update in case it exists.
     */
    where: PetWhereUniqueInput
    /**
     * In case the Pet found by the `where` argument doesn't exist, create a new Pet with this data.
     */
    create: XOR<PetCreateInput, PetUncheckedCreateInput>
    /**
     * In case the Pet was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PetUpdateInput, PetUncheckedUpdateInput>
  }

  /**
   * Pet delete
   */
  export type PetDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pet
     */
    select?: PetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Pet
     */
    omit?: PetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PetInclude<ExtArgs> | null
    /**
     * Filter which Pet to delete.
     */
    where: PetWhereUniqueInput
  }

  /**
   * Pet deleteMany
   */
  export type PetDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Pets to delete
     */
    where?: PetWhereInput
    /**
     * Limit how many Pets to delete.
     */
    limit?: number
  }

  /**
   * Pet without action
   */
  export type PetDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pet
     */
    select?: PetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Pet
     */
    omit?: PetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PetInclude<ExtArgs> | null
  }


  /**
   * Model Product
   */

  export type AggregateProduct = {
    _count: ProductCountAggregateOutputType | null
    _avg: ProductAvgAggregateOutputType | null
    _sum: ProductSumAggregateOutputType | null
    _min: ProductMinAggregateOutputType | null
    _max: ProductMaxAggregateOutputType | null
  }

  export type ProductAvgAggregateOutputType = {
    id: number | null
    value: Decimal | null
  }

  export type ProductSumAggregateOutputType = {
    id: number | null
    value: Decimal | null
  }

  export type ProductMinAggregateOutputType = {
    id: number | null
    title: string | null
    value: Decimal | null
  }

  export type ProductMaxAggregateOutputType = {
    id: number | null
    title: string | null
    value: Decimal | null
  }

  export type ProductCountAggregateOutputType = {
    id: number
    title: number
    value: number
    _all: number
  }


  export type ProductAvgAggregateInputType = {
    id?: true
    value?: true
  }

  export type ProductSumAggregateInputType = {
    id?: true
    value?: true
  }

  export type ProductMinAggregateInputType = {
    id?: true
    title?: true
    value?: true
  }

  export type ProductMaxAggregateInputType = {
    id?: true
    title?: true
    value?: true
  }

  export type ProductCountAggregateInputType = {
    id?: true
    title?: true
    value?: true
    _all?: true
  }

  export type ProductAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Product to aggregate.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Products
    **/
    _count?: true | ProductCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProductAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProductSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProductMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProductMaxAggregateInputType
  }

  export type GetProductAggregateType<T extends ProductAggregateArgs> = {
        [P in keyof T & keyof AggregateProduct]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProduct[P]>
      : GetScalarType<T[P], AggregateProduct[P]>
  }




  export type ProductGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductWhereInput
    orderBy?: ProductOrderByWithAggregationInput | ProductOrderByWithAggregationInput[]
    by: ProductScalarFieldEnum[] | ProductScalarFieldEnum
    having?: ProductScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProductCountAggregateInputType | true
    _avg?: ProductAvgAggregateInputType
    _sum?: ProductSumAggregateInputType
    _min?: ProductMinAggregateInputType
    _max?: ProductMaxAggregateInputType
  }

  export type ProductGroupByOutputType = {
    id: number
    title: string
    value: Decimal
    _count: ProductCountAggregateOutputType | null
    _avg: ProductAvgAggregateOutputType | null
    _sum: ProductSumAggregateOutputType | null
    _min: ProductMinAggregateOutputType | null
    _max: ProductMaxAggregateOutputType | null
  }

  type GetProductGroupByPayload<T extends ProductGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProductGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProductGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProductGroupByOutputType[P]>
            : GetScalarType<T[P], ProductGroupByOutputType[P]>
        }
      >
    >


  export type ProductSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    value?: boolean
    consumptions?: boolean | Product$consumptionsArgs<ExtArgs>
    _count?: boolean | ProductCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["product"]>

  export type ProductSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    value?: boolean
  }, ExtArgs["result"]["product"]>

  export type ProductSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    value?: boolean
  }, ExtArgs["result"]["product"]>

  export type ProductSelectScalar = {
    id?: boolean
    title?: boolean
    value?: boolean
  }

  export type ProductOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "title" | "value", ExtArgs["result"]["product"]>
  export type ProductInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    consumptions?: boolean | Product$consumptionsArgs<ExtArgs>
    _count?: boolean | ProductCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ProductIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type ProductIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $ProductPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Product"
    objects: {
      consumptions: Prisma.$ConsumedProductPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      title: string
      value: Prisma.Decimal
    }, ExtArgs["result"]["product"]>
    composites: {}
  }

  type ProductGetPayload<S extends boolean | null | undefined | ProductDefaultArgs> = $Result.GetResult<Prisma.$ProductPayload, S>

  type ProductCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ProductFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProductCountAggregateInputType | true
    }

  export interface ProductDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Product'], meta: { name: 'Product' } }
    /**
     * Find zero or one Product that matches the filter.
     * @param {ProductFindUniqueArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProductFindUniqueArgs>(args: SelectSubset<T, ProductFindUniqueArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Product that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ProductFindUniqueOrThrowArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProductFindUniqueOrThrowArgs>(args: SelectSubset<T, ProductFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Product that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductFindFirstArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProductFindFirstArgs>(args?: SelectSubset<T, ProductFindFirstArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Product that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductFindFirstOrThrowArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProductFindFirstOrThrowArgs>(args?: SelectSubset<T, ProductFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Products that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Products
     * const products = await prisma.product.findMany()
     * 
     * // Get first 10 Products
     * const products = await prisma.product.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const productWithIdOnly = await prisma.product.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProductFindManyArgs>(args?: SelectSubset<T, ProductFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Product.
     * @param {ProductCreateArgs} args - Arguments to create a Product.
     * @example
     * // Create one Product
     * const Product = await prisma.product.create({
     *   data: {
     *     // ... data to create a Product
     *   }
     * })
     * 
     */
    create<T extends ProductCreateArgs>(args: SelectSubset<T, ProductCreateArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Products.
     * @param {ProductCreateManyArgs} args - Arguments to create many Products.
     * @example
     * // Create many Products
     * const product = await prisma.product.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProductCreateManyArgs>(args?: SelectSubset<T, ProductCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Products and returns the data saved in the database.
     * @param {ProductCreateManyAndReturnArgs} args - Arguments to create many Products.
     * @example
     * // Create many Products
     * const product = await prisma.product.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Products and only return the `id`
     * const productWithIdOnly = await prisma.product.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProductCreateManyAndReturnArgs>(args?: SelectSubset<T, ProductCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Product.
     * @param {ProductDeleteArgs} args - Arguments to delete one Product.
     * @example
     * // Delete one Product
     * const Product = await prisma.product.delete({
     *   where: {
     *     // ... filter to delete one Product
     *   }
     * })
     * 
     */
    delete<T extends ProductDeleteArgs>(args: SelectSubset<T, ProductDeleteArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Product.
     * @param {ProductUpdateArgs} args - Arguments to update one Product.
     * @example
     * // Update one Product
     * const product = await prisma.product.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProductUpdateArgs>(args: SelectSubset<T, ProductUpdateArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Products.
     * @param {ProductDeleteManyArgs} args - Arguments to filter Products to delete.
     * @example
     * // Delete a few Products
     * const { count } = await prisma.product.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProductDeleteManyArgs>(args?: SelectSubset<T, ProductDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Products
     * const product = await prisma.product.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProductUpdateManyArgs>(args: SelectSubset<T, ProductUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Products and returns the data updated in the database.
     * @param {ProductUpdateManyAndReturnArgs} args - Arguments to update many Products.
     * @example
     * // Update many Products
     * const product = await prisma.product.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Products and only return the `id`
     * const productWithIdOnly = await prisma.product.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ProductUpdateManyAndReturnArgs>(args: SelectSubset<T, ProductUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Product.
     * @param {ProductUpsertArgs} args - Arguments to update or create a Product.
     * @example
     * // Update or create a Product
     * const product = await prisma.product.upsert({
     *   create: {
     *     // ... data to create a Product
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Product we want to update
     *   }
     * })
     */
    upsert<T extends ProductUpsertArgs>(args: SelectSubset<T, ProductUpsertArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductCountArgs} args - Arguments to filter Products to count.
     * @example
     * // Count the number of Products
     * const count = await prisma.product.count({
     *   where: {
     *     // ... the filter for the Products we want to count
     *   }
     * })
    **/
    count<T extends ProductCountArgs>(
      args?: Subset<T, ProductCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProductCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Product.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProductAggregateArgs>(args: Subset<T, ProductAggregateArgs>): Prisma.PrismaPromise<GetProductAggregateType<T>>

    /**
     * Group by Product.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProductGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProductGroupByArgs['orderBy'] }
        : { orderBy?: ProductGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProductGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Product model
   */
  readonly fields: ProductFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Product.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProductClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    consumptions<T extends Product$consumptionsArgs<ExtArgs> = {}>(args?: Subset<T, Product$consumptionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConsumedProductPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Product model
   */
  interface ProductFieldRefs {
    readonly id: FieldRef<"Product", 'Int'>
    readonly title: FieldRef<"Product", 'String'>
    readonly value: FieldRef<"Product", 'Decimal'>
  }
    

  // Custom InputTypes
  /**
   * Product findUnique
   */
  export type ProductFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where: ProductWhereUniqueInput
  }

  /**
   * Product findUniqueOrThrow
   */
  export type ProductFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where: ProductWhereUniqueInput
  }

  /**
   * Product findFirst
   */
  export type ProductFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Products.
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Products.
     */
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }

  /**
   * Product findFirstOrThrow
   */
  export type ProductFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Products.
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Products.
     */
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }

  /**
   * Product findMany
   */
  export type ProductFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Products to fetch.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Products.
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }

  /**
   * Product create
   */
  export type ProductCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * The data needed to create a Product.
     */
    data: XOR<ProductCreateInput, ProductUncheckedCreateInput>
  }

  /**
   * Product createMany
   */
  export type ProductCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Products.
     */
    data: ProductCreateManyInput | ProductCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Product createManyAndReturn
   */
  export type ProductCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * The data used to create many Products.
     */
    data: ProductCreateManyInput | ProductCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Product update
   */
  export type ProductUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * The data needed to update a Product.
     */
    data: XOR<ProductUpdateInput, ProductUncheckedUpdateInput>
    /**
     * Choose, which Product to update.
     */
    where: ProductWhereUniqueInput
  }

  /**
   * Product updateMany
   */
  export type ProductUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Products.
     */
    data: XOR<ProductUpdateManyMutationInput, ProductUncheckedUpdateManyInput>
    /**
     * Filter which Products to update
     */
    where?: ProductWhereInput
    /**
     * Limit how many Products to update.
     */
    limit?: number
  }

  /**
   * Product updateManyAndReturn
   */
  export type ProductUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * The data used to update Products.
     */
    data: XOR<ProductUpdateManyMutationInput, ProductUncheckedUpdateManyInput>
    /**
     * Filter which Products to update
     */
    where?: ProductWhereInput
    /**
     * Limit how many Products to update.
     */
    limit?: number
  }

  /**
   * Product upsert
   */
  export type ProductUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * The filter to search for the Product to update in case it exists.
     */
    where: ProductWhereUniqueInput
    /**
     * In case the Product found by the `where` argument doesn't exist, create a new Product with this data.
     */
    create: XOR<ProductCreateInput, ProductUncheckedCreateInput>
    /**
     * In case the Product was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProductUpdateInput, ProductUncheckedUpdateInput>
  }

  /**
   * Product delete
   */
  export type ProductDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter which Product to delete.
     */
    where: ProductWhereUniqueInput
  }

  /**
   * Product deleteMany
   */
  export type ProductDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Products to delete
     */
    where?: ProductWhereInput
    /**
     * Limit how many Products to delete.
     */
    limit?: number
  }

  /**
   * Product.consumptions
   */
  export type Product$consumptionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConsumedProduct
     */
    select?: ConsumedProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ConsumedProduct
     */
    omit?: ConsumedProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsumedProductInclude<ExtArgs> | null
    where?: ConsumedProductWhereInput
    orderBy?: ConsumedProductOrderByWithRelationInput | ConsumedProductOrderByWithRelationInput[]
    cursor?: ConsumedProductWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ConsumedProductScalarFieldEnum | ConsumedProductScalarFieldEnum[]
  }

  /**
   * Product without action
   */
  export type ProductDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
  }


  /**
   * Model Service
   */

  export type AggregateService = {
    _count: ServiceCountAggregateOutputType | null
    _avg: ServiceAvgAggregateOutputType | null
    _sum: ServiceSumAggregateOutputType | null
    _min: ServiceMinAggregateOutputType | null
    _max: ServiceMaxAggregateOutputType | null
  }

  export type ServiceAvgAggregateOutputType = {
    id: number | null
    value: Decimal | null
  }

  export type ServiceSumAggregateOutputType = {
    id: number | null
    value: Decimal | null
  }

  export type ServiceMinAggregateOutputType = {
    id: number | null
    title: string | null
    value: Decimal | null
  }

  export type ServiceMaxAggregateOutputType = {
    id: number | null
    title: string | null
    value: Decimal | null
  }

  export type ServiceCountAggregateOutputType = {
    id: number
    title: number
    value: number
    _all: number
  }


  export type ServiceAvgAggregateInputType = {
    id?: true
    value?: true
  }

  export type ServiceSumAggregateInputType = {
    id?: true
    value?: true
  }

  export type ServiceMinAggregateInputType = {
    id?: true
    title?: true
    value?: true
  }

  export type ServiceMaxAggregateInputType = {
    id?: true
    title?: true
    value?: true
  }

  export type ServiceCountAggregateInputType = {
    id?: true
    title?: true
    value?: true
    _all?: true
  }

  export type ServiceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Service to aggregate.
     */
    where?: ServiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Services to fetch.
     */
    orderBy?: ServiceOrderByWithRelationInput | ServiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ServiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Services from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Services.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Services
    **/
    _count?: true | ServiceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ServiceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ServiceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ServiceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ServiceMaxAggregateInputType
  }

  export type GetServiceAggregateType<T extends ServiceAggregateArgs> = {
        [P in keyof T & keyof AggregateService]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateService[P]>
      : GetScalarType<T[P], AggregateService[P]>
  }




  export type ServiceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ServiceWhereInput
    orderBy?: ServiceOrderByWithAggregationInput | ServiceOrderByWithAggregationInput[]
    by: ServiceScalarFieldEnum[] | ServiceScalarFieldEnum
    having?: ServiceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ServiceCountAggregateInputType | true
    _avg?: ServiceAvgAggregateInputType
    _sum?: ServiceSumAggregateInputType
    _min?: ServiceMinAggregateInputType
    _max?: ServiceMaxAggregateInputType
  }

  export type ServiceGroupByOutputType = {
    id: number
    title: string
    value: Decimal
    _count: ServiceCountAggregateOutputType | null
    _avg: ServiceAvgAggregateOutputType | null
    _sum: ServiceSumAggregateOutputType | null
    _min: ServiceMinAggregateOutputType | null
    _max: ServiceMaxAggregateOutputType | null
  }

  type GetServiceGroupByPayload<T extends ServiceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ServiceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ServiceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ServiceGroupByOutputType[P]>
            : GetScalarType<T[P], ServiceGroupByOutputType[P]>
        }
      >
    >


  export type ServiceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    value?: boolean
    consumptions?: boolean | Service$consumptionsArgs<ExtArgs>
    _count?: boolean | ServiceCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["service"]>

  export type ServiceSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    value?: boolean
  }, ExtArgs["result"]["service"]>

  export type ServiceSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    value?: boolean
  }, ExtArgs["result"]["service"]>

  export type ServiceSelectScalar = {
    id?: boolean
    title?: boolean
    value?: boolean
  }

  export type ServiceOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "title" | "value", ExtArgs["result"]["service"]>
  export type ServiceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    consumptions?: boolean | Service$consumptionsArgs<ExtArgs>
    _count?: boolean | ServiceCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ServiceIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type ServiceIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $ServicePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Service"
    objects: {
      consumptions: Prisma.$ConsumedServicePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      title: string
      value: Prisma.Decimal
    }, ExtArgs["result"]["service"]>
    composites: {}
  }

  type ServiceGetPayload<S extends boolean | null | undefined | ServiceDefaultArgs> = $Result.GetResult<Prisma.$ServicePayload, S>

  type ServiceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ServiceFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ServiceCountAggregateInputType | true
    }

  export interface ServiceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Service'], meta: { name: 'Service' } }
    /**
     * Find zero or one Service that matches the filter.
     * @param {ServiceFindUniqueArgs} args - Arguments to find a Service
     * @example
     * // Get one Service
     * const service = await prisma.service.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ServiceFindUniqueArgs>(args: SelectSubset<T, ServiceFindUniqueArgs<ExtArgs>>): Prisma__ServiceClient<$Result.GetResult<Prisma.$ServicePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Service that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ServiceFindUniqueOrThrowArgs} args - Arguments to find a Service
     * @example
     * // Get one Service
     * const service = await prisma.service.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ServiceFindUniqueOrThrowArgs>(args: SelectSubset<T, ServiceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ServiceClient<$Result.GetResult<Prisma.$ServicePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Service that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceFindFirstArgs} args - Arguments to find a Service
     * @example
     * // Get one Service
     * const service = await prisma.service.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ServiceFindFirstArgs>(args?: SelectSubset<T, ServiceFindFirstArgs<ExtArgs>>): Prisma__ServiceClient<$Result.GetResult<Prisma.$ServicePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Service that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceFindFirstOrThrowArgs} args - Arguments to find a Service
     * @example
     * // Get one Service
     * const service = await prisma.service.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ServiceFindFirstOrThrowArgs>(args?: SelectSubset<T, ServiceFindFirstOrThrowArgs<ExtArgs>>): Prisma__ServiceClient<$Result.GetResult<Prisma.$ServicePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Services that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Services
     * const services = await prisma.service.findMany()
     * 
     * // Get first 10 Services
     * const services = await prisma.service.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const serviceWithIdOnly = await prisma.service.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ServiceFindManyArgs>(args?: SelectSubset<T, ServiceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ServicePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Service.
     * @param {ServiceCreateArgs} args - Arguments to create a Service.
     * @example
     * // Create one Service
     * const Service = await prisma.service.create({
     *   data: {
     *     // ... data to create a Service
     *   }
     * })
     * 
     */
    create<T extends ServiceCreateArgs>(args: SelectSubset<T, ServiceCreateArgs<ExtArgs>>): Prisma__ServiceClient<$Result.GetResult<Prisma.$ServicePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Services.
     * @param {ServiceCreateManyArgs} args - Arguments to create many Services.
     * @example
     * // Create many Services
     * const service = await prisma.service.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ServiceCreateManyArgs>(args?: SelectSubset<T, ServiceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Services and returns the data saved in the database.
     * @param {ServiceCreateManyAndReturnArgs} args - Arguments to create many Services.
     * @example
     * // Create many Services
     * const service = await prisma.service.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Services and only return the `id`
     * const serviceWithIdOnly = await prisma.service.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ServiceCreateManyAndReturnArgs>(args?: SelectSubset<T, ServiceCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ServicePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Service.
     * @param {ServiceDeleteArgs} args - Arguments to delete one Service.
     * @example
     * // Delete one Service
     * const Service = await prisma.service.delete({
     *   where: {
     *     // ... filter to delete one Service
     *   }
     * })
     * 
     */
    delete<T extends ServiceDeleteArgs>(args: SelectSubset<T, ServiceDeleteArgs<ExtArgs>>): Prisma__ServiceClient<$Result.GetResult<Prisma.$ServicePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Service.
     * @param {ServiceUpdateArgs} args - Arguments to update one Service.
     * @example
     * // Update one Service
     * const service = await prisma.service.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ServiceUpdateArgs>(args: SelectSubset<T, ServiceUpdateArgs<ExtArgs>>): Prisma__ServiceClient<$Result.GetResult<Prisma.$ServicePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Services.
     * @param {ServiceDeleteManyArgs} args - Arguments to filter Services to delete.
     * @example
     * // Delete a few Services
     * const { count } = await prisma.service.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ServiceDeleteManyArgs>(args?: SelectSubset<T, ServiceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Services.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Services
     * const service = await prisma.service.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ServiceUpdateManyArgs>(args: SelectSubset<T, ServiceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Services and returns the data updated in the database.
     * @param {ServiceUpdateManyAndReturnArgs} args - Arguments to update many Services.
     * @example
     * // Update many Services
     * const service = await prisma.service.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Services and only return the `id`
     * const serviceWithIdOnly = await prisma.service.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ServiceUpdateManyAndReturnArgs>(args: SelectSubset<T, ServiceUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ServicePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Service.
     * @param {ServiceUpsertArgs} args - Arguments to update or create a Service.
     * @example
     * // Update or create a Service
     * const service = await prisma.service.upsert({
     *   create: {
     *     // ... data to create a Service
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Service we want to update
     *   }
     * })
     */
    upsert<T extends ServiceUpsertArgs>(args: SelectSubset<T, ServiceUpsertArgs<ExtArgs>>): Prisma__ServiceClient<$Result.GetResult<Prisma.$ServicePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Services.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceCountArgs} args - Arguments to filter Services to count.
     * @example
     * // Count the number of Services
     * const count = await prisma.service.count({
     *   where: {
     *     // ... the filter for the Services we want to count
     *   }
     * })
    **/
    count<T extends ServiceCountArgs>(
      args?: Subset<T, ServiceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ServiceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Service.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ServiceAggregateArgs>(args: Subset<T, ServiceAggregateArgs>): Prisma.PrismaPromise<GetServiceAggregateType<T>>

    /**
     * Group by Service.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ServiceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ServiceGroupByArgs['orderBy'] }
        : { orderBy?: ServiceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ServiceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetServiceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Service model
   */
  readonly fields: ServiceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Service.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ServiceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    consumptions<T extends Service$consumptionsArgs<ExtArgs> = {}>(args?: Subset<T, Service$consumptionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConsumedServicePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Service model
   */
  interface ServiceFieldRefs {
    readonly id: FieldRef<"Service", 'Int'>
    readonly title: FieldRef<"Service", 'String'>
    readonly value: FieldRef<"Service", 'Decimal'>
  }
    

  // Custom InputTypes
  /**
   * Service findUnique
   */
  export type ServiceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Service
     */
    select?: ServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Service
     */
    omit?: ServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceInclude<ExtArgs> | null
    /**
     * Filter, which Service to fetch.
     */
    where: ServiceWhereUniqueInput
  }

  /**
   * Service findUniqueOrThrow
   */
  export type ServiceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Service
     */
    select?: ServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Service
     */
    omit?: ServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceInclude<ExtArgs> | null
    /**
     * Filter, which Service to fetch.
     */
    where: ServiceWhereUniqueInput
  }

  /**
   * Service findFirst
   */
  export type ServiceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Service
     */
    select?: ServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Service
     */
    omit?: ServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceInclude<ExtArgs> | null
    /**
     * Filter, which Service to fetch.
     */
    where?: ServiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Services to fetch.
     */
    orderBy?: ServiceOrderByWithRelationInput | ServiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Services.
     */
    cursor?: ServiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Services from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Services.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Services.
     */
    distinct?: ServiceScalarFieldEnum | ServiceScalarFieldEnum[]
  }

  /**
   * Service findFirstOrThrow
   */
  export type ServiceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Service
     */
    select?: ServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Service
     */
    omit?: ServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceInclude<ExtArgs> | null
    /**
     * Filter, which Service to fetch.
     */
    where?: ServiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Services to fetch.
     */
    orderBy?: ServiceOrderByWithRelationInput | ServiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Services.
     */
    cursor?: ServiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Services from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Services.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Services.
     */
    distinct?: ServiceScalarFieldEnum | ServiceScalarFieldEnum[]
  }

  /**
   * Service findMany
   */
  export type ServiceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Service
     */
    select?: ServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Service
     */
    omit?: ServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceInclude<ExtArgs> | null
    /**
     * Filter, which Services to fetch.
     */
    where?: ServiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Services to fetch.
     */
    orderBy?: ServiceOrderByWithRelationInput | ServiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Services.
     */
    cursor?: ServiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Services from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Services.
     */
    skip?: number
    distinct?: ServiceScalarFieldEnum | ServiceScalarFieldEnum[]
  }

  /**
   * Service create
   */
  export type ServiceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Service
     */
    select?: ServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Service
     */
    omit?: ServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceInclude<ExtArgs> | null
    /**
     * The data needed to create a Service.
     */
    data: XOR<ServiceCreateInput, ServiceUncheckedCreateInput>
  }

  /**
   * Service createMany
   */
  export type ServiceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Services.
     */
    data: ServiceCreateManyInput | ServiceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Service createManyAndReturn
   */
  export type ServiceCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Service
     */
    select?: ServiceSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Service
     */
    omit?: ServiceOmit<ExtArgs> | null
    /**
     * The data used to create many Services.
     */
    data: ServiceCreateManyInput | ServiceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Service update
   */
  export type ServiceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Service
     */
    select?: ServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Service
     */
    omit?: ServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceInclude<ExtArgs> | null
    /**
     * The data needed to update a Service.
     */
    data: XOR<ServiceUpdateInput, ServiceUncheckedUpdateInput>
    /**
     * Choose, which Service to update.
     */
    where: ServiceWhereUniqueInput
  }

  /**
   * Service updateMany
   */
  export type ServiceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Services.
     */
    data: XOR<ServiceUpdateManyMutationInput, ServiceUncheckedUpdateManyInput>
    /**
     * Filter which Services to update
     */
    where?: ServiceWhereInput
    /**
     * Limit how many Services to update.
     */
    limit?: number
  }

  /**
   * Service updateManyAndReturn
   */
  export type ServiceUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Service
     */
    select?: ServiceSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Service
     */
    omit?: ServiceOmit<ExtArgs> | null
    /**
     * The data used to update Services.
     */
    data: XOR<ServiceUpdateManyMutationInput, ServiceUncheckedUpdateManyInput>
    /**
     * Filter which Services to update
     */
    where?: ServiceWhereInput
    /**
     * Limit how many Services to update.
     */
    limit?: number
  }

  /**
   * Service upsert
   */
  export type ServiceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Service
     */
    select?: ServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Service
     */
    omit?: ServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceInclude<ExtArgs> | null
    /**
     * The filter to search for the Service to update in case it exists.
     */
    where: ServiceWhereUniqueInput
    /**
     * In case the Service found by the `where` argument doesn't exist, create a new Service with this data.
     */
    create: XOR<ServiceCreateInput, ServiceUncheckedCreateInput>
    /**
     * In case the Service was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ServiceUpdateInput, ServiceUncheckedUpdateInput>
  }

  /**
   * Service delete
   */
  export type ServiceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Service
     */
    select?: ServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Service
     */
    omit?: ServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceInclude<ExtArgs> | null
    /**
     * Filter which Service to delete.
     */
    where: ServiceWhereUniqueInput
  }

  /**
   * Service deleteMany
   */
  export type ServiceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Services to delete
     */
    where?: ServiceWhereInput
    /**
     * Limit how many Services to delete.
     */
    limit?: number
  }

  /**
   * Service.consumptions
   */
  export type Service$consumptionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConsumedService
     */
    select?: ConsumedServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ConsumedService
     */
    omit?: ConsumedServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsumedServiceInclude<ExtArgs> | null
    where?: ConsumedServiceWhereInput
    orderBy?: ConsumedServiceOrderByWithRelationInput | ConsumedServiceOrderByWithRelationInput[]
    cursor?: ConsumedServiceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ConsumedServiceScalarFieldEnum | ConsumedServiceScalarFieldEnum[]
  }

  /**
   * Service without action
   */
  export type ServiceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Service
     */
    select?: ServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Service
     */
    omit?: ServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceInclude<ExtArgs> | null
  }


  /**
   * Model ConsumedProduct
   */

  export type AggregateConsumedProduct = {
    _count: ConsumedProductCountAggregateOutputType | null
    _avg: ConsumedProductAvgAggregateOutputType | null
    _sum: ConsumedProductSumAggregateOutputType | null
    _min: ConsumedProductMinAggregateOutputType | null
    _max: ConsumedProductMaxAggregateOutputType | null
  }

  export type ConsumedProductAvgAggregateOutputType = {
    id: number | null
    productId: number | null
    clientId: number | null
    quantity: number | null
  }

  export type ConsumedProductSumAggregateOutputType = {
    id: number | null
    productId: number | null
    clientId: number | null
    quantity: number | null
  }

  export type ConsumedProductMinAggregateOutputType = {
    id: number | null
    productId: number | null
    clientId: number | null
    consumedAt: Date | null
    quantity: number | null
  }

  export type ConsumedProductMaxAggregateOutputType = {
    id: number | null
    productId: number | null
    clientId: number | null
    consumedAt: Date | null
    quantity: number | null
  }

  export type ConsumedProductCountAggregateOutputType = {
    id: number
    productId: number
    clientId: number
    consumedAt: number
    quantity: number
    _all: number
  }


  export type ConsumedProductAvgAggregateInputType = {
    id?: true
    productId?: true
    clientId?: true
    quantity?: true
  }

  export type ConsumedProductSumAggregateInputType = {
    id?: true
    productId?: true
    clientId?: true
    quantity?: true
  }

  export type ConsumedProductMinAggregateInputType = {
    id?: true
    productId?: true
    clientId?: true
    consumedAt?: true
    quantity?: true
  }

  export type ConsumedProductMaxAggregateInputType = {
    id?: true
    productId?: true
    clientId?: true
    consumedAt?: true
    quantity?: true
  }

  export type ConsumedProductCountAggregateInputType = {
    id?: true
    productId?: true
    clientId?: true
    consumedAt?: true
    quantity?: true
    _all?: true
  }

  export type ConsumedProductAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ConsumedProduct to aggregate.
     */
    where?: ConsumedProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ConsumedProducts to fetch.
     */
    orderBy?: ConsumedProductOrderByWithRelationInput | ConsumedProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ConsumedProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ConsumedProducts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ConsumedProducts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ConsumedProducts
    **/
    _count?: true | ConsumedProductCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ConsumedProductAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ConsumedProductSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ConsumedProductMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ConsumedProductMaxAggregateInputType
  }

  export type GetConsumedProductAggregateType<T extends ConsumedProductAggregateArgs> = {
        [P in keyof T & keyof AggregateConsumedProduct]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateConsumedProduct[P]>
      : GetScalarType<T[P], AggregateConsumedProduct[P]>
  }




  export type ConsumedProductGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ConsumedProductWhereInput
    orderBy?: ConsumedProductOrderByWithAggregationInput | ConsumedProductOrderByWithAggregationInput[]
    by: ConsumedProductScalarFieldEnum[] | ConsumedProductScalarFieldEnum
    having?: ConsumedProductScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ConsumedProductCountAggregateInputType | true
    _avg?: ConsumedProductAvgAggregateInputType
    _sum?: ConsumedProductSumAggregateInputType
    _min?: ConsumedProductMinAggregateInputType
    _max?: ConsumedProductMaxAggregateInputType
  }

  export type ConsumedProductGroupByOutputType = {
    id: number
    productId: number
    clientId: number
    consumedAt: Date
    quantity: number
    _count: ConsumedProductCountAggregateOutputType | null
    _avg: ConsumedProductAvgAggregateOutputType | null
    _sum: ConsumedProductSumAggregateOutputType | null
    _min: ConsumedProductMinAggregateOutputType | null
    _max: ConsumedProductMaxAggregateOutputType | null
  }

  type GetConsumedProductGroupByPayload<T extends ConsumedProductGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ConsumedProductGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ConsumedProductGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ConsumedProductGroupByOutputType[P]>
            : GetScalarType<T[P], ConsumedProductGroupByOutputType[P]>
        }
      >
    >


  export type ConsumedProductSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    productId?: boolean
    clientId?: boolean
    consumedAt?: boolean
    quantity?: boolean
    product?: boolean | ProductDefaultArgs<ExtArgs>
    client?: boolean | ClientDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["consumedProduct"]>

  export type ConsumedProductSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    productId?: boolean
    clientId?: boolean
    consumedAt?: boolean
    quantity?: boolean
    product?: boolean | ProductDefaultArgs<ExtArgs>
    client?: boolean | ClientDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["consumedProduct"]>

  export type ConsumedProductSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    productId?: boolean
    clientId?: boolean
    consumedAt?: boolean
    quantity?: boolean
    product?: boolean | ProductDefaultArgs<ExtArgs>
    client?: boolean | ClientDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["consumedProduct"]>

  export type ConsumedProductSelectScalar = {
    id?: boolean
    productId?: boolean
    clientId?: boolean
    consumedAt?: boolean
    quantity?: boolean
  }

  export type ConsumedProductOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "productId" | "clientId" | "consumedAt" | "quantity", ExtArgs["result"]["consumedProduct"]>
  export type ConsumedProductInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    product?: boolean | ProductDefaultArgs<ExtArgs>
    client?: boolean | ClientDefaultArgs<ExtArgs>
  }
  export type ConsumedProductIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    product?: boolean | ProductDefaultArgs<ExtArgs>
    client?: boolean | ClientDefaultArgs<ExtArgs>
  }
  export type ConsumedProductIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    product?: boolean | ProductDefaultArgs<ExtArgs>
    client?: boolean | ClientDefaultArgs<ExtArgs>
  }

  export type $ConsumedProductPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ConsumedProduct"
    objects: {
      product: Prisma.$ProductPayload<ExtArgs>
      client: Prisma.$ClientPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      productId: number
      clientId: number
      consumedAt: Date
      quantity: number
    }, ExtArgs["result"]["consumedProduct"]>
    composites: {}
  }

  type ConsumedProductGetPayload<S extends boolean | null | undefined | ConsumedProductDefaultArgs> = $Result.GetResult<Prisma.$ConsumedProductPayload, S>

  type ConsumedProductCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ConsumedProductFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ConsumedProductCountAggregateInputType | true
    }

  export interface ConsumedProductDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ConsumedProduct'], meta: { name: 'ConsumedProduct' } }
    /**
     * Find zero or one ConsumedProduct that matches the filter.
     * @param {ConsumedProductFindUniqueArgs} args - Arguments to find a ConsumedProduct
     * @example
     * // Get one ConsumedProduct
     * const consumedProduct = await prisma.consumedProduct.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ConsumedProductFindUniqueArgs>(args: SelectSubset<T, ConsumedProductFindUniqueArgs<ExtArgs>>): Prisma__ConsumedProductClient<$Result.GetResult<Prisma.$ConsumedProductPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ConsumedProduct that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ConsumedProductFindUniqueOrThrowArgs} args - Arguments to find a ConsumedProduct
     * @example
     * // Get one ConsumedProduct
     * const consumedProduct = await prisma.consumedProduct.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ConsumedProductFindUniqueOrThrowArgs>(args: SelectSubset<T, ConsumedProductFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ConsumedProductClient<$Result.GetResult<Prisma.$ConsumedProductPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ConsumedProduct that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsumedProductFindFirstArgs} args - Arguments to find a ConsumedProduct
     * @example
     * // Get one ConsumedProduct
     * const consumedProduct = await prisma.consumedProduct.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ConsumedProductFindFirstArgs>(args?: SelectSubset<T, ConsumedProductFindFirstArgs<ExtArgs>>): Prisma__ConsumedProductClient<$Result.GetResult<Prisma.$ConsumedProductPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ConsumedProduct that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsumedProductFindFirstOrThrowArgs} args - Arguments to find a ConsumedProduct
     * @example
     * // Get one ConsumedProduct
     * const consumedProduct = await prisma.consumedProduct.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ConsumedProductFindFirstOrThrowArgs>(args?: SelectSubset<T, ConsumedProductFindFirstOrThrowArgs<ExtArgs>>): Prisma__ConsumedProductClient<$Result.GetResult<Prisma.$ConsumedProductPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ConsumedProducts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsumedProductFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ConsumedProducts
     * const consumedProducts = await prisma.consumedProduct.findMany()
     * 
     * // Get first 10 ConsumedProducts
     * const consumedProducts = await prisma.consumedProduct.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const consumedProductWithIdOnly = await prisma.consumedProduct.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ConsumedProductFindManyArgs>(args?: SelectSubset<T, ConsumedProductFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConsumedProductPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ConsumedProduct.
     * @param {ConsumedProductCreateArgs} args - Arguments to create a ConsumedProduct.
     * @example
     * // Create one ConsumedProduct
     * const ConsumedProduct = await prisma.consumedProduct.create({
     *   data: {
     *     // ... data to create a ConsumedProduct
     *   }
     * })
     * 
     */
    create<T extends ConsumedProductCreateArgs>(args: SelectSubset<T, ConsumedProductCreateArgs<ExtArgs>>): Prisma__ConsumedProductClient<$Result.GetResult<Prisma.$ConsumedProductPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ConsumedProducts.
     * @param {ConsumedProductCreateManyArgs} args - Arguments to create many ConsumedProducts.
     * @example
     * // Create many ConsumedProducts
     * const consumedProduct = await prisma.consumedProduct.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ConsumedProductCreateManyArgs>(args?: SelectSubset<T, ConsumedProductCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ConsumedProducts and returns the data saved in the database.
     * @param {ConsumedProductCreateManyAndReturnArgs} args - Arguments to create many ConsumedProducts.
     * @example
     * // Create many ConsumedProducts
     * const consumedProduct = await prisma.consumedProduct.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ConsumedProducts and only return the `id`
     * const consumedProductWithIdOnly = await prisma.consumedProduct.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ConsumedProductCreateManyAndReturnArgs>(args?: SelectSubset<T, ConsumedProductCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConsumedProductPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ConsumedProduct.
     * @param {ConsumedProductDeleteArgs} args - Arguments to delete one ConsumedProduct.
     * @example
     * // Delete one ConsumedProduct
     * const ConsumedProduct = await prisma.consumedProduct.delete({
     *   where: {
     *     // ... filter to delete one ConsumedProduct
     *   }
     * })
     * 
     */
    delete<T extends ConsumedProductDeleteArgs>(args: SelectSubset<T, ConsumedProductDeleteArgs<ExtArgs>>): Prisma__ConsumedProductClient<$Result.GetResult<Prisma.$ConsumedProductPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ConsumedProduct.
     * @param {ConsumedProductUpdateArgs} args - Arguments to update one ConsumedProduct.
     * @example
     * // Update one ConsumedProduct
     * const consumedProduct = await prisma.consumedProduct.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ConsumedProductUpdateArgs>(args: SelectSubset<T, ConsumedProductUpdateArgs<ExtArgs>>): Prisma__ConsumedProductClient<$Result.GetResult<Prisma.$ConsumedProductPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ConsumedProducts.
     * @param {ConsumedProductDeleteManyArgs} args - Arguments to filter ConsumedProducts to delete.
     * @example
     * // Delete a few ConsumedProducts
     * const { count } = await prisma.consumedProduct.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ConsumedProductDeleteManyArgs>(args?: SelectSubset<T, ConsumedProductDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ConsumedProducts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsumedProductUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ConsumedProducts
     * const consumedProduct = await prisma.consumedProduct.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ConsumedProductUpdateManyArgs>(args: SelectSubset<T, ConsumedProductUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ConsumedProducts and returns the data updated in the database.
     * @param {ConsumedProductUpdateManyAndReturnArgs} args - Arguments to update many ConsumedProducts.
     * @example
     * // Update many ConsumedProducts
     * const consumedProduct = await prisma.consumedProduct.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ConsumedProducts and only return the `id`
     * const consumedProductWithIdOnly = await prisma.consumedProduct.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ConsumedProductUpdateManyAndReturnArgs>(args: SelectSubset<T, ConsumedProductUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConsumedProductPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ConsumedProduct.
     * @param {ConsumedProductUpsertArgs} args - Arguments to update or create a ConsumedProduct.
     * @example
     * // Update or create a ConsumedProduct
     * const consumedProduct = await prisma.consumedProduct.upsert({
     *   create: {
     *     // ... data to create a ConsumedProduct
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ConsumedProduct we want to update
     *   }
     * })
     */
    upsert<T extends ConsumedProductUpsertArgs>(args: SelectSubset<T, ConsumedProductUpsertArgs<ExtArgs>>): Prisma__ConsumedProductClient<$Result.GetResult<Prisma.$ConsumedProductPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ConsumedProducts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsumedProductCountArgs} args - Arguments to filter ConsumedProducts to count.
     * @example
     * // Count the number of ConsumedProducts
     * const count = await prisma.consumedProduct.count({
     *   where: {
     *     // ... the filter for the ConsumedProducts we want to count
     *   }
     * })
    **/
    count<T extends ConsumedProductCountArgs>(
      args?: Subset<T, ConsumedProductCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ConsumedProductCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ConsumedProduct.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsumedProductAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ConsumedProductAggregateArgs>(args: Subset<T, ConsumedProductAggregateArgs>): Prisma.PrismaPromise<GetConsumedProductAggregateType<T>>

    /**
     * Group by ConsumedProduct.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsumedProductGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ConsumedProductGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ConsumedProductGroupByArgs['orderBy'] }
        : { orderBy?: ConsumedProductGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ConsumedProductGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetConsumedProductGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ConsumedProduct model
   */
  readonly fields: ConsumedProductFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ConsumedProduct.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ConsumedProductClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    product<T extends ProductDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProductDefaultArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    client<T extends ClientDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ClientDefaultArgs<ExtArgs>>): Prisma__ClientClient<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ConsumedProduct model
   */
  interface ConsumedProductFieldRefs {
    readonly id: FieldRef<"ConsumedProduct", 'Int'>
    readonly productId: FieldRef<"ConsumedProduct", 'Int'>
    readonly clientId: FieldRef<"ConsumedProduct", 'Int'>
    readonly consumedAt: FieldRef<"ConsumedProduct", 'DateTime'>
    readonly quantity: FieldRef<"ConsumedProduct", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * ConsumedProduct findUnique
   */
  export type ConsumedProductFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConsumedProduct
     */
    select?: ConsumedProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ConsumedProduct
     */
    omit?: ConsumedProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsumedProductInclude<ExtArgs> | null
    /**
     * Filter, which ConsumedProduct to fetch.
     */
    where: ConsumedProductWhereUniqueInput
  }

  /**
   * ConsumedProduct findUniqueOrThrow
   */
  export type ConsumedProductFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConsumedProduct
     */
    select?: ConsumedProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ConsumedProduct
     */
    omit?: ConsumedProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsumedProductInclude<ExtArgs> | null
    /**
     * Filter, which ConsumedProduct to fetch.
     */
    where: ConsumedProductWhereUniqueInput
  }

  /**
   * ConsumedProduct findFirst
   */
  export type ConsumedProductFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConsumedProduct
     */
    select?: ConsumedProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ConsumedProduct
     */
    omit?: ConsumedProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsumedProductInclude<ExtArgs> | null
    /**
     * Filter, which ConsumedProduct to fetch.
     */
    where?: ConsumedProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ConsumedProducts to fetch.
     */
    orderBy?: ConsumedProductOrderByWithRelationInput | ConsumedProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ConsumedProducts.
     */
    cursor?: ConsumedProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ConsumedProducts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ConsumedProducts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ConsumedProducts.
     */
    distinct?: ConsumedProductScalarFieldEnum | ConsumedProductScalarFieldEnum[]
  }

  /**
   * ConsumedProduct findFirstOrThrow
   */
  export type ConsumedProductFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConsumedProduct
     */
    select?: ConsumedProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ConsumedProduct
     */
    omit?: ConsumedProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsumedProductInclude<ExtArgs> | null
    /**
     * Filter, which ConsumedProduct to fetch.
     */
    where?: ConsumedProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ConsumedProducts to fetch.
     */
    orderBy?: ConsumedProductOrderByWithRelationInput | ConsumedProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ConsumedProducts.
     */
    cursor?: ConsumedProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ConsumedProducts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ConsumedProducts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ConsumedProducts.
     */
    distinct?: ConsumedProductScalarFieldEnum | ConsumedProductScalarFieldEnum[]
  }

  /**
   * ConsumedProduct findMany
   */
  export type ConsumedProductFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConsumedProduct
     */
    select?: ConsumedProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ConsumedProduct
     */
    omit?: ConsumedProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsumedProductInclude<ExtArgs> | null
    /**
     * Filter, which ConsumedProducts to fetch.
     */
    where?: ConsumedProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ConsumedProducts to fetch.
     */
    orderBy?: ConsumedProductOrderByWithRelationInput | ConsumedProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ConsumedProducts.
     */
    cursor?: ConsumedProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ConsumedProducts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ConsumedProducts.
     */
    skip?: number
    distinct?: ConsumedProductScalarFieldEnum | ConsumedProductScalarFieldEnum[]
  }

  /**
   * ConsumedProduct create
   */
  export type ConsumedProductCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConsumedProduct
     */
    select?: ConsumedProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ConsumedProduct
     */
    omit?: ConsumedProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsumedProductInclude<ExtArgs> | null
    /**
     * The data needed to create a ConsumedProduct.
     */
    data: XOR<ConsumedProductCreateInput, ConsumedProductUncheckedCreateInput>
  }

  /**
   * ConsumedProduct createMany
   */
  export type ConsumedProductCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ConsumedProducts.
     */
    data: ConsumedProductCreateManyInput | ConsumedProductCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ConsumedProduct createManyAndReturn
   */
  export type ConsumedProductCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConsumedProduct
     */
    select?: ConsumedProductSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ConsumedProduct
     */
    omit?: ConsumedProductOmit<ExtArgs> | null
    /**
     * The data used to create many ConsumedProducts.
     */
    data: ConsumedProductCreateManyInput | ConsumedProductCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsumedProductIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ConsumedProduct update
   */
  export type ConsumedProductUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConsumedProduct
     */
    select?: ConsumedProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ConsumedProduct
     */
    omit?: ConsumedProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsumedProductInclude<ExtArgs> | null
    /**
     * The data needed to update a ConsumedProduct.
     */
    data: XOR<ConsumedProductUpdateInput, ConsumedProductUncheckedUpdateInput>
    /**
     * Choose, which ConsumedProduct to update.
     */
    where: ConsumedProductWhereUniqueInput
  }

  /**
   * ConsumedProduct updateMany
   */
  export type ConsumedProductUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ConsumedProducts.
     */
    data: XOR<ConsumedProductUpdateManyMutationInput, ConsumedProductUncheckedUpdateManyInput>
    /**
     * Filter which ConsumedProducts to update
     */
    where?: ConsumedProductWhereInput
    /**
     * Limit how many ConsumedProducts to update.
     */
    limit?: number
  }

  /**
   * ConsumedProduct updateManyAndReturn
   */
  export type ConsumedProductUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConsumedProduct
     */
    select?: ConsumedProductSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ConsumedProduct
     */
    omit?: ConsumedProductOmit<ExtArgs> | null
    /**
     * The data used to update ConsumedProducts.
     */
    data: XOR<ConsumedProductUpdateManyMutationInput, ConsumedProductUncheckedUpdateManyInput>
    /**
     * Filter which ConsumedProducts to update
     */
    where?: ConsumedProductWhereInput
    /**
     * Limit how many ConsumedProducts to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsumedProductIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ConsumedProduct upsert
   */
  export type ConsumedProductUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConsumedProduct
     */
    select?: ConsumedProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ConsumedProduct
     */
    omit?: ConsumedProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsumedProductInclude<ExtArgs> | null
    /**
     * The filter to search for the ConsumedProduct to update in case it exists.
     */
    where: ConsumedProductWhereUniqueInput
    /**
     * In case the ConsumedProduct found by the `where` argument doesn't exist, create a new ConsumedProduct with this data.
     */
    create: XOR<ConsumedProductCreateInput, ConsumedProductUncheckedCreateInput>
    /**
     * In case the ConsumedProduct was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ConsumedProductUpdateInput, ConsumedProductUncheckedUpdateInput>
  }

  /**
   * ConsumedProduct delete
   */
  export type ConsumedProductDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConsumedProduct
     */
    select?: ConsumedProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ConsumedProduct
     */
    omit?: ConsumedProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsumedProductInclude<ExtArgs> | null
    /**
     * Filter which ConsumedProduct to delete.
     */
    where: ConsumedProductWhereUniqueInput
  }

  /**
   * ConsumedProduct deleteMany
   */
  export type ConsumedProductDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ConsumedProducts to delete
     */
    where?: ConsumedProductWhereInput
    /**
     * Limit how many ConsumedProducts to delete.
     */
    limit?: number
  }

  /**
   * ConsumedProduct without action
   */
  export type ConsumedProductDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConsumedProduct
     */
    select?: ConsumedProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ConsumedProduct
     */
    omit?: ConsumedProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsumedProductInclude<ExtArgs> | null
  }


  /**
   * Model ConsumedService
   */

  export type AggregateConsumedService = {
    _count: ConsumedServiceCountAggregateOutputType | null
    _avg: ConsumedServiceAvgAggregateOutputType | null
    _sum: ConsumedServiceSumAggregateOutputType | null
    _min: ConsumedServiceMinAggregateOutputType | null
    _max: ConsumedServiceMaxAggregateOutputType | null
  }

  export type ConsumedServiceAvgAggregateOutputType = {
    id: number | null
    serviceId: number | null
    clientId: number | null
    quantity: number | null
  }

  export type ConsumedServiceSumAggregateOutputType = {
    id: number | null
    serviceId: number | null
    clientId: number | null
    quantity: number | null
  }

  export type ConsumedServiceMinAggregateOutputType = {
    id: number | null
    serviceId: number | null
    clientId: number | null
    consumedAt: Date | null
    quantity: number | null
  }

  export type ConsumedServiceMaxAggregateOutputType = {
    id: number | null
    serviceId: number | null
    clientId: number | null
    consumedAt: Date | null
    quantity: number | null
  }

  export type ConsumedServiceCountAggregateOutputType = {
    id: number
    serviceId: number
    clientId: number
    consumedAt: number
    quantity: number
    _all: number
  }


  export type ConsumedServiceAvgAggregateInputType = {
    id?: true
    serviceId?: true
    clientId?: true
    quantity?: true
  }

  export type ConsumedServiceSumAggregateInputType = {
    id?: true
    serviceId?: true
    clientId?: true
    quantity?: true
  }

  export type ConsumedServiceMinAggregateInputType = {
    id?: true
    serviceId?: true
    clientId?: true
    consumedAt?: true
    quantity?: true
  }

  export type ConsumedServiceMaxAggregateInputType = {
    id?: true
    serviceId?: true
    clientId?: true
    consumedAt?: true
    quantity?: true
  }

  export type ConsumedServiceCountAggregateInputType = {
    id?: true
    serviceId?: true
    clientId?: true
    consumedAt?: true
    quantity?: true
    _all?: true
  }

  export type ConsumedServiceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ConsumedService to aggregate.
     */
    where?: ConsumedServiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ConsumedServices to fetch.
     */
    orderBy?: ConsumedServiceOrderByWithRelationInput | ConsumedServiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ConsumedServiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ConsumedServices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ConsumedServices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ConsumedServices
    **/
    _count?: true | ConsumedServiceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ConsumedServiceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ConsumedServiceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ConsumedServiceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ConsumedServiceMaxAggregateInputType
  }

  export type GetConsumedServiceAggregateType<T extends ConsumedServiceAggregateArgs> = {
        [P in keyof T & keyof AggregateConsumedService]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateConsumedService[P]>
      : GetScalarType<T[P], AggregateConsumedService[P]>
  }




  export type ConsumedServiceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ConsumedServiceWhereInput
    orderBy?: ConsumedServiceOrderByWithAggregationInput | ConsumedServiceOrderByWithAggregationInput[]
    by: ConsumedServiceScalarFieldEnum[] | ConsumedServiceScalarFieldEnum
    having?: ConsumedServiceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ConsumedServiceCountAggregateInputType | true
    _avg?: ConsumedServiceAvgAggregateInputType
    _sum?: ConsumedServiceSumAggregateInputType
    _min?: ConsumedServiceMinAggregateInputType
    _max?: ConsumedServiceMaxAggregateInputType
  }

  export type ConsumedServiceGroupByOutputType = {
    id: number
    serviceId: number
    clientId: number
    consumedAt: Date
    quantity: number
    _count: ConsumedServiceCountAggregateOutputType | null
    _avg: ConsumedServiceAvgAggregateOutputType | null
    _sum: ConsumedServiceSumAggregateOutputType | null
    _min: ConsumedServiceMinAggregateOutputType | null
    _max: ConsumedServiceMaxAggregateOutputType | null
  }

  type GetConsumedServiceGroupByPayload<T extends ConsumedServiceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ConsumedServiceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ConsumedServiceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ConsumedServiceGroupByOutputType[P]>
            : GetScalarType<T[P], ConsumedServiceGroupByOutputType[P]>
        }
      >
    >


  export type ConsumedServiceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    serviceId?: boolean
    clientId?: boolean
    consumedAt?: boolean
    quantity?: boolean
    service?: boolean | ServiceDefaultArgs<ExtArgs>
    client?: boolean | ClientDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["consumedService"]>

  export type ConsumedServiceSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    serviceId?: boolean
    clientId?: boolean
    consumedAt?: boolean
    quantity?: boolean
    service?: boolean | ServiceDefaultArgs<ExtArgs>
    client?: boolean | ClientDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["consumedService"]>

  export type ConsumedServiceSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    serviceId?: boolean
    clientId?: boolean
    consumedAt?: boolean
    quantity?: boolean
    service?: boolean | ServiceDefaultArgs<ExtArgs>
    client?: boolean | ClientDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["consumedService"]>

  export type ConsumedServiceSelectScalar = {
    id?: boolean
    serviceId?: boolean
    clientId?: boolean
    consumedAt?: boolean
    quantity?: boolean
  }

  export type ConsumedServiceOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "serviceId" | "clientId" | "consumedAt" | "quantity", ExtArgs["result"]["consumedService"]>
  export type ConsumedServiceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    service?: boolean | ServiceDefaultArgs<ExtArgs>
    client?: boolean | ClientDefaultArgs<ExtArgs>
  }
  export type ConsumedServiceIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    service?: boolean | ServiceDefaultArgs<ExtArgs>
    client?: boolean | ClientDefaultArgs<ExtArgs>
  }
  export type ConsumedServiceIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    service?: boolean | ServiceDefaultArgs<ExtArgs>
    client?: boolean | ClientDefaultArgs<ExtArgs>
  }

  export type $ConsumedServicePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ConsumedService"
    objects: {
      service: Prisma.$ServicePayload<ExtArgs>
      client: Prisma.$ClientPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      serviceId: number
      clientId: number
      consumedAt: Date
      quantity: number
    }, ExtArgs["result"]["consumedService"]>
    composites: {}
  }

  type ConsumedServiceGetPayload<S extends boolean | null | undefined | ConsumedServiceDefaultArgs> = $Result.GetResult<Prisma.$ConsumedServicePayload, S>

  type ConsumedServiceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ConsumedServiceFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ConsumedServiceCountAggregateInputType | true
    }

  export interface ConsumedServiceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ConsumedService'], meta: { name: 'ConsumedService' } }
    /**
     * Find zero or one ConsumedService that matches the filter.
     * @param {ConsumedServiceFindUniqueArgs} args - Arguments to find a ConsumedService
     * @example
     * // Get one ConsumedService
     * const consumedService = await prisma.consumedService.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ConsumedServiceFindUniqueArgs>(args: SelectSubset<T, ConsumedServiceFindUniqueArgs<ExtArgs>>): Prisma__ConsumedServiceClient<$Result.GetResult<Prisma.$ConsumedServicePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ConsumedService that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ConsumedServiceFindUniqueOrThrowArgs} args - Arguments to find a ConsumedService
     * @example
     * // Get one ConsumedService
     * const consumedService = await prisma.consumedService.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ConsumedServiceFindUniqueOrThrowArgs>(args: SelectSubset<T, ConsumedServiceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ConsumedServiceClient<$Result.GetResult<Prisma.$ConsumedServicePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ConsumedService that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsumedServiceFindFirstArgs} args - Arguments to find a ConsumedService
     * @example
     * // Get one ConsumedService
     * const consumedService = await prisma.consumedService.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ConsumedServiceFindFirstArgs>(args?: SelectSubset<T, ConsumedServiceFindFirstArgs<ExtArgs>>): Prisma__ConsumedServiceClient<$Result.GetResult<Prisma.$ConsumedServicePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ConsumedService that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsumedServiceFindFirstOrThrowArgs} args - Arguments to find a ConsumedService
     * @example
     * // Get one ConsumedService
     * const consumedService = await prisma.consumedService.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ConsumedServiceFindFirstOrThrowArgs>(args?: SelectSubset<T, ConsumedServiceFindFirstOrThrowArgs<ExtArgs>>): Prisma__ConsumedServiceClient<$Result.GetResult<Prisma.$ConsumedServicePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ConsumedServices that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsumedServiceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ConsumedServices
     * const consumedServices = await prisma.consumedService.findMany()
     * 
     * // Get first 10 ConsumedServices
     * const consumedServices = await prisma.consumedService.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const consumedServiceWithIdOnly = await prisma.consumedService.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ConsumedServiceFindManyArgs>(args?: SelectSubset<T, ConsumedServiceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConsumedServicePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ConsumedService.
     * @param {ConsumedServiceCreateArgs} args - Arguments to create a ConsumedService.
     * @example
     * // Create one ConsumedService
     * const ConsumedService = await prisma.consumedService.create({
     *   data: {
     *     // ... data to create a ConsumedService
     *   }
     * })
     * 
     */
    create<T extends ConsumedServiceCreateArgs>(args: SelectSubset<T, ConsumedServiceCreateArgs<ExtArgs>>): Prisma__ConsumedServiceClient<$Result.GetResult<Prisma.$ConsumedServicePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ConsumedServices.
     * @param {ConsumedServiceCreateManyArgs} args - Arguments to create many ConsumedServices.
     * @example
     * // Create many ConsumedServices
     * const consumedService = await prisma.consumedService.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ConsumedServiceCreateManyArgs>(args?: SelectSubset<T, ConsumedServiceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ConsumedServices and returns the data saved in the database.
     * @param {ConsumedServiceCreateManyAndReturnArgs} args - Arguments to create many ConsumedServices.
     * @example
     * // Create many ConsumedServices
     * const consumedService = await prisma.consumedService.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ConsumedServices and only return the `id`
     * const consumedServiceWithIdOnly = await prisma.consumedService.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ConsumedServiceCreateManyAndReturnArgs>(args?: SelectSubset<T, ConsumedServiceCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConsumedServicePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ConsumedService.
     * @param {ConsumedServiceDeleteArgs} args - Arguments to delete one ConsumedService.
     * @example
     * // Delete one ConsumedService
     * const ConsumedService = await prisma.consumedService.delete({
     *   where: {
     *     // ... filter to delete one ConsumedService
     *   }
     * })
     * 
     */
    delete<T extends ConsumedServiceDeleteArgs>(args: SelectSubset<T, ConsumedServiceDeleteArgs<ExtArgs>>): Prisma__ConsumedServiceClient<$Result.GetResult<Prisma.$ConsumedServicePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ConsumedService.
     * @param {ConsumedServiceUpdateArgs} args - Arguments to update one ConsumedService.
     * @example
     * // Update one ConsumedService
     * const consumedService = await prisma.consumedService.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ConsumedServiceUpdateArgs>(args: SelectSubset<T, ConsumedServiceUpdateArgs<ExtArgs>>): Prisma__ConsumedServiceClient<$Result.GetResult<Prisma.$ConsumedServicePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ConsumedServices.
     * @param {ConsumedServiceDeleteManyArgs} args - Arguments to filter ConsumedServices to delete.
     * @example
     * // Delete a few ConsumedServices
     * const { count } = await prisma.consumedService.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ConsumedServiceDeleteManyArgs>(args?: SelectSubset<T, ConsumedServiceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ConsumedServices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsumedServiceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ConsumedServices
     * const consumedService = await prisma.consumedService.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ConsumedServiceUpdateManyArgs>(args: SelectSubset<T, ConsumedServiceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ConsumedServices and returns the data updated in the database.
     * @param {ConsumedServiceUpdateManyAndReturnArgs} args - Arguments to update many ConsumedServices.
     * @example
     * // Update many ConsumedServices
     * const consumedService = await prisma.consumedService.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ConsumedServices and only return the `id`
     * const consumedServiceWithIdOnly = await prisma.consumedService.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ConsumedServiceUpdateManyAndReturnArgs>(args: SelectSubset<T, ConsumedServiceUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConsumedServicePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ConsumedService.
     * @param {ConsumedServiceUpsertArgs} args - Arguments to update or create a ConsumedService.
     * @example
     * // Update or create a ConsumedService
     * const consumedService = await prisma.consumedService.upsert({
     *   create: {
     *     // ... data to create a ConsumedService
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ConsumedService we want to update
     *   }
     * })
     */
    upsert<T extends ConsumedServiceUpsertArgs>(args: SelectSubset<T, ConsumedServiceUpsertArgs<ExtArgs>>): Prisma__ConsumedServiceClient<$Result.GetResult<Prisma.$ConsumedServicePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ConsumedServices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsumedServiceCountArgs} args - Arguments to filter ConsumedServices to count.
     * @example
     * // Count the number of ConsumedServices
     * const count = await prisma.consumedService.count({
     *   where: {
     *     // ... the filter for the ConsumedServices we want to count
     *   }
     * })
    **/
    count<T extends ConsumedServiceCountArgs>(
      args?: Subset<T, ConsumedServiceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ConsumedServiceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ConsumedService.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsumedServiceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ConsumedServiceAggregateArgs>(args: Subset<T, ConsumedServiceAggregateArgs>): Prisma.PrismaPromise<GetConsumedServiceAggregateType<T>>

    /**
     * Group by ConsumedService.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsumedServiceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ConsumedServiceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ConsumedServiceGroupByArgs['orderBy'] }
        : { orderBy?: ConsumedServiceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ConsumedServiceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetConsumedServiceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ConsumedService model
   */
  readonly fields: ConsumedServiceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ConsumedService.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ConsumedServiceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    service<T extends ServiceDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ServiceDefaultArgs<ExtArgs>>): Prisma__ServiceClient<$Result.GetResult<Prisma.$ServicePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    client<T extends ClientDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ClientDefaultArgs<ExtArgs>>): Prisma__ClientClient<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ConsumedService model
   */
  interface ConsumedServiceFieldRefs {
    readonly id: FieldRef<"ConsumedService", 'Int'>
    readonly serviceId: FieldRef<"ConsumedService", 'Int'>
    readonly clientId: FieldRef<"ConsumedService", 'Int'>
    readonly consumedAt: FieldRef<"ConsumedService", 'DateTime'>
    readonly quantity: FieldRef<"ConsumedService", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * ConsumedService findUnique
   */
  export type ConsumedServiceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConsumedService
     */
    select?: ConsumedServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ConsumedService
     */
    omit?: ConsumedServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsumedServiceInclude<ExtArgs> | null
    /**
     * Filter, which ConsumedService to fetch.
     */
    where: ConsumedServiceWhereUniqueInput
  }

  /**
   * ConsumedService findUniqueOrThrow
   */
  export type ConsumedServiceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConsumedService
     */
    select?: ConsumedServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ConsumedService
     */
    omit?: ConsumedServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsumedServiceInclude<ExtArgs> | null
    /**
     * Filter, which ConsumedService to fetch.
     */
    where: ConsumedServiceWhereUniqueInput
  }

  /**
   * ConsumedService findFirst
   */
  export type ConsumedServiceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConsumedService
     */
    select?: ConsumedServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ConsumedService
     */
    omit?: ConsumedServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsumedServiceInclude<ExtArgs> | null
    /**
     * Filter, which ConsumedService to fetch.
     */
    where?: ConsumedServiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ConsumedServices to fetch.
     */
    orderBy?: ConsumedServiceOrderByWithRelationInput | ConsumedServiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ConsumedServices.
     */
    cursor?: ConsumedServiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ConsumedServices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ConsumedServices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ConsumedServices.
     */
    distinct?: ConsumedServiceScalarFieldEnum | ConsumedServiceScalarFieldEnum[]
  }

  /**
   * ConsumedService findFirstOrThrow
   */
  export type ConsumedServiceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConsumedService
     */
    select?: ConsumedServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ConsumedService
     */
    omit?: ConsumedServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsumedServiceInclude<ExtArgs> | null
    /**
     * Filter, which ConsumedService to fetch.
     */
    where?: ConsumedServiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ConsumedServices to fetch.
     */
    orderBy?: ConsumedServiceOrderByWithRelationInput | ConsumedServiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ConsumedServices.
     */
    cursor?: ConsumedServiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ConsumedServices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ConsumedServices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ConsumedServices.
     */
    distinct?: ConsumedServiceScalarFieldEnum | ConsumedServiceScalarFieldEnum[]
  }

  /**
   * ConsumedService findMany
   */
  export type ConsumedServiceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConsumedService
     */
    select?: ConsumedServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ConsumedService
     */
    omit?: ConsumedServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsumedServiceInclude<ExtArgs> | null
    /**
     * Filter, which ConsumedServices to fetch.
     */
    where?: ConsumedServiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ConsumedServices to fetch.
     */
    orderBy?: ConsumedServiceOrderByWithRelationInput | ConsumedServiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ConsumedServices.
     */
    cursor?: ConsumedServiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ConsumedServices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ConsumedServices.
     */
    skip?: number
    distinct?: ConsumedServiceScalarFieldEnum | ConsumedServiceScalarFieldEnum[]
  }

  /**
   * ConsumedService create
   */
  export type ConsumedServiceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConsumedService
     */
    select?: ConsumedServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ConsumedService
     */
    omit?: ConsumedServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsumedServiceInclude<ExtArgs> | null
    /**
     * The data needed to create a ConsumedService.
     */
    data: XOR<ConsumedServiceCreateInput, ConsumedServiceUncheckedCreateInput>
  }

  /**
   * ConsumedService createMany
   */
  export type ConsumedServiceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ConsumedServices.
     */
    data: ConsumedServiceCreateManyInput | ConsumedServiceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ConsumedService createManyAndReturn
   */
  export type ConsumedServiceCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConsumedService
     */
    select?: ConsumedServiceSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ConsumedService
     */
    omit?: ConsumedServiceOmit<ExtArgs> | null
    /**
     * The data used to create many ConsumedServices.
     */
    data: ConsumedServiceCreateManyInput | ConsumedServiceCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsumedServiceIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ConsumedService update
   */
  export type ConsumedServiceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConsumedService
     */
    select?: ConsumedServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ConsumedService
     */
    omit?: ConsumedServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsumedServiceInclude<ExtArgs> | null
    /**
     * The data needed to update a ConsumedService.
     */
    data: XOR<ConsumedServiceUpdateInput, ConsumedServiceUncheckedUpdateInput>
    /**
     * Choose, which ConsumedService to update.
     */
    where: ConsumedServiceWhereUniqueInput
  }

  /**
   * ConsumedService updateMany
   */
  export type ConsumedServiceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ConsumedServices.
     */
    data: XOR<ConsumedServiceUpdateManyMutationInput, ConsumedServiceUncheckedUpdateManyInput>
    /**
     * Filter which ConsumedServices to update
     */
    where?: ConsumedServiceWhereInput
    /**
     * Limit how many ConsumedServices to update.
     */
    limit?: number
  }

  /**
   * ConsumedService updateManyAndReturn
   */
  export type ConsumedServiceUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConsumedService
     */
    select?: ConsumedServiceSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ConsumedService
     */
    omit?: ConsumedServiceOmit<ExtArgs> | null
    /**
     * The data used to update ConsumedServices.
     */
    data: XOR<ConsumedServiceUpdateManyMutationInput, ConsumedServiceUncheckedUpdateManyInput>
    /**
     * Filter which ConsumedServices to update
     */
    where?: ConsumedServiceWhereInput
    /**
     * Limit how many ConsumedServices to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsumedServiceIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ConsumedService upsert
   */
  export type ConsumedServiceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConsumedService
     */
    select?: ConsumedServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ConsumedService
     */
    omit?: ConsumedServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsumedServiceInclude<ExtArgs> | null
    /**
     * The filter to search for the ConsumedService to update in case it exists.
     */
    where: ConsumedServiceWhereUniqueInput
    /**
     * In case the ConsumedService found by the `where` argument doesn't exist, create a new ConsumedService with this data.
     */
    create: XOR<ConsumedServiceCreateInput, ConsumedServiceUncheckedCreateInput>
    /**
     * In case the ConsumedService was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ConsumedServiceUpdateInput, ConsumedServiceUncheckedUpdateInput>
  }

  /**
   * ConsumedService delete
   */
  export type ConsumedServiceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConsumedService
     */
    select?: ConsumedServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ConsumedService
     */
    omit?: ConsumedServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsumedServiceInclude<ExtArgs> | null
    /**
     * Filter which ConsumedService to delete.
     */
    where: ConsumedServiceWhereUniqueInput
  }

  /**
   * ConsumedService deleteMany
   */
  export type ConsumedServiceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ConsumedServices to delete
     */
    where?: ConsumedServiceWhereInput
    /**
     * Limit how many ConsumedServices to delete.
     */
    limit?: number
  }

  /**
   * ConsumedService without action
   */
  export type ConsumedServiceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConsumedService
     */
    select?: ConsumedServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ConsumedService
     */
    omit?: ConsumedServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsumedServiceInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const ClientScalarFieldEnum: {
    id: 'id',
    name: 'name',
    socialName: 'socialName',
    registrationDate: 'registrationDate'
  };

  export type ClientScalarFieldEnum = (typeof ClientScalarFieldEnum)[keyof typeof ClientScalarFieldEnum]


  export const CpfScalarFieldEnum: {
    id: 'id',
    number: 'number',
    issueDate: 'issueDate',
    clientId: 'clientId'
  };

  export type CpfScalarFieldEnum = (typeof CpfScalarFieldEnum)[keyof typeof CpfScalarFieldEnum]


  export const RgScalarFieldEnum: {
    id: 'id',
    number: 'number',
    issueDate: 'issueDate',
    clientId: 'clientId'
  };

  export type RgScalarFieldEnum = (typeof RgScalarFieldEnum)[keyof typeof RgScalarFieldEnum]


  export const PhoneScalarFieldEnum: {
    id: 'id',
    ddd: 'ddd',
    number: 'number',
    clientId: 'clientId'
  };

  export type PhoneScalarFieldEnum = (typeof PhoneScalarFieldEnum)[keyof typeof PhoneScalarFieldEnum]


  export const PetScalarFieldEnum: {
    id: 'id',
    name: 'name',
    breed: 'breed',
    species: 'species',
    clientId: 'clientId'
  };

  export type PetScalarFieldEnum = (typeof PetScalarFieldEnum)[keyof typeof PetScalarFieldEnum]


  export const ProductScalarFieldEnum: {
    id: 'id',
    title: 'title',
    value: 'value'
  };

  export type ProductScalarFieldEnum = (typeof ProductScalarFieldEnum)[keyof typeof ProductScalarFieldEnum]


  export const ServiceScalarFieldEnum: {
    id: 'id',
    title: 'title',
    value: 'value'
  };

  export type ServiceScalarFieldEnum = (typeof ServiceScalarFieldEnum)[keyof typeof ServiceScalarFieldEnum]


  export const ConsumedProductScalarFieldEnum: {
    id: 'id',
    productId: 'productId',
    clientId: 'clientId',
    consumedAt: 'consumedAt',
    quantity: 'quantity'
  };

  export type ConsumedProductScalarFieldEnum = (typeof ConsumedProductScalarFieldEnum)[keyof typeof ConsumedProductScalarFieldEnum]


  export const ConsumedServiceScalarFieldEnum: {
    id: 'id',
    serviceId: 'serviceId',
    clientId: 'clientId',
    consumedAt: 'consumedAt',
    quantity: 'quantity'
  };

  export type ConsumedServiceScalarFieldEnum = (typeof ConsumedServiceScalarFieldEnum)[keyof typeof ConsumedServiceScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Decimal'
   */
  export type DecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal'>
    


  /**
   * Reference to a field of type 'Decimal[]'
   */
  export type ListDecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type ClientWhereInput = {
    AND?: ClientWhereInput | ClientWhereInput[]
    OR?: ClientWhereInput[]
    NOT?: ClientWhereInput | ClientWhereInput[]
    id?: IntFilter<"Client"> | number
    name?: StringFilter<"Client"> | string
    socialName?: StringFilter<"Client"> | string
    registrationDate?: DateTimeFilter<"Client"> | Date | string
    cpf?: XOR<CpfNullableScalarRelationFilter, CpfWhereInput> | null
    rgs?: RgListRelationFilter
    phones?: PhoneListRelationFilter
    consumedProducts?: ConsumedProductListRelationFilter
    consumedServices?: ConsumedServiceListRelationFilter
    pets?: PetListRelationFilter
  }

  export type ClientOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    socialName?: SortOrder
    registrationDate?: SortOrder
    cpf?: CpfOrderByWithRelationInput
    rgs?: RgOrderByRelationAggregateInput
    phones?: PhoneOrderByRelationAggregateInput
    consumedProducts?: ConsumedProductOrderByRelationAggregateInput
    consumedServices?: ConsumedServiceOrderByRelationAggregateInput
    pets?: PetOrderByRelationAggregateInput
  }

  export type ClientWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ClientWhereInput | ClientWhereInput[]
    OR?: ClientWhereInput[]
    NOT?: ClientWhereInput | ClientWhereInput[]
    name?: StringFilter<"Client"> | string
    socialName?: StringFilter<"Client"> | string
    registrationDate?: DateTimeFilter<"Client"> | Date | string
    cpf?: XOR<CpfNullableScalarRelationFilter, CpfWhereInput> | null
    rgs?: RgListRelationFilter
    phones?: PhoneListRelationFilter
    consumedProducts?: ConsumedProductListRelationFilter
    consumedServices?: ConsumedServiceListRelationFilter
    pets?: PetListRelationFilter
  }, "id">

  export type ClientOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    socialName?: SortOrder
    registrationDate?: SortOrder
    _count?: ClientCountOrderByAggregateInput
    _avg?: ClientAvgOrderByAggregateInput
    _max?: ClientMaxOrderByAggregateInput
    _min?: ClientMinOrderByAggregateInput
    _sum?: ClientSumOrderByAggregateInput
  }

  export type ClientScalarWhereWithAggregatesInput = {
    AND?: ClientScalarWhereWithAggregatesInput | ClientScalarWhereWithAggregatesInput[]
    OR?: ClientScalarWhereWithAggregatesInput[]
    NOT?: ClientScalarWhereWithAggregatesInput | ClientScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Client"> | number
    name?: StringWithAggregatesFilter<"Client"> | string
    socialName?: StringWithAggregatesFilter<"Client"> | string
    registrationDate?: DateTimeWithAggregatesFilter<"Client"> | Date | string
  }

  export type CpfWhereInput = {
    AND?: CpfWhereInput | CpfWhereInput[]
    OR?: CpfWhereInput[]
    NOT?: CpfWhereInput | CpfWhereInput[]
    id?: IntFilter<"Cpf"> | number
    number?: StringFilter<"Cpf"> | string
    issueDate?: DateTimeFilter<"Cpf"> | Date | string
    clientId?: IntFilter<"Cpf"> | number
    client?: XOR<ClientScalarRelationFilter, ClientWhereInput>
  }

  export type CpfOrderByWithRelationInput = {
    id?: SortOrder
    number?: SortOrder
    issueDate?: SortOrder
    clientId?: SortOrder
    client?: ClientOrderByWithRelationInput
  }

  export type CpfWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    number?: string
    clientId?: number
    AND?: CpfWhereInput | CpfWhereInput[]
    OR?: CpfWhereInput[]
    NOT?: CpfWhereInput | CpfWhereInput[]
    issueDate?: DateTimeFilter<"Cpf"> | Date | string
    client?: XOR<ClientScalarRelationFilter, ClientWhereInput>
  }, "id" | "number" | "clientId">

  export type CpfOrderByWithAggregationInput = {
    id?: SortOrder
    number?: SortOrder
    issueDate?: SortOrder
    clientId?: SortOrder
    _count?: CpfCountOrderByAggregateInput
    _avg?: CpfAvgOrderByAggregateInput
    _max?: CpfMaxOrderByAggregateInput
    _min?: CpfMinOrderByAggregateInput
    _sum?: CpfSumOrderByAggregateInput
  }

  export type CpfScalarWhereWithAggregatesInput = {
    AND?: CpfScalarWhereWithAggregatesInput | CpfScalarWhereWithAggregatesInput[]
    OR?: CpfScalarWhereWithAggregatesInput[]
    NOT?: CpfScalarWhereWithAggregatesInput | CpfScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Cpf"> | number
    number?: StringWithAggregatesFilter<"Cpf"> | string
    issueDate?: DateTimeWithAggregatesFilter<"Cpf"> | Date | string
    clientId?: IntWithAggregatesFilter<"Cpf"> | number
  }

  export type RgWhereInput = {
    AND?: RgWhereInput | RgWhereInput[]
    OR?: RgWhereInput[]
    NOT?: RgWhereInput | RgWhereInput[]
    id?: IntFilter<"Rg"> | number
    number?: StringFilter<"Rg"> | string
    issueDate?: DateTimeFilter<"Rg"> | Date | string
    clientId?: IntFilter<"Rg"> | number
    client?: XOR<ClientScalarRelationFilter, ClientWhereInput>
  }

  export type RgOrderByWithRelationInput = {
    id?: SortOrder
    number?: SortOrder
    issueDate?: SortOrder
    clientId?: SortOrder
    client?: ClientOrderByWithRelationInput
  }

  export type RgWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: RgWhereInput | RgWhereInput[]
    OR?: RgWhereInput[]
    NOT?: RgWhereInput | RgWhereInput[]
    number?: StringFilter<"Rg"> | string
    issueDate?: DateTimeFilter<"Rg"> | Date | string
    clientId?: IntFilter<"Rg"> | number
    client?: XOR<ClientScalarRelationFilter, ClientWhereInput>
  }, "id">

  export type RgOrderByWithAggregationInput = {
    id?: SortOrder
    number?: SortOrder
    issueDate?: SortOrder
    clientId?: SortOrder
    _count?: RgCountOrderByAggregateInput
    _avg?: RgAvgOrderByAggregateInput
    _max?: RgMaxOrderByAggregateInput
    _min?: RgMinOrderByAggregateInput
    _sum?: RgSumOrderByAggregateInput
  }

  export type RgScalarWhereWithAggregatesInput = {
    AND?: RgScalarWhereWithAggregatesInput | RgScalarWhereWithAggregatesInput[]
    OR?: RgScalarWhereWithAggregatesInput[]
    NOT?: RgScalarWhereWithAggregatesInput | RgScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Rg"> | number
    number?: StringWithAggregatesFilter<"Rg"> | string
    issueDate?: DateTimeWithAggregatesFilter<"Rg"> | Date | string
    clientId?: IntWithAggregatesFilter<"Rg"> | number
  }

  export type PhoneWhereInput = {
    AND?: PhoneWhereInput | PhoneWhereInput[]
    OR?: PhoneWhereInput[]
    NOT?: PhoneWhereInput | PhoneWhereInput[]
    id?: IntFilter<"Phone"> | number
    ddd?: StringFilter<"Phone"> | string
    number?: StringFilter<"Phone"> | string
    clientId?: IntFilter<"Phone"> | number
    client?: XOR<ClientScalarRelationFilter, ClientWhereInput>
  }

  export type PhoneOrderByWithRelationInput = {
    id?: SortOrder
    ddd?: SortOrder
    number?: SortOrder
    clientId?: SortOrder
    client?: ClientOrderByWithRelationInput
  }

  export type PhoneWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: PhoneWhereInput | PhoneWhereInput[]
    OR?: PhoneWhereInput[]
    NOT?: PhoneWhereInput | PhoneWhereInput[]
    ddd?: StringFilter<"Phone"> | string
    number?: StringFilter<"Phone"> | string
    clientId?: IntFilter<"Phone"> | number
    client?: XOR<ClientScalarRelationFilter, ClientWhereInput>
  }, "id">

  export type PhoneOrderByWithAggregationInput = {
    id?: SortOrder
    ddd?: SortOrder
    number?: SortOrder
    clientId?: SortOrder
    _count?: PhoneCountOrderByAggregateInput
    _avg?: PhoneAvgOrderByAggregateInput
    _max?: PhoneMaxOrderByAggregateInput
    _min?: PhoneMinOrderByAggregateInput
    _sum?: PhoneSumOrderByAggregateInput
  }

  export type PhoneScalarWhereWithAggregatesInput = {
    AND?: PhoneScalarWhereWithAggregatesInput | PhoneScalarWhereWithAggregatesInput[]
    OR?: PhoneScalarWhereWithAggregatesInput[]
    NOT?: PhoneScalarWhereWithAggregatesInput | PhoneScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Phone"> | number
    ddd?: StringWithAggregatesFilter<"Phone"> | string
    number?: StringWithAggregatesFilter<"Phone"> | string
    clientId?: IntWithAggregatesFilter<"Phone"> | number
  }

  export type PetWhereInput = {
    AND?: PetWhereInput | PetWhereInput[]
    OR?: PetWhereInput[]
    NOT?: PetWhereInput | PetWhereInput[]
    id?: IntFilter<"Pet"> | number
    name?: StringFilter<"Pet"> | string
    breed?: StringFilter<"Pet"> | string
    species?: StringFilter<"Pet"> | string
    clientId?: IntFilter<"Pet"> | number
    client?: XOR<ClientScalarRelationFilter, ClientWhereInput>
  }

  export type PetOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    breed?: SortOrder
    species?: SortOrder
    clientId?: SortOrder
    client?: ClientOrderByWithRelationInput
  }

  export type PetWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: PetWhereInput | PetWhereInput[]
    OR?: PetWhereInput[]
    NOT?: PetWhereInput | PetWhereInput[]
    name?: StringFilter<"Pet"> | string
    breed?: StringFilter<"Pet"> | string
    species?: StringFilter<"Pet"> | string
    clientId?: IntFilter<"Pet"> | number
    client?: XOR<ClientScalarRelationFilter, ClientWhereInput>
  }, "id">

  export type PetOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    breed?: SortOrder
    species?: SortOrder
    clientId?: SortOrder
    _count?: PetCountOrderByAggregateInput
    _avg?: PetAvgOrderByAggregateInput
    _max?: PetMaxOrderByAggregateInput
    _min?: PetMinOrderByAggregateInput
    _sum?: PetSumOrderByAggregateInput
  }

  export type PetScalarWhereWithAggregatesInput = {
    AND?: PetScalarWhereWithAggregatesInput | PetScalarWhereWithAggregatesInput[]
    OR?: PetScalarWhereWithAggregatesInput[]
    NOT?: PetScalarWhereWithAggregatesInput | PetScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Pet"> | number
    name?: StringWithAggregatesFilter<"Pet"> | string
    breed?: StringWithAggregatesFilter<"Pet"> | string
    species?: StringWithAggregatesFilter<"Pet"> | string
    clientId?: IntWithAggregatesFilter<"Pet"> | number
  }

  export type ProductWhereInput = {
    AND?: ProductWhereInput | ProductWhereInput[]
    OR?: ProductWhereInput[]
    NOT?: ProductWhereInput | ProductWhereInput[]
    id?: IntFilter<"Product"> | number
    title?: StringFilter<"Product"> | string
    value?: DecimalFilter<"Product"> | Decimal | DecimalJsLike | number | string
    consumptions?: ConsumedProductListRelationFilter
  }

  export type ProductOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    value?: SortOrder
    consumptions?: ConsumedProductOrderByRelationAggregateInput
  }

  export type ProductWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ProductWhereInput | ProductWhereInput[]
    OR?: ProductWhereInput[]
    NOT?: ProductWhereInput | ProductWhereInput[]
    title?: StringFilter<"Product"> | string
    value?: DecimalFilter<"Product"> | Decimal | DecimalJsLike | number | string
    consumptions?: ConsumedProductListRelationFilter
  }, "id">

  export type ProductOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    value?: SortOrder
    _count?: ProductCountOrderByAggregateInput
    _avg?: ProductAvgOrderByAggregateInput
    _max?: ProductMaxOrderByAggregateInput
    _min?: ProductMinOrderByAggregateInput
    _sum?: ProductSumOrderByAggregateInput
  }

  export type ProductScalarWhereWithAggregatesInput = {
    AND?: ProductScalarWhereWithAggregatesInput | ProductScalarWhereWithAggregatesInput[]
    OR?: ProductScalarWhereWithAggregatesInput[]
    NOT?: ProductScalarWhereWithAggregatesInput | ProductScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Product"> | number
    title?: StringWithAggregatesFilter<"Product"> | string
    value?: DecimalWithAggregatesFilter<"Product"> | Decimal | DecimalJsLike | number | string
  }

  export type ServiceWhereInput = {
    AND?: ServiceWhereInput | ServiceWhereInput[]
    OR?: ServiceWhereInput[]
    NOT?: ServiceWhereInput | ServiceWhereInput[]
    id?: IntFilter<"Service"> | number
    title?: StringFilter<"Service"> | string
    value?: DecimalFilter<"Service"> | Decimal | DecimalJsLike | number | string
    consumptions?: ConsumedServiceListRelationFilter
  }

  export type ServiceOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    value?: SortOrder
    consumptions?: ConsumedServiceOrderByRelationAggregateInput
  }

  export type ServiceWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ServiceWhereInput | ServiceWhereInput[]
    OR?: ServiceWhereInput[]
    NOT?: ServiceWhereInput | ServiceWhereInput[]
    title?: StringFilter<"Service"> | string
    value?: DecimalFilter<"Service"> | Decimal | DecimalJsLike | number | string
    consumptions?: ConsumedServiceListRelationFilter
  }, "id">

  export type ServiceOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    value?: SortOrder
    _count?: ServiceCountOrderByAggregateInput
    _avg?: ServiceAvgOrderByAggregateInput
    _max?: ServiceMaxOrderByAggregateInput
    _min?: ServiceMinOrderByAggregateInput
    _sum?: ServiceSumOrderByAggregateInput
  }

  export type ServiceScalarWhereWithAggregatesInput = {
    AND?: ServiceScalarWhereWithAggregatesInput | ServiceScalarWhereWithAggregatesInput[]
    OR?: ServiceScalarWhereWithAggregatesInput[]
    NOT?: ServiceScalarWhereWithAggregatesInput | ServiceScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Service"> | number
    title?: StringWithAggregatesFilter<"Service"> | string
    value?: DecimalWithAggregatesFilter<"Service"> | Decimal | DecimalJsLike | number | string
  }

  export type ConsumedProductWhereInput = {
    AND?: ConsumedProductWhereInput | ConsumedProductWhereInput[]
    OR?: ConsumedProductWhereInput[]
    NOT?: ConsumedProductWhereInput | ConsumedProductWhereInput[]
    id?: IntFilter<"ConsumedProduct"> | number
    productId?: IntFilter<"ConsumedProduct"> | number
    clientId?: IntFilter<"ConsumedProduct"> | number
    consumedAt?: DateTimeFilter<"ConsumedProduct"> | Date | string
    quantity?: IntFilter<"ConsumedProduct"> | number
    product?: XOR<ProductScalarRelationFilter, ProductWhereInput>
    client?: XOR<ClientScalarRelationFilter, ClientWhereInput>
  }

  export type ConsumedProductOrderByWithRelationInput = {
    id?: SortOrder
    productId?: SortOrder
    clientId?: SortOrder
    consumedAt?: SortOrder
    quantity?: SortOrder
    product?: ProductOrderByWithRelationInput
    client?: ClientOrderByWithRelationInput
  }

  export type ConsumedProductWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ConsumedProductWhereInput | ConsumedProductWhereInput[]
    OR?: ConsumedProductWhereInput[]
    NOT?: ConsumedProductWhereInput | ConsumedProductWhereInput[]
    productId?: IntFilter<"ConsumedProduct"> | number
    clientId?: IntFilter<"ConsumedProduct"> | number
    consumedAt?: DateTimeFilter<"ConsumedProduct"> | Date | string
    quantity?: IntFilter<"ConsumedProduct"> | number
    product?: XOR<ProductScalarRelationFilter, ProductWhereInput>
    client?: XOR<ClientScalarRelationFilter, ClientWhereInput>
  }, "id">

  export type ConsumedProductOrderByWithAggregationInput = {
    id?: SortOrder
    productId?: SortOrder
    clientId?: SortOrder
    consumedAt?: SortOrder
    quantity?: SortOrder
    _count?: ConsumedProductCountOrderByAggregateInput
    _avg?: ConsumedProductAvgOrderByAggregateInput
    _max?: ConsumedProductMaxOrderByAggregateInput
    _min?: ConsumedProductMinOrderByAggregateInput
    _sum?: ConsumedProductSumOrderByAggregateInput
  }

  export type ConsumedProductScalarWhereWithAggregatesInput = {
    AND?: ConsumedProductScalarWhereWithAggregatesInput | ConsumedProductScalarWhereWithAggregatesInput[]
    OR?: ConsumedProductScalarWhereWithAggregatesInput[]
    NOT?: ConsumedProductScalarWhereWithAggregatesInput | ConsumedProductScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ConsumedProduct"> | number
    productId?: IntWithAggregatesFilter<"ConsumedProduct"> | number
    clientId?: IntWithAggregatesFilter<"ConsumedProduct"> | number
    consumedAt?: DateTimeWithAggregatesFilter<"ConsumedProduct"> | Date | string
    quantity?: IntWithAggregatesFilter<"ConsumedProduct"> | number
  }

  export type ConsumedServiceWhereInput = {
    AND?: ConsumedServiceWhereInput | ConsumedServiceWhereInput[]
    OR?: ConsumedServiceWhereInput[]
    NOT?: ConsumedServiceWhereInput | ConsumedServiceWhereInput[]
    id?: IntFilter<"ConsumedService"> | number
    serviceId?: IntFilter<"ConsumedService"> | number
    clientId?: IntFilter<"ConsumedService"> | number
    consumedAt?: DateTimeFilter<"ConsumedService"> | Date | string
    quantity?: IntFilter<"ConsumedService"> | number
    service?: XOR<ServiceScalarRelationFilter, ServiceWhereInput>
    client?: XOR<ClientScalarRelationFilter, ClientWhereInput>
  }

  export type ConsumedServiceOrderByWithRelationInput = {
    id?: SortOrder
    serviceId?: SortOrder
    clientId?: SortOrder
    consumedAt?: SortOrder
    quantity?: SortOrder
    service?: ServiceOrderByWithRelationInput
    client?: ClientOrderByWithRelationInput
  }

  export type ConsumedServiceWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ConsumedServiceWhereInput | ConsumedServiceWhereInput[]
    OR?: ConsumedServiceWhereInput[]
    NOT?: ConsumedServiceWhereInput | ConsumedServiceWhereInput[]
    serviceId?: IntFilter<"ConsumedService"> | number
    clientId?: IntFilter<"ConsumedService"> | number
    consumedAt?: DateTimeFilter<"ConsumedService"> | Date | string
    quantity?: IntFilter<"ConsumedService"> | number
    service?: XOR<ServiceScalarRelationFilter, ServiceWhereInput>
    client?: XOR<ClientScalarRelationFilter, ClientWhereInput>
  }, "id">

  export type ConsumedServiceOrderByWithAggregationInput = {
    id?: SortOrder
    serviceId?: SortOrder
    clientId?: SortOrder
    consumedAt?: SortOrder
    quantity?: SortOrder
    _count?: ConsumedServiceCountOrderByAggregateInput
    _avg?: ConsumedServiceAvgOrderByAggregateInput
    _max?: ConsumedServiceMaxOrderByAggregateInput
    _min?: ConsumedServiceMinOrderByAggregateInput
    _sum?: ConsumedServiceSumOrderByAggregateInput
  }

  export type ConsumedServiceScalarWhereWithAggregatesInput = {
    AND?: ConsumedServiceScalarWhereWithAggregatesInput | ConsumedServiceScalarWhereWithAggregatesInput[]
    OR?: ConsumedServiceScalarWhereWithAggregatesInput[]
    NOT?: ConsumedServiceScalarWhereWithAggregatesInput | ConsumedServiceScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ConsumedService"> | number
    serviceId?: IntWithAggregatesFilter<"ConsumedService"> | number
    clientId?: IntWithAggregatesFilter<"ConsumedService"> | number
    consumedAt?: DateTimeWithAggregatesFilter<"ConsumedService"> | Date | string
    quantity?: IntWithAggregatesFilter<"ConsumedService"> | number
  }

  export type ClientCreateInput = {
    name: string
    socialName: string
    registrationDate?: Date | string
    cpf?: CpfCreateNestedOneWithoutClientInput
    rgs?: RgCreateNestedManyWithoutClientInput
    phones?: PhoneCreateNestedManyWithoutClientInput
    consumedProducts?: ConsumedProductCreateNestedManyWithoutClientInput
    consumedServices?: ConsumedServiceCreateNestedManyWithoutClientInput
    pets?: PetCreateNestedManyWithoutClientInput
  }

  export type ClientUncheckedCreateInput = {
    id?: number
    name: string
    socialName: string
    registrationDate?: Date | string
    cpf?: CpfUncheckedCreateNestedOneWithoutClientInput
    rgs?: RgUncheckedCreateNestedManyWithoutClientInput
    phones?: PhoneUncheckedCreateNestedManyWithoutClientInput
    consumedProducts?: ConsumedProductUncheckedCreateNestedManyWithoutClientInput
    consumedServices?: ConsumedServiceUncheckedCreateNestedManyWithoutClientInput
    pets?: PetUncheckedCreateNestedManyWithoutClientInput
  }

  export type ClientUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    socialName?: StringFieldUpdateOperationsInput | string
    registrationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    cpf?: CpfUpdateOneWithoutClientNestedInput
    rgs?: RgUpdateManyWithoutClientNestedInput
    phones?: PhoneUpdateManyWithoutClientNestedInput
    consumedProducts?: ConsumedProductUpdateManyWithoutClientNestedInput
    consumedServices?: ConsumedServiceUpdateManyWithoutClientNestedInput
    pets?: PetUpdateManyWithoutClientNestedInput
  }

  export type ClientUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    socialName?: StringFieldUpdateOperationsInput | string
    registrationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    cpf?: CpfUncheckedUpdateOneWithoutClientNestedInput
    rgs?: RgUncheckedUpdateManyWithoutClientNestedInput
    phones?: PhoneUncheckedUpdateManyWithoutClientNestedInput
    consumedProducts?: ConsumedProductUncheckedUpdateManyWithoutClientNestedInput
    consumedServices?: ConsumedServiceUncheckedUpdateManyWithoutClientNestedInput
    pets?: PetUncheckedUpdateManyWithoutClientNestedInput
  }

  export type ClientCreateManyInput = {
    id?: number
    name: string
    socialName: string
    registrationDate?: Date | string
  }

  export type ClientUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    socialName?: StringFieldUpdateOperationsInput | string
    registrationDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClientUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    socialName?: StringFieldUpdateOperationsInput | string
    registrationDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CpfCreateInput = {
    number: string
    issueDate: Date | string
    client: ClientCreateNestedOneWithoutCpfInput
  }

  export type CpfUncheckedCreateInput = {
    id?: number
    number: string
    issueDate: Date | string
    clientId: number
  }

  export type CpfUpdateInput = {
    number?: StringFieldUpdateOperationsInput | string
    issueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    client?: ClientUpdateOneRequiredWithoutCpfNestedInput
  }

  export type CpfUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    number?: StringFieldUpdateOperationsInput | string
    issueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    clientId?: IntFieldUpdateOperationsInput | number
  }

  export type CpfCreateManyInput = {
    id?: number
    number: string
    issueDate: Date | string
    clientId: number
  }

  export type CpfUpdateManyMutationInput = {
    number?: StringFieldUpdateOperationsInput | string
    issueDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CpfUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    number?: StringFieldUpdateOperationsInput | string
    issueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    clientId?: IntFieldUpdateOperationsInput | number
  }

  export type RgCreateInput = {
    number: string
    issueDate: Date | string
    client: ClientCreateNestedOneWithoutRgsInput
  }

  export type RgUncheckedCreateInput = {
    id?: number
    number: string
    issueDate: Date | string
    clientId: number
  }

  export type RgUpdateInput = {
    number?: StringFieldUpdateOperationsInput | string
    issueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    client?: ClientUpdateOneRequiredWithoutRgsNestedInput
  }

  export type RgUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    number?: StringFieldUpdateOperationsInput | string
    issueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    clientId?: IntFieldUpdateOperationsInput | number
  }

  export type RgCreateManyInput = {
    id?: number
    number: string
    issueDate: Date | string
    clientId: number
  }

  export type RgUpdateManyMutationInput = {
    number?: StringFieldUpdateOperationsInput | string
    issueDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RgUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    number?: StringFieldUpdateOperationsInput | string
    issueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    clientId?: IntFieldUpdateOperationsInput | number
  }

  export type PhoneCreateInput = {
    ddd: string
    number: string
    client: ClientCreateNestedOneWithoutPhonesInput
  }

  export type PhoneUncheckedCreateInput = {
    id?: number
    ddd: string
    number: string
    clientId: number
  }

  export type PhoneUpdateInput = {
    ddd?: StringFieldUpdateOperationsInput | string
    number?: StringFieldUpdateOperationsInput | string
    client?: ClientUpdateOneRequiredWithoutPhonesNestedInput
  }

  export type PhoneUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    ddd?: StringFieldUpdateOperationsInput | string
    number?: StringFieldUpdateOperationsInput | string
    clientId?: IntFieldUpdateOperationsInput | number
  }

  export type PhoneCreateManyInput = {
    id?: number
    ddd: string
    number: string
    clientId: number
  }

  export type PhoneUpdateManyMutationInput = {
    ddd?: StringFieldUpdateOperationsInput | string
    number?: StringFieldUpdateOperationsInput | string
  }

  export type PhoneUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    ddd?: StringFieldUpdateOperationsInput | string
    number?: StringFieldUpdateOperationsInput | string
    clientId?: IntFieldUpdateOperationsInput | number
  }

  export type PetCreateInput = {
    name: string
    breed: string
    species: string
    client: ClientCreateNestedOneWithoutPetsInput
  }

  export type PetUncheckedCreateInput = {
    id?: number
    name: string
    breed: string
    species: string
    clientId: number
  }

  export type PetUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    breed?: StringFieldUpdateOperationsInput | string
    species?: StringFieldUpdateOperationsInput | string
    client?: ClientUpdateOneRequiredWithoutPetsNestedInput
  }

  export type PetUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    breed?: StringFieldUpdateOperationsInput | string
    species?: StringFieldUpdateOperationsInput | string
    clientId?: IntFieldUpdateOperationsInput | number
  }

  export type PetCreateManyInput = {
    id?: number
    name: string
    breed: string
    species: string
    clientId: number
  }

  export type PetUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    breed?: StringFieldUpdateOperationsInput | string
    species?: StringFieldUpdateOperationsInput | string
  }

  export type PetUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    breed?: StringFieldUpdateOperationsInput | string
    species?: StringFieldUpdateOperationsInput | string
    clientId?: IntFieldUpdateOperationsInput | number
  }

  export type ProductCreateInput = {
    title: string
    value: Decimal | DecimalJsLike | number | string
    consumptions?: ConsumedProductCreateNestedManyWithoutProductInput
  }

  export type ProductUncheckedCreateInput = {
    id?: number
    title: string
    value: Decimal | DecimalJsLike | number | string
    consumptions?: ConsumedProductUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    value?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    consumptions?: ConsumedProductUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    value?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    consumptions?: ConsumedProductUncheckedUpdateManyWithoutProductNestedInput
  }

  export type ProductCreateManyInput = {
    id?: number
    title: string
    value: Decimal | DecimalJsLike | number | string
  }

  export type ProductUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    value?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type ProductUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    value?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type ServiceCreateInput = {
    title: string
    value: Decimal | DecimalJsLike | number | string
    consumptions?: ConsumedServiceCreateNestedManyWithoutServiceInput
  }

  export type ServiceUncheckedCreateInput = {
    id?: number
    title: string
    value: Decimal | DecimalJsLike | number | string
    consumptions?: ConsumedServiceUncheckedCreateNestedManyWithoutServiceInput
  }

  export type ServiceUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    value?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    consumptions?: ConsumedServiceUpdateManyWithoutServiceNestedInput
  }

  export type ServiceUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    value?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    consumptions?: ConsumedServiceUncheckedUpdateManyWithoutServiceNestedInput
  }

  export type ServiceCreateManyInput = {
    id?: number
    title: string
    value: Decimal | DecimalJsLike | number | string
  }

  export type ServiceUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    value?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type ServiceUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    value?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type ConsumedProductCreateInput = {
    consumedAt?: Date | string
    quantity?: number
    product: ProductCreateNestedOneWithoutConsumptionsInput
    client: ClientCreateNestedOneWithoutConsumedProductsInput
  }

  export type ConsumedProductUncheckedCreateInput = {
    id?: number
    productId: number
    clientId: number
    consumedAt?: Date | string
    quantity?: number
  }

  export type ConsumedProductUpdateInput = {
    consumedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    quantity?: IntFieldUpdateOperationsInput | number
    product?: ProductUpdateOneRequiredWithoutConsumptionsNestedInput
    client?: ClientUpdateOneRequiredWithoutConsumedProductsNestedInput
  }

  export type ConsumedProductUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    productId?: IntFieldUpdateOperationsInput | number
    clientId?: IntFieldUpdateOperationsInput | number
    consumedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    quantity?: IntFieldUpdateOperationsInput | number
  }

  export type ConsumedProductCreateManyInput = {
    id?: number
    productId: number
    clientId: number
    consumedAt?: Date | string
    quantity?: number
  }

  export type ConsumedProductUpdateManyMutationInput = {
    consumedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    quantity?: IntFieldUpdateOperationsInput | number
  }

  export type ConsumedProductUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    productId?: IntFieldUpdateOperationsInput | number
    clientId?: IntFieldUpdateOperationsInput | number
    consumedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    quantity?: IntFieldUpdateOperationsInput | number
  }

  export type ConsumedServiceCreateInput = {
    consumedAt?: Date | string
    quantity?: number
    service: ServiceCreateNestedOneWithoutConsumptionsInput
    client: ClientCreateNestedOneWithoutConsumedServicesInput
  }

  export type ConsumedServiceUncheckedCreateInput = {
    id?: number
    serviceId: number
    clientId: number
    consumedAt?: Date | string
    quantity?: number
  }

  export type ConsumedServiceUpdateInput = {
    consumedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    quantity?: IntFieldUpdateOperationsInput | number
    service?: ServiceUpdateOneRequiredWithoutConsumptionsNestedInput
    client?: ClientUpdateOneRequiredWithoutConsumedServicesNestedInput
  }

  export type ConsumedServiceUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    serviceId?: IntFieldUpdateOperationsInput | number
    clientId?: IntFieldUpdateOperationsInput | number
    consumedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    quantity?: IntFieldUpdateOperationsInput | number
  }

  export type ConsumedServiceCreateManyInput = {
    id?: number
    serviceId: number
    clientId: number
    consumedAt?: Date | string
    quantity?: number
  }

  export type ConsumedServiceUpdateManyMutationInput = {
    consumedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    quantity?: IntFieldUpdateOperationsInput | number
  }

  export type ConsumedServiceUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    serviceId?: IntFieldUpdateOperationsInput | number
    clientId?: IntFieldUpdateOperationsInput | number
    consumedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    quantity?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type CpfNullableScalarRelationFilter = {
    is?: CpfWhereInput | null
    isNot?: CpfWhereInput | null
  }

  export type RgListRelationFilter = {
    every?: RgWhereInput
    some?: RgWhereInput
    none?: RgWhereInput
  }

  export type PhoneListRelationFilter = {
    every?: PhoneWhereInput
    some?: PhoneWhereInput
    none?: PhoneWhereInput
  }

  export type ConsumedProductListRelationFilter = {
    every?: ConsumedProductWhereInput
    some?: ConsumedProductWhereInput
    none?: ConsumedProductWhereInput
  }

  export type ConsumedServiceListRelationFilter = {
    every?: ConsumedServiceWhereInput
    some?: ConsumedServiceWhereInput
    none?: ConsumedServiceWhereInput
  }

  export type PetListRelationFilter = {
    every?: PetWhereInput
    some?: PetWhereInput
    none?: PetWhereInput
  }

  export type RgOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PhoneOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ConsumedProductOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ConsumedServiceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PetOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ClientCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    socialName?: SortOrder
    registrationDate?: SortOrder
  }

  export type ClientAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ClientMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    socialName?: SortOrder
    registrationDate?: SortOrder
  }

  export type ClientMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    socialName?: SortOrder
    registrationDate?: SortOrder
  }

  export type ClientSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type ClientScalarRelationFilter = {
    is?: ClientWhereInput
    isNot?: ClientWhereInput
  }

  export type CpfCountOrderByAggregateInput = {
    id?: SortOrder
    number?: SortOrder
    issueDate?: SortOrder
    clientId?: SortOrder
  }

  export type CpfAvgOrderByAggregateInput = {
    id?: SortOrder
    clientId?: SortOrder
  }

  export type CpfMaxOrderByAggregateInput = {
    id?: SortOrder
    number?: SortOrder
    issueDate?: SortOrder
    clientId?: SortOrder
  }

  export type CpfMinOrderByAggregateInput = {
    id?: SortOrder
    number?: SortOrder
    issueDate?: SortOrder
    clientId?: SortOrder
  }

  export type CpfSumOrderByAggregateInput = {
    id?: SortOrder
    clientId?: SortOrder
  }

  export type RgCountOrderByAggregateInput = {
    id?: SortOrder
    number?: SortOrder
    issueDate?: SortOrder
    clientId?: SortOrder
  }

  export type RgAvgOrderByAggregateInput = {
    id?: SortOrder
    clientId?: SortOrder
  }

  export type RgMaxOrderByAggregateInput = {
    id?: SortOrder
    number?: SortOrder
    issueDate?: SortOrder
    clientId?: SortOrder
  }

  export type RgMinOrderByAggregateInput = {
    id?: SortOrder
    number?: SortOrder
    issueDate?: SortOrder
    clientId?: SortOrder
  }

  export type RgSumOrderByAggregateInput = {
    id?: SortOrder
    clientId?: SortOrder
  }

  export type PhoneCountOrderByAggregateInput = {
    id?: SortOrder
    ddd?: SortOrder
    number?: SortOrder
    clientId?: SortOrder
  }

  export type PhoneAvgOrderByAggregateInput = {
    id?: SortOrder
    clientId?: SortOrder
  }

  export type PhoneMaxOrderByAggregateInput = {
    id?: SortOrder
    ddd?: SortOrder
    number?: SortOrder
    clientId?: SortOrder
  }

  export type PhoneMinOrderByAggregateInput = {
    id?: SortOrder
    ddd?: SortOrder
    number?: SortOrder
    clientId?: SortOrder
  }

  export type PhoneSumOrderByAggregateInput = {
    id?: SortOrder
    clientId?: SortOrder
  }

  export type PetCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    breed?: SortOrder
    species?: SortOrder
    clientId?: SortOrder
  }

  export type PetAvgOrderByAggregateInput = {
    id?: SortOrder
    clientId?: SortOrder
  }

  export type PetMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    breed?: SortOrder
    species?: SortOrder
    clientId?: SortOrder
  }

  export type PetMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    breed?: SortOrder
    species?: SortOrder
    clientId?: SortOrder
  }

  export type PetSumOrderByAggregateInput = {
    id?: SortOrder
    clientId?: SortOrder
  }

  export type DecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type ProductCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    value?: SortOrder
  }

  export type ProductAvgOrderByAggregateInput = {
    id?: SortOrder
    value?: SortOrder
  }

  export type ProductMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    value?: SortOrder
  }

  export type ProductMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    value?: SortOrder
  }

  export type ProductSumOrderByAggregateInput = {
    id?: SortOrder
    value?: SortOrder
  }

  export type DecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type ServiceCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    value?: SortOrder
  }

  export type ServiceAvgOrderByAggregateInput = {
    id?: SortOrder
    value?: SortOrder
  }

  export type ServiceMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    value?: SortOrder
  }

  export type ServiceMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    value?: SortOrder
  }

  export type ServiceSumOrderByAggregateInput = {
    id?: SortOrder
    value?: SortOrder
  }

  export type ProductScalarRelationFilter = {
    is?: ProductWhereInput
    isNot?: ProductWhereInput
  }

  export type ConsumedProductCountOrderByAggregateInput = {
    id?: SortOrder
    productId?: SortOrder
    clientId?: SortOrder
    consumedAt?: SortOrder
    quantity?: SortOrder
  }

  export type ConsumedProductAvgOrderByAggregateInput = {
    id?: SortOrder
    productId?: SortOrder
    clientId?: SortOrder
    quantity?: SortOrder
  }

  export type ConsumedProductMaxOrderByAggregateInput = {
    id?: SortOrder
    productId?: SortOrder
    clientId?: SortOrder
    consumedAt?: SortOrder
    quantity?: SortOrder
  }

  export type ConsumedProductMinOrderByAggregateInput = {
    id?: SortOrder
    productId?: SortOrder
    clientId?: SortOrder
    consumedAt?: SortOrder
    quantity?: SortOrder
  }

  export type ConsumedProductSumOrderByAggregateInput = {
    id?: SortOrder
    productId?: SortOrder
    clientId?: SortOrder
    quantity?: SortOrder
  }

  export type ServiceScalarRelationFilter = {
    is?: ServiceWhereInput
    isNot?: ServiceWhereInput
  }

  export type ConsumedServiceCountOrderByAggregateInput = {
    id?: SortOrder
    serviceId?: SortOrder
    clientId?: SortOrder
    consumedAt?: SortOrder
    quantity?: SortOrder
  }

  export type ConsumedServiceAvgOrderByAggregateInput = {
    id?: SortOrder
    serviceId?: SortOrder
    clientId?: SortOrder
    quantity?: SortOrder
  }

  export type ConsumedServiceMaxOrderByAggregateInput = {
    id?: SortOrder
    serviceId?: SortOrder
    clientId?: SortOrder
    consumedAt?: SortOrder
    quantity?: SortOrder
  }

  export type ConsumedServiceMinOrderByAggregateInput = {
    id?: SortOrder
    serviceId?: SortOrder
    clientId?: SortOrder
    consumedAt?: SortOrder
    quantity?: SortOrder
  }

  export type ConsumedServiceSumOrderByAggregateInput = {
    id?: SortOrder
    serviceId?: SortOrder
    clientId?: SortOrder
    quantity?: SortOrder
  }

  export type CpfCreateNestedOneWithoutClientInput = {
    create?: XOR<CpfCreateWithoutClientInput, CpfUncheckedCreateWithoutClientInput>
    connectOrCreate?: CpfCreateOrConnectWithoutClientInput
    connect?: CpfWhereUniqueInput
  }

  export type RgCreateNestedManyWithoutClientInput = {
    create?: XOR<RgCreateWithoutClientInput, RgUncheckedCreateWithoutClientInput> | RgCreateWithoutClientInput[] | RgUncheckedCreateWithoutClientInput[]
    connectOrCreate?: RgCreateOrConnectWithoutClientInput | RgCreateOrConnectWithoutClientInput[]
    createMany?: RgCreateManyClientInputEnvelope
    connect?: RgWhereUniqueInput | RgWhereUniqueInput[]
  }

  export type PhoneCreateNestedManyWithoutClientInput = {
    create?: XOR<PhoneCreateWithoutClientInput, PhoneUncheckedCreateWithoutClientInput> | PhoneCreateWithoutClientInput[] | PhoneUncheckedCreateWithoutClientInput[]
    connectOrCreate?: PhoneCreateOrConnectWithoutClientInput | PhoneCreateOrConnectWithoutClientInput[]
    createMany?: PhoneCreateManyClientInputEnvelope
    connect?: PhoneWhereUniqueInput | PhoneWhereUniqueInput[]
  }

  export type ConsumedProductCreateNestedManyWithoutClientInput = {
    create?: XOR<ConsumedProductCreateWithoutClientInput, ConsumedProductUncheckedCreateWithoutClientInput> | ConsumedProductCreateWithoutClientInput[] | ConsumedProductUncheckedCreateWithoutClientInput[]
    connectOrCreate?: ConsumedProductCreateOrConnectWithoutClientInput | ConsumedProductCreateOrConnectWithoutClientInput[]
    createMany?: ConsumedProductCreateManyClientInputEnvelope
    connect?: ConsumedProductWhereUniqueInput | ConsumedProductWhereUniqueInput[]
  }

  export type ConsumedServiceCreateNestedManyWithoutClientInput = {
    create?: XOR<ConsumedServiceCreateWithoutClientInput, ConsumedServiceUncheckedCreateWithoutClientInput> | ConsumedServiceCreateWithoutClientInput[] | ConsumedServiceUncheckedCreateWithoutClientInput[]
    connectOrCreate?: ConsumedServiceCreateOrConnectWithoutClientInput | ConsumedServiceCreateOrConnectWithoutClientInput[]
    createMany?: ConsumedServiceCreateManyClientInputEnvelope
    connect?: ConsumedServiceWhereUniqueInput | ConsumedServiceWhereUniqueInput[]
  }

  export type PetCreateNestedManyWithoutClientInput = {
    create?: XOR<PetCreateWithoutClientInput, PetUncheckedCreateWithoutClientInput> | PetCreateWithoutClientInput[] | PetUncheckedCreateWithoutClientInput[]
    connectOrCreate?: PetCreateOrConnectWithoutClientInput | PetCreateOrConnectWithoutClientInput[]
    createMany?: PetCreateManyClientInputEnvelope
    connect?: PetWhereUniqueInput | PetWhereUniqueInput[]
  }

  export type CpfUncheckedCreateNestedOneWithoutClientInput = {
    create?: XOR<CpfCreateWithoutClientInput, CpfUncheckedCreateWithoutClientInput>
    connectOrCreate?: CpfCreateOrConnectWithoutClientInput
    connect?: CpfWhereUniqueInput
  }

  export type RgUncheckedCreateNestedManyWithoutClientInput = {
    create?: XOR<RgCreateWithoutClientInput, RgUncheckedCreateWithoutClientInput> | RgCreateWithoutClientInput[] | RgUncheckedCreateWithoutClientInput[]
    connectOrCreate?: RgCreateOrConnectWithoutClientInput | RgCreateOrConnectWithoutClientInput[]
    createMany?: RgCreateManyClientInputEnvelope
    connect?: RgWhereUniqueInput | RgWhereUniqueInput[]
  }

  export type PhoneUncheckedCreateNestedManyWithoutClientInput = {
    create?: XOR<PhoneCreateWithoutClientInput, PhoneUncheckedCreateWithoutClientInput> | PhoneCreateWithoutClientInput[] | PhoneUncheckedCreateWithoutClientInput[]
    connectOrCreate?: PhoneCreateOrConnectWithoutClientInput | PhoneCreateOrConnectWithoutClientInput[]
    createMany?: PhoneCreateManyClientInputEnvelope
    connect?: PhoneWhereUniqueInput | PhoneWhereUniqueInput[]
  }

  export type ConsumedProductUncheckedCreateNestedManyWithoutClientInput = {
    create?: XOR<ConsumedProductCreateWithoutClientInput, ConsumedProductUncheckedCreateWithoutClientInput> | ConsumedProductCreateWithoutClientInput[] | ConsumedProductUncheckedCreateWithoutClientInput[]
    connectOrCreate?: ConsumedProductCreateOrConnectWithoutClientInput | ConsumedProductCreateOrConnectWithoutClientInput[]
    createMany?: ConsumedProductCreateManyClientInputEnvelope
    connect?: ConsumedProductWhereUniqueInput | ConsumedProductWhereUniqueInput[]
  }

  export type ConsumedServiceUncheckedCreateNestedManyWithoutClientInput = {
    create?: XOR<ConsumedServiceCreateWithoutClientInput, ConsumedServiceUncheckedCreateWithoutClientInput> | ConsumedServiceCreateWithoutClientInput[] | ConsumedServiceUncheckedCreateWithoutClientInput[]
    connectOrCreate?: ConsumedServiceCreateOrConnectWithoutClientInput | ConsumedServiceCreateOrConnectWithoutClientInput[]
    createMany?: ConsumedServiceCreateManyClientInputEnvelope
    connect?: ConsumedServiceWhereUniqueInput | ConsumedServiceWhereUniqueInput[]
  }

  export type PetUncheckedCreateNestedManyWithoutClientInput = {
    create?: XOR<PetCreateWithoutClientInput, PetUncheckedCreateWithoutClientInput> | PetCreateWithoutClientInput[] | PetUncheckedCreateWithoutClientInput[]
    connectOrCreate?: PetCreateOrConnectWithoutClientInput | PetCreateOrConnectWithoutClientInput[]
    createMany?: PetCreateManyClientInputEnvelope
    connect?: PetWhereUniqueInput | PetWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type CpfUpdateOneWithoutClientNestedInput = {
    create?: XOR<CpfCreateWithoutClientInput, CpfUncheckedCreateWithoutClientInput>
    connectOrCreate?: CpfCreateOrConnectWithoutClientInput
    upsert?: CpfUpsertWithoutClientInput
    disconnect?: CpfWhereInput | boolean
    delete?: CpfWhereInput | boolean
    connect?: CpfWhereUniqueInput
    update?: XOR<XOR<CpfUpdateToOneWithWhereWithoutClientInput, CpfUpdateWithoutClientInput>, CpfUncheckedUpdateWithoutClientInput>
  }

  export type RgUpdateManyWithoutClientNestedInput = {
    create?: XOR<RgCreateWithoutClientInput, RgUncheckedCreateWithoutClientInput> | RgCreateWithoutClientInput[] | RgUncheckedCreateWithoutClientInput[]
    connectOrCreate?: RgCreateOrConnectWithoutClientInput | RgCreateOrConnectWithoutClientInput[]
    upsert?: RgUpsertWithWhereUniqueWithoutClientInput | RgUpsertWithWhereUniqueWithoutClientInput[]
    createMany?: RgCreateManyClientInputEnvelope
    set?: RgWhereUniqueInput | RgWhereUniqueInput[]
    disconnect?: RgWhereUniqueInput | RgWhereUniqueInput[]
    delete?: RgWhereUniqueInput | RgWhereUniqueInput[]
    connect?: RgWhereUniqueInput | RgWhereUniqueInput[]
    update?: RgUpdateWithWhereUniqueWithoutClientInput | RgUpdateWithWhereUniqueWithoutClientInput[]
    updateMany?: RgUpdateManyWithWhereWithoutClientInput | RgUpdateManyWithWhereWithoutClientInput[]
    deleteMany?: RgScalarWhereInput | RgScalarWhereInput[]
  }

  export type PhoneUpdateManyWithoutClientNestedInput = {
    create?: XOR<PhoneCreateWithoutClientInput, PhoneUncheckedCreateWithoutClientInput> | PhoneCreateWithoutClientInput[] | PhoneUncheckedCreateWithoutClientInput[]
    connectOrCreate?: PhoneCreateOrConnectWithoutClientInput | PhoneCreateOrConnectWithoutClientInput[]
    upsert?: PhoneUpsertWithWhereUniqueWithoutClientInput | PhoneUpsertWithWhereUniqueWithoutClientInput[]
    createMany?: PhoneCreateManyClientInputEnvelope
    set?: PhoneWhereUniqueInput | PhoneWhereUniqueInput[]
    disconnect?: PhoneWhereUniqueInput | PhoneWhereUniqueInput[]
    delete?: PhoneWhereUniqueInput | PhoneWhereUniqueInput[]
    connect?: PhoneWhereUniqueInput | PhoneWhereUniqueInput[]
    update?: PhoneUpdateWithWhereUniqueWithoutClientInput | PhoneUpdateWithWhereUniqueWithoutClientInput[]
    updateMany?: PhoneUpdateManyWithWhereWithoutClientInput | PhoneUpdateManyWithWhereWithoutClientInput[]
    deleteMany?: PhoneScalarWhereInput | PhoneScalarWhereInput[]
  }

  export type ConsumedProductUpdateManyWithoutClientNestedInput = {
    create?: XOR<ConsumedProductCreateWithoutClientInput, ConsumedProductUncheckedCreateWithoutClientInput> | ConsumedProductCreateWithoutClientInput[] | ConsumedProductUncheckedCreateWithoutClientInput[]
    connectOrCreate?: ConsumedProductCreateOrConnectWithoutClientInput | ConsumedProductCreateOrConnectWithoutClientInput[]
    upsert?: ConsumedProductUpsertWithWhereUniqueWithoutClientInput | ConsumedProductUpsertWithWhereUniqueWithoutClientInput[]
    createMany?: ConsumedProductCreateManyClientInputEnvelope
    set?: ConsumedProductWhereUniqueInput | ConsumedProductWhereUniqueInput[]
    disconnect?: ConsumedProductWhereUniqueInput | ConsumedProductWhereUniqueInput[]
    delete?: ConsumedProductWhereUniqueInput | ConsumedProductWhereUniqueInput[]
    connect?: ConsumedProductWhereUniqueInput | ConsumedProductWhereUniqueInput[]
    update?: ConsumedProductUpdateWithWhereUniqueWithoutClientInput | ConsumedProductUpdateWithWhereUniqueWithoutClientInput[]
    updateMany?: ConsumedProductUpdateManyWithWhereWithoutClientInput | ConsumedProductUpdateManyWithWhereWithoutClientInput[]
    deleteMany?: ConsumedProductScalarWhereInput | ConsumedProductScalarWhereInput[]
  }

  export type ConsumedServiceUpdateManyWithoutClientNestedInput = {
    create?: XOR<ConsumedServiceCreateWithoutClientInput, ConsumedServiceUncheckedCreateWithoutClientInput> | ConsumedServiceCreateWithoutClientInput[] | ConsumedServiceUncheckedCreateWithoutClientInput[]
    connectOrCreate?: ConsumedServiceCreateOrConnectWithoutClientInput | ConsumedServiceCreateOrConnectWithoutClientInput[]
    upsert?: ConsumedServiceUpsertWithWhereUniqueWithoutClientInput | ConsumedServiceUpsertWithWhereUniqueWithoutClientInput[]
    createMany?: ConsumedServiceCreateManyClientInputEnvelope
    set?: ConsumedServiceWhereUniqueInput | ConsumedServiceWhereUniqueInput[]
    disconnect?: ConsumedServiceWhereUniqueInput | ConsumedServiceWhereUniqueInput[]
    delete?: ConsumedServiceWhereUniqueInput | ConsumedServiceWhereUniqueInput[]
    connect?: ConsumedServiceWhereUniqueInput | ConsumedServiceWhereUniqueInput[]
    update?: ConsumedServiceUpdateWithWhereUniqueWithoutClientInput | ConsumedServiceUpdateWithWhereUniqueWithoutClientInput[]
    updateMany?: ConsumedServiceUpdateManyWithWhereWithoutClientInput | ConsumedServiceUpdateManyWithWhereWithoutClientInput[]
    deleteMany?: ConsumedServiceScalarWhereInput | ConsumedServiceScalarWhereInput[]
  }

  export type PetUpdateManyWithoutClientNestedInput = {
    create?: XOR<PetCreateWithoutClientInput, PetUncheckedCreateWithoutClientInput> | PetCreateWithoutClientInput[] | PetUncheckedCreateWithoutClientInput[]
    connectOrCreate?: PetCreateOrConnectWithoutClientInput | PetCreateOrConnectWithoutClientInput[]
    upsert?: PetUpsertWithWhereUniqueWithoutClientInput | PetUpsertWithWhereUniqueWithoutClientInput[]
    createMany?: PetCreateManyClientInputEnvelope
    set?: PetWhereUniqueInput | PetWhereUniqueInput[]
    disconnect?: PetWhereUniqueInput | PetWhereUniqueInput[]
    delete?: PetWhereUniqueInput | PetWhereUniqueInput[]
    connect?: PetWhereUniqueInput | PetWhereUniqueInput[]
    update?: PetUpdateWithWhereUniqueWithoutClientInput | PetUpdateWithWhereUniqueWithoutClientInput[]
    updateMany?: PetUpdateManyWithWhereWithoutClientInput | PetUpdateManyWithWhereWithoutClientInput[]
    deleteMany?: PetScalarWhereInput | PetScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type CpfUncheckedUpdateOneWithoutClientNestedInput = {
    create?: XOR<CpfCreateWithoutClientInput, CpfUncheckedCreateWithoutClientInput>
    connectOrCreate?: CpfCreateOrConnectWithoutClientInput
    upsert?: CpfUpsertWithoutClientInput
    disconnect?: CpfWhereInput | boolean
    delete?: CpfWhereInput | boolean
    connect?: CpfWhereUniqueInput
    update?: XOR<XOR<CpfUpdateToOneWithWhereWithoutClientInput, CpfUpdateWithoutClientInput>, CpfUncheckedUpdateWithoutClientInput>
  }

  export type RgUncheckedUpdateManyWithoutClientNestedInput = {
    create?: XOR<RgCreateWithoutClientInput, RgUncheckedCreateWithoutClientInput> | RgCreateWithoutClientInput[] | RgUncheckedCreateWithoutClientInput[]
    connectOrCreate?: RgCreateOrConnectWithoutClientInput | RgCreateOrConnectWithoutClientInput[]
    upsert?: RgUpsertWithWhereUniqueWithoutClientInput | RgUpsertWithWhereUniqueWithoutClientInput[]
    createMany?: RgCreateManyClientInputEnvelope
    set?: RgWhereUniqueInput | RgWhereUniqueInput[]
    disconnect?: RgWhereUniqueInput | RgWhereUniqueInput[]
    delete?: RgWhereUniqueInput | RgWhereUniqueInput[]
    connect?: RgWhereUniqueInput | RgWhereUniqueInput[]
    update?: RgUpdateWithWhereUniqueWithoutClientInput | RgUpdateWithWhereUniqueWithoutClientInput[]
    updateMany?: RgUpdateManyWithWhereWithoutClientInput | RgUpdateManyWithWhereWithoutClientInput[]
    deleteMany?: RgScalarWhereInput | RgScalarWhereInput[]
  }

  export type PhoneUncheckedUpdateManyWithoutClientNestedInput = {
    create?: XOR<PhoneCreateWithoutClientInput, PhoneUncheckedCreateWithoutClientInput> | PhoneCreateWithoutClientInput[] | PhoneUncheckedCreateWithoutClientInput[]
    connectOrCreate?: PhoneCreateOrConnectWithoutClientInput | PhoneCreateOrConnectWithoutClientInput[]
    upsert?: PhoneUpsertWithWhereUniqueWithoutClientInput | PhoneUpsertWithWhereUniqueWithoutClientInput[]
    createMany?: PhoneCreateManyClientInputEnvelope
    set?: PhoneWhereUniqueInput | PhoneWhereUniqueInput[]
    disconnect?: PhoneWhereUniqueInput | PhoneWhereUniqueInput[]
    delete?: PhoneWhereUniqueInput | PhoneWhereUniqueInput[]
    connect?: PhoneWhereUniqueInput | PhoneWhereUniqueInput[]
    update?: PhoneUpdateWithWhereUniqueWithoutClientInput | PhoneUpdateWithWhereUniqueWithoutClientInput[]
    updateMany?: PhoneUpdateManyWithWhereWithoutClientInput | PhoneUpdateManyWithWhereWithoutClientInput[]
    deleteMany?: PhoneScalarWhereInput | PhoneScalarWhereInput[]
  }

  export type ConsumedProductUncheckedUpdateManyWithoutClientNestedInput = {
    create?: XOR<ConsumedProductCreateWithoutClientInput, ConsumedProductUncheckedCreateWithoutClientInput> | ConsumedProductCreateWithoutClientInput[] | ConsumedProductUncheckedCreateWithoutClientInput[]
    connectOrCreate?: ConsumedProductCreateOrConnectWithoutClientInput | ConsumedProductCreateOrConnectWithoutClientInput[]
    upsert?: ConsumedProductUpsertWithWhereUniqueWithoutClientInput | ConsumedProductUpsertWithWhereUniqueWithoutClientInput[]
    createMany?: ConsumedProductCreateManyClientInputEnvelope
    set?: ConsumedProductWhereUniqueInput | ConsumedProductWhereUniqueInput[]
    disconnect?: ConsumedProductWhereUniqueInput | ConsumedProductWhereUniqueInput[]
    delete?: ConsumedProductWhereUniqueInput | ConsumedProductWhereUniqueInput[]
    connect?: ConsumedProductWhereUniqueInput | ConsumedProductWhereUniqueInput[]
    update?: ConsumedProductUpdateWithWhereUniqueWithoutClientInput | ConsumedProductUpdateWithWhereUniqueWithoutClientInput[]
    updateMany?: ConsumedProductUpdateManyWithWhereWithoutClientInput | ConsumedProductUpdateManyWithWhereWithoutClientInput[]
    deleteMany?: ConsumedProductScalarWhereInput | ConsumedProductScalarWhereInput[]
  }

  export type ConsumedServiceUncheckedUpdateManyWithoutClientNestedInput = {
    create?: XOR<ConsumedServiceCreateWithoutClientInput, ConsumedServiceUncheckedCreateWithoutClientInput> | ConsumedServiceCreateWithoutClientInput[] | ConsumedServiceUncheckedCreateWithoutClientInput[]
    connectOrCreate?: ConsumedServiceCreateOrConnectWithoutClientInput | ConsumedServiceCreateOrConnectWithoutClientInput[]
    upsert?: ConsumedServiceUpsertWithWhereUniqueWithoutClientInput | ConsumedServiceUpsertWithWhereUniqueWithoutClientInput[]
    createMany?: ConsumedServiceCreateManyClientInputEnvelope
    set?: ConsumedServiceWhereUniqueInput | ConsumedServiceWhereUniqueInput[]
    disconnect?: ConsumedServiceWhereUniqueInput | ConsumedServiceWhereUniqueInput[]
    delete?: ConsumedServiceWhereUniqueInput | ConsumedServiceWhereUniqueInput[]
    connect?: ConsumedServiceWhereUniqueInput | ConsumedServiceWhereUniqueInput[]
    update?: ConsumedServiceUpdateWithWhereUniqueWithoutClientInput | ConsumedServiceUpdateWithWhereUniqueWithoutClientInput[]
    updateMany?: ConsumedServiceUpdateManyWithWhereWithoutClientInput | ConsumedServiceUpdateManyWithWhereWithoutClientInput[]
    deleteMany?: ConsumedServiceScalarWhereInput | ConsumedServiceScalarWhereInput[]
  }

  export type PetUncheckedUpdateManyWithoutClientNestedInput = {
    create?: XOR<PetCreateWithoutClientInput, PetUncheckedCreateWithoutClientInput> | PetCreateWithoutClientInput[] | PetUncheckedCreateWithoutClientInput[]
    connectOrCreate?: PetCreateOrConnectWithoutClientInput | PetCreateOrConnectWithoutClientInput[]
    upsert?: PetUpsertWithWhereUniqueWithoutClientInput | PetUpsertWithWhereUniqueWithoutClientInput[]
    createMany?: PetCreateManyClientInputEnvelope
    set?: PetWhereUniqueInput | PetWhereUniqueInput[]
    disconnect?: PetWhereUniqueInput | PetWhereUniqueInput[]
    delete?: PetWhereUniqueInput | PetWhereUniqueInput[]
    connect?: PetWhereUniqueInput | PetWhereUniqueInput[]
    update?: PetUpdateWithWhereUniqueWithoutClientInput | PetUpdateWithWhereUniqueWithoutClientInput[]
    updateMany?: PetUpdateManyWithWhereWithoutClientInput | PetUpdateManyWithWhereWithoutClientInput[]
    deleteMany?: PetScalarWhereInput | PetScalarWhereInput[]
  }

  export type ClientCreateNestedOneWithoutCpfInput = {
    create?: XOR<ClientCreateWithoutCpfInput, ClientUncheckedCreateWithoutCpfInput>
    connectOrCreate?: ClientCreateOrConnectWithoutCpfInput
    connect?: ClientWhereUniqueInput
  }

  export type ClientUpdateOneRequiredWithoutCpfNestedInput = {
    create?: XOR<ClientCreateWithoutCpfInput, ClientUncheckedCreateWithoutCpfInput>
    connectOrCreate?: ClientCreateOrConnectWithoutCpfInput
    upsert?: ClientUpsertWithoutCpfInput
    connect?: ClientWhereUniqueInput
    update?: XOR<XOR<ClientUpdateToOneWithWhereWithoutCpfInput, ClientUpdateWithoutCpfInput>, ClientUncheckedUpdateWithoutCpfInput>
  }

  export type ClientCreateNestedOneWithoutRgsInput = {
    create?: XOR<ClientCreateWithoutRgsInput, ClientUncheckedCreateWithoutRgsInput>
    connectOrCreate?: ClientCreateOrConnectWithoutRgsInput
    connect?: ClientWhereUniqueInput
  }

  export type ClientUpdateOneRequiredWithoutRgsNestedInput = {
    create?: XOR<ClientCreateWithoutRgsInput, ClientUncheckedCreateWithoutRgsInput>
    connectOrCreate?: ClientCreateOrConnectWithoutRgsInput
    upsert?: ClientUpsertWithoutRgsInput
    connect?: ClientWhereUniqueInput
    update?: XOR<XOR<ClientUpdateToOneWithWhereWithoutRgsInput, ClientUpdateWithoutRgsInput>, ClientUncheckedUpdateWithoutRgsInput>
  }

  export type ClientCreateNestedOneWithoutPhonesInput = {
    create?: XOR<ClientCreateWithoutPhonesInput, ClientUncheckedCreateWithoutPhonesInput>
    connectOrCreate?: ClientCreateOrConnectWithoutPhonesInput
    connect?: ClientWhereUniqueInput
  }

  export type ClientUpdateOneRequiredWithoutPhonesNestedInput = {
    create?: XOR<ClientCreateWithoutPhonesInput, ClientUncheckedCreateWithoutPhonesInput>
    connectOrCreate?: ClientCreateOrConnectWithoutPhonesInput
    upsert?: ClientUpsertWithoutPhonesInput
    connect?: ClientWhereUniqueInput
    update?: XOR<XOR<ClientUpdateToOneWithWhereWithoutPhonesInput, ClientUpdateWithoutPhonesInput>, ClientUncheckedUpdateWithoutPhonesInput>
  }

  export type ClientCreateNestedOneWithoutPetsInput = {
    create?: XOR<ClientCreateWithoutPetsInput, ClientUncheckedCreateWithoutPetsInput>
    connectOrCreate?: ClientCreateOrConnectWithoutPetsInput
    connect?: ClientWhereUniqueInput
  }

  export type ClientUpdateOneRequiredWithoutPetsNestedInput = {
    create?: XOR<ClientCreateWithoutPetsInput, ClientUncheckedCreateWithoutPetsInput>
    connectOrCreate?: ClientCreateOrConnectWithoutPetsInput
    upsert?: ClientUpsertWithoutPetsInput
    connect?: ClientWhereUniqueInput
    update?: XOR<XOR<ClientUpdateToOneWithWhereWithoutPetsInput, ClientUpdateWithoutPetsInput>, ClientUncheckedUpdateWithoutPetsInput>
  }

  export type ConsumedProductCreateNestedManyWithoutProductInput = {
    create?: XOR<ConsumedProductCreateWithoutProductInput, ConsumedProductUncheckedCreateWithoutProductInput> | ConsumedProductCreateWithoutProductInput[] | ConsumedProductUncheckedCreateWithoutProductInput[]
    connectOrCreate?: ConsumedProductCreateOrConnectWithoutProductInput | ConsumedProductCreateOrConnectWithoutProductInput[]
    createMany?: ConsumedProductCreateManyProductInputEnvelope
    connect?: ConsumedProductWhereUniqueInput | ConsumedProductWhereUniqueInput[]
  }

  export type ConsumedProductUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<ConsumedProductCreateWithoutProductInput, ConsumedProductUncheckedCreateWithoutProductInput> | ConsumedProductCreateWithoutProductInput[] | ConsumedProductUncheckedCreateWithoutProductInput[]
    connectOrCreate?: ConsumedProductCreateOrConnectWithoutProductInput | ConsumedProductCreateOrConnectWithoutProductInput[]
    createMany?: ConsumedProductCreateManyProductInputEnvelope
    connect?: ConsumedProductWhereUniqueInput | ConsumedProductWhereUniqueInput[]
  }

  export type DecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type ConsumedProductUpdateManyWithoutProductNestedInput = {
    create?: XOR<ConsumedProductCreateWithoutProductInput, ConsumedProductUncheckedCreateWithoutProductInput> | ConsumedProductCreateWithoutProductInput[] | ConsumedProductUncheckedCreateWithoutProductInput[]
    connectOrCreate?: ConsumedProductCreateOrConnectWithoutProductInput | ConsumedProductCreateOrConnectWithoutProductInput[]
    upsert?: ConsumedProductUpsertWithWhereUniqueWithoutProductInput | ConsumedProductUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: ConsumedProductCreateManyProductInputEnvelope
    set?: ConsumedProductWhereUniqueInput | ConsumedProductWhereUniqueInput[]
    disconnect?: ConsumedProductWhereUniqueInput | ConsumedProductWhereUniqueInput[]
    delete?: ConsumedProductWhereUniqueInput | ConsumedProductWhereUniqueInput[]
    connect?: ConsumedProductWhereUniqueInput | ConsumedProductWhereUniqueInput[]
    update?: ConsumedProductUpdateWithWhereUniqueWithoutProductInput | ConsumedProductUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: ConsumedProductUpdateManyWithWhereWithoutProductInput | ConsumedProductUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: ConsumedProductScalarWhereInput | ConsumedProductScalarWhereInput[]
  }

  export type ConsumedProductUncheckedUpdateManyWithoutProductNestedInput = {
    create?: XOR<ConsumedProductCreateWithoutProductInput, ConsumedProductUncheckedCreateWithoutProductInput> | ConsumedProductCreateWithoutProductInput[] | ConsumedProductUncheckedCreateWithoutProductInput[]
    connectOrCreate?: ConsumedProductCreateOrConnectWithoutProductInput | ConsumedProductCreateOrConnectWithoutProductInput[]
    upsert?: ConsumedProductUpsertWithWhereUniqueWithoutProductInput | ConsumedProductUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: ConsumedProductCreateManyProductInputEnvelope
    set?: ConsumedProductWhereUniqueInput | ConsumedProductWhereUniqueInput[]
    disconnect?: ConsumedProductWhereUniqueInput | ConsumedProductWhereUniqueInput[]
    delete?: ConsumedProductWhereUniqueInput | ConsumedProductWhereUniqueInput[]
    connect?: ConsumedProductWhereUniqueInput | ConsumedProductWhereUniqueInput[]
    update?: ConsumedProductUpdateWithWhereUniqueWithoutProductInput | ConsumedProductUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: ConsumedProductUpdateManyWithWhereWithoutProductInput | ConsumedProductUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: ConsumedProductScalarWhereInput | ConsumedProductScalarWhereInput[]
  }

  export type ConsumedServiceCreateNestedManyWithoutServiceInput = {
    create?: XOR<ConsumedServiceCreateWithoutServiceInput, ConsumedServiceUncheckedCreateWithoutServiceInput> | ConsumedServiceCreateWithoutServiceInput[] | ConsumedServiceUncheckedCreateWithoutServiceInput[]
    connectOrCreate?: ConsumedServiceCreateOrConnectWithoutServiceInput | ConsumedServiceCreateOrConnectWithoutServiceInput[]
    createMany?: ConsumedServiceCreateManyServiceInputEnvelope
    connect?: ConsumedServiceWhereUniqueInput | ConsumedServiceWhereUniqueInput[]
  }

  export type ConsumedServiceUncheckedCreateNestedManyWithoutServiceInput = {
    create?: XOR<ConsumedServiceCreateWithoutServiceInput, ConsumedServiceUncheckedCreateWithoutServiceInput> | ConsumedServiceCreateWithoutServiceInput[] | ConsumedServiceUncheckedCreateWithoutServiceInput[]
    connectOrCreate?: ConsumedServiceCreateOrConnectWithoutServiceInput | ConsumedServiceCreateOrConnectWithoutServiceInput[]
    createMany?: ConsumedServiceCreateManyServiceInputEnvelope
    connect?: ConsumedServiceWhereUniqueInput | ConsumedServiceWhereUniqueInput[]
  }

  export type ConsumedServiceUpdateManyWithoutServiceNestedInput = {
    create?: XOR<ConsumedServiceCreateWithoutServiceInput, ConsumedServiceUncheckedCreateWithoutServiceInput> | ConsumedServiceCreateWithoutServiceInput[] | ConsumedServiceUncheckedCreateWithoutServiceInput[]
    connectOrCreate?: ConsumedServiceCreateOrConnectWithoutServiceInput | ConsumedServiceCreateOrConnectWithoutServiceInput[]
    upsert?: ConsumedServiceUpsertWithWhereUniqueWithoutServiceInput | ConsumedServiceUpsertWithWhereUniqueWithoutServiceInput[]
    createMany?: ConsumedServiceCreateManyServiceInputEnvelope
    set?: ConsumedServiceWhereUniqueInput | ConsumedServiceWhereUniqueInput[]
    disconnect?: ConsumedServiceWhereUniqueInput | ConsumedServiceWhereUniqueInput[]
    delete?: ConsumedServiceWhereUniqueInput | ConsumedServiceWhereUniqueInput[]
    connect?: ConsumedServiceWhereUniqueInput | ConsumedServiceWhereUniqueInput[]
    update?: ConsumedServiceUpdateWithWhereUniqueWithoutServiceInput | ConsumedServiceUpdateWithWhereUniqueWithoutServiceInput[]
    updateMany?: ConsumedServiceUpdateManyWithWhereWithoutServiceInput | ConsumedServiceUpdateManyWithWhereWithoutServiceInput[]
    deleteMany?: ConsumedServiceScalarWhereInput | ConsumedServiceScalarWhereInput[]
  }

  export type ConsumedServiceUncheckedUpdateManyWithoutServiceNestedInput = {
    create?: XOR<ConsumedServiceCreateWithoutServiceInput, ConsumedServiceUncheckedCreateWithoutServiceInput> | ConsumedServiceCreateWithoutServiceInput[] | ConsumedServiceUncheckedCreateWithoutServiceInput[]
    connectOrCreate?: ConsumedServiceCreateOrConnectWithoutServiceInput | ConsumedServiceCreateOrConnectWithoutServiceInput[]
    upsert?: ConsumedServiceUpsertWithWhereUniqueWithoutServiceInput | ConsumedServiceUpsertWithWhereUniqueWithoutServiceInput[]
    createMany?: ConsumedServiceCreateManyServiceInputEnvelope
    set?: ConsumedServiceWhereUniqueInput | ConsumedServiceWhereUniqueInput[]
    disconnect?: ConsumedServiceWhereUniqueInput | ConsumedServiceWhereUniqueInput[]
    delete?: ConsumedServiceWhereUniqueInput | ConsumedServiceWhereUniqueInput[]
    connect?: ConsumedServiceWhereUniqueInput | ConsumedServiceWhereUniqueInput[]
    update?: ConsumedServiceUpdateWithWhereUniqueWithoutServiceInput | ConsumedServiceUpdateWithWhereUniqueWithoutServiceInput[]
    updateMany?: ConsumedServiceUpdateManyWithWhereWithoutServiceInput | ConsumedServiceUpdateManyWithWhereWithoutServiceInput[]
    deleteMany?: ConsumedServiceScalarWhereInput | ConsumedServiceScalarWhereInput[]
  }

  export type ProductCreateNestedOneWithoutConsumptionsInput = {
    create?: XOR<ProductCreateWithoutConsumptionsInput, ProductUncheckedCreateWithoutConsumptionsInput>
    connectOrCreate?: ProductCreateOrConnectWithoutConsumptionsInput
    connect?: ProductWhereUniqueInput
  }

  export type ClientCreateNestedOneWithoutConsumedProductsInput = {
    create?: XOR<ClientCreateWithoutConsumedProductsInput, ClientUncheckedCreateWithoutConsumedProductsInput>
    connectOrCreate?: ClientCreateOrConnectWithoutConsumedProductsInput
    connect?: ClientWhereUniqueInput
  }

  export type ProductUpdateOneRequiredWithoutConsumptionsNestedInput = {
    create?: XOR<ProductCreateWithoutConsumptionsInput, ProductUncheckedCreateWithoutConsumptionsInput>
    connectOrCreate?: ProductCreateOrConnectWithoutConsumptionsInput
    upsert?: ProductUpsertWithoutConsumptionsInput
    connect?: ProductWhereUniqueInput
    update?: XOR<XOR<ProductUpdateToOneWithWhereWithoutConsumptionsInput, ProductUpdateWithoutConsumptionsInput>, ProductUncheckedUpdateWithoutConsumptionsInput>
  }

  export type ClientUpdateOneRequiredWithoutConsumedProductsNestedInput = {
    create?: XOR<ClientCreateWithoutConsumedProductsInput, ClientUncheckedCreateWithoutConsumedProductsInput>
    connectOrCreate?: ClientCreateOrConnectWithoutConsumedProductsInput
    upsert?: ClientUpsertWithoutConsumedProductsInput
    connect?: ClientWhereUniqueInput
    update?: XOR<XOR<ClientUpdateToOneWithWhereWithoutConsumedProductsInput, ClientUpdateWithoutConsumedProductsInput>, ClientUncheckedUpdateWithoutConsumedProductsInput>
  }

  export type ServiceCreateNestedOneWithoutConsumptionsInput = {
    create?: XOR<ServiceCreateWithoutConsumptionsInput, ServiceUncheckedCreateWithoutConsumptionsInput>
    connectOrCreate?: ServiceCreateOrConnectWithoutConsumptionsInput
    connect?: ServiceWhereUniqueInput
  }

  export type ClientCreateNestedOneWithoutConsumedServicesInput = {
    create?: XOR<ClientCreateWithoutConsumedServicesInput, ClientUncheckedCreateWithoutConsumedServicesInput>
    connectOrCreate?: ClientCreateOrConnectWithoutConsumedServicesInput
    connect?: ClientWhereUniqueInput
  }

  export type ServiceUpdateOneRequiredWithoutConsumptionsNestedInput = {
    create?: XOR<ServiceCreateWithoutConsumptionsInput, ServiceUncheckedCreateWithoutConsumptionsInput>
    connectOrCreate?: ServiceCreateOrConnectWithoutConsumptionsInput
    upsert?: ServiceUpsertWithoutConsumptionsInput
    connect?: ServiceWhereUniqueInput
    update?: XOR<XOR<ServiceUpdateToOneWithWhereWithoutConsumptionsInput, ServiceUpdateWithoutConsumptionsInput>, ServiceUncheckedUpdateWithoutConsumptionsInput>
  }

  export type ClientUpdateOneRequiredWithoutConsumedServicesNestedInput = {
    create?: XOR<ClientCreateWithoutConsumedServicesInput, ClientUncheckedCreateWithoutConsumedServicesInput>
    connectOrCreate?: ClientCreateOrConnectWithoutConsumedServicesInput
    upsert?: ClientUpsertWithoutConsumedServicesInput
    connect?: ClientWhereUniqueInput
    update?: XOR<XOR<ClientUpdateToOneWithWhereWithoutConsumedServicesInput, ClientUpdateWithoutConsumedServicesInput>, ClientUncheckedUpdateWithoutConsumedServicesInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedDecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type NestedDecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type CpfCreateWithoutClientInput = {
    number: string
    issueDate: Date | string
  }

  export type CpfUncheckedCreateWithoutClientInput = {
    id?: number
    number: string
    issueDate: Date | string
  }

  export type CpfCreateOrConnectWithoutClientInput = {
    where: CpfWhereUniqueInput
    create: XOR<CpfCreateWithoutClientInput, CpfUncheckedCreateWithoutClientInput>
  }

  export type RgCreateWithoutClientInput = {
    number: string
    issueDate: Date | string
  }

  export type RgUncheckedCreateWithoutClientInput = {
    id?: number
    number: string
    issueDate: Date | string
  }

  export type RgCreateOrConnectWithoutClientInput = {
    where: RgWhereUniqueInput
    create: XOR<RgCreateWithoutClientInput, RgUncheckedCreateWithoutClientInput>
  }

  export type RgCreateManyClientInputEnvelope = {
    data: RgCreateManyClientInput | RgCreateManyClientInput[]
    skipDuplicates?: boolean
  }

  export type PhoneCreateWithoutClientInput = {
    ddd: string
    number: string
  }

  export type PhoneUncheckedCreateWithoutClientInput = {
    id?: number
    ddd: string
    number: string
  }

  export type PhoneCreateOrConnectWithoutClientInput = {
    where: PhoneWhereUniqueInput
    create: XOR<PhoneCreateWithoutClientInput, PhoneUncheckedCreateWithoutClientInput>
  }

  export type PhoneCreateManyClientInputEnvelope = {
    data: PhoneCreateManyClientInput | PhoneCreateManyClientInput[]
    skipDuplicates?: boolean
  }

  export type ConsumedProductCreateWithoutClientInput = {
    consumedAt?: Date | string
    quantity?: number
    product: ProductCreateNestedOneWithoutConsumptionsInput
  }

  export type ConsumedProductUncheckedCreateWithoutClientInput = {
    id?: number
    productId: number
    consumedAt?: Date | string
    quantity?: number
  }

  export type ConsumedProductCreateOrConnectWithoutClientInput = {
    where: ConsumedProductWhereUniqueInput
    create: XOR<ConsumedProductCreateWithoutClientInput, ConsumedProductUncheckedCreateWithoutClientInput>
  }

  export type ConsumedProductCreateManyClientInputEnvelope = {
    data: ConsumedProductCreateManyClientInput | ConsumedProductCreateManyClientInput[]
    skipDuplicates?: boolean
  }

  export type ConsumedServiceCreateWithoutClientInput = {
    consumedAt?: Date | string
    quantity?: number
    service: ServiceCreateNestedOneWithoutConsumptionsInput
  }

  export type ConsumedServiceUncheckedCreateWithoutClientInput = {
    id?: number
    serviceId: number
    consumedAt?: Date | string
    quantity?: number
  }

  export type ConsumedServiceCreateOrConnectWithoutClientInput = {
    where: ConsumedServiceWhereUniqueInput
    create: XOR<ConsumedServiceCreateWithoutClientInput, ConsumedServiceUncheckedCreateWithoutClientInput>
  }

  export type ConsumedServiceCreateManyClientInputEnvelope = {
    data: ConsumedServiceCreateManyClientInput | ConsumedServiceCreateManyClientInput[]
    skipDuplicates?: boolean
  }

  export type PetCreateWithoutClientInput = {
    name: string
    breed: string
    species: string
  }

  export type PetUncheckedCreateWithoutClientInput = {
    id?: number
    name: string
    breed: string
    species: string
  }

  export type PetCreateOrConnectWithoutClientInput = {
    where: PetWhereUniqueInput
    create: XOR<PetCreateWithoutClientInput, PetUncheckedCreateWithoutClientInput>
  }

  export type PetCreateManyClientInputEnvelope = {
    data: PetCreateManyClientInput | PetCreateManyClientInput[]
    skipDuplicates?: boolean
  }

  export type CpfUpsertWithoutClientInput = {
    update: XOR<CpfUpdateWithoutClientInput, CpfUncheckedUpdateWithoutClientInput>
    create: XOR<CpfCreateWithoutClientInput, CpfUncheckedCreateWithoutClientInput>
    where?: CpfWhereInput
  }

  export type CpfUpdateToOneWithWhereWithoutClientInput = {
    where?: CpfWhereInput
    data: XOR<CpfUpdateWithoutClientInput, CpfUncheckedUpdateWithoutClientInput>
  }

  export type CpfUpdateWithoutClientInput = {
    number?: StringFieldUpdateOperationsInput | string
    issueDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CpfUncheckedUpdateWithoutClientInput = {
    id?: IntFieldUpdateOperationsInput | number
    number?: StringFieldUpdateOperationsInput | string
    issueDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RgUpsertWithWhereUniqueWithoutClientInput = {
    where: RgWhereUniqueInput
    update: XOR<RgUpdateWithoutClientInput, RgUncheckedUpdateWithoutClientInput>
    create: XOR<RgCreateWithoutClientInput, RgUncheckedCreateWithoutClientInput>
  }

  export type RgUpdateWithWhereUniqueWithoutClientInput = {
    where: RgWhereUniqueInput
    data: XOR<RgUpdateWithoutClientInput, RgUncheckedUpdateWithoutClientInput>
  }

  export type RgUpdateManyWithWhereWithoutClientInput = {
    where: RgScalarWhereInput
    data: XOR<RgUpdateManyMutationInput, RgUncheckedUpdateManyWithoutClientInput>
  }

  export type RgScalarWhereInput = {
    AND?: RgScalarWhereInput | RgScalarWhereInput[]
    OR?: RgScalarWhereInput[]
    NOT?: RgScalarWhereInput | RgScalarWhereInput[]
    id?: IntFilter<"Rg"> | number
    number?: StringFilter<"Rg"> | string
    issueDate?: DateTimeFilter<"Rg"> | Date | string
    clientId?: IntFilter<"Rg"> | number
  }

  export type PhoneUpsertWithWhereUniqueWithoutClientInput = {
    where: PhoneWhereUniqueInput
    update: XOR<PhoneUpdateWithoutClientInput, PhoneUncheckedUpdateWithoutClientInput>
    create: XOR<PhoneCreateWithoutClientInput, PhoneUncheckedCreateWithoutClientInput>
  }

  export type PhoneUpdateWithWhereUniqueWithoutClientInput = {
    where: PhoneWhereUniqueInput
    data: XOR<PhoneUpdateWithoutClientInput, PhoneUncheckedUpdateWithoutClientInput>
  }

  export type PhoneUpdateManyWithWhereWithoutClientInput = {
    where: PhoneScalarWhereInput
    data: XOR<PhoneUpdateManyMutationInput, PhoneUncheckedUpdateManyWithoutClientInput>
  }

  export type PhoneScalarWhereInput = {
    AND?: PhoneScalarWhereInput | PhoneScalarWhereInput[]
    OR?: PhoneScalarWhereInput[]
    NOT?: PhoneScalarWhereInput | PhoneScalarWhereInput[]
    id?: IntFilter<"Phone"> | number
    ddd?: StringFilter<"Phone"> | string
    number?: StringFilter<"Phone"> | string
    clientId?: IntFilter<"Phone"> | number
  }

  export type ConsumedProductUpsertWithWhereUniqueWithoutClientInput = {
    where: ConsumedProductWhereUniqueInput
    update: XOR<ConsumedProductUpdateWithoutClientInput, ConsumedProductUncheckedUpdateWithoutClientInput>
    create: XOR<ConsumedProductCreateWithoutClientInput, ConsumedProductUncheckedCreateWithoutClientInput>
  }

  export type ConsumedProductUpdateWithWhereUniqueWithoutClientInput = {
    where: ConsumedProductWhereUniqueInput
    data: XOR<ConsumedProductUpdateWithoutClientInput, ConsumedProductUncheckedUpdateWithoutClientInput>
  }

  export type ConsumedProductUpdateManyWithWhereWithoutClientInput = {
    where: ConsumedProductScalarWhereInput
    data: XOR<ConsumedProductUpdateManyMutationInput, ConsumedProductUncheckedUpdateManyWithoutClientInput>
  }

  export type ConsumedProductScalarWhereInput = {
    AND?: ConsumedProductScalarWhereInput | ConsumedProductScalarWhereInput[]
    OR?: ConsumedProductScalarWhereInput[]
    NOT?: ConsumedProductScalarWhereInput | ConsumedProductScalarWhereInput[]
    id?: IntFilter<"ConsumedProduct"> | number
    productId?: IntFilter<"ConsumedProduct"> | number
    clientId?: IntFilter<"ConsumedProduct"> | number
    consumedAt?: DateTimeFilter<"ConsumedProduct"> | Date | string
    quantity?: IntFilter<"ConsumedProduct"> | number
  }

  export type ConsumedServiceUpsertWithWhereUniqueWithoutClientInput = {
    where: ConsumedServiceWhereUniqueInput
    update: XOR<ConsumedServiceUpdateWithoutClientInput, ConsumedServiceUncheckedUpdateWithoutClientInput>
    create: XOR<ConsumedServiceCreateWithoutClientInput, ConsumedServiceUncheckedCreateWithoutClientInput>
  }

  export type ConsumedServiceUpdateWithWhereUniqueWithoutClientInput = {
    where: ConsumedServiceWhereUniqueInput
    data: XOR<ConsumedServiceUpdateWithoutClientInput, ConsumedServiceUncheckedUpdateWithoutClientInput>
  }

  export type ConsumedServiceUpdateManyWithWhereWithoutClientInput = {
    where: ConsumedServiceScalarWhereInput
    data: XOR<ConsumedServiceUpdateManyMutationInput, ConsumedServiceUncheckedUpdateManyWithoutClientInput>
  }

  export type ConsumedServiceScalarWhereInput = {
    AND?: ConsumedServiceScalarWhereInput | ConsumedServiceScalarWhereInput[]
    OR?: ConsumedServiceScalarWhereInput[]
    NOT?: ConsumedServiceScalarWhereInput | ConsumedServiceScalarWhereInput[]
    id?: IntFilter<"ConsumedService"> | number
    serviceId?: IntFilter<"ConsumedService"> | number
    clientId?: IntFilter<"ConsumedService"> | number
    consumedAt?: DateTimeFilter<"ConsumedService"> | Date | string
    quantity?: IntFilter<"ConsumedService"> | number
  }

  export type PetUpsertWithWhereUniqueWithoutClientInput = {
    where: PetWhereUniqueInput
    update: XOR<PetUpdateWithoutClientInput, PetUncheckedUpdateWithoutClientInput>
    create: XOR<PetCreateWithoutClientInput, PetUncheckedCreateWithoutClientInput>
  }

  export type PetUpdateWithWhereUniqueWithoutClientInput = {
    where: PetWhereUniqueInput
    data: XOR<PetUpdateWithoutClientInput, PetUncheckedUpdateWithoutClientInput>
  }

  export type PetUpdateManyWithWhereWithoutClientInput = {
    where: PetScalarWhereInput
    data: XOR<PetUpdateManyMutationInput, PetUncheckedUpdateManyWithoutClientInput>
  }

  export type PetScalarWhereInput = {
    AND?: PetScalarWhereInput | PetScalarWhereInput[]
    OR?: PetScalarWhereInput[]
    NOT?: PetScalarWhereInput | PetScalarWhereInput[]
    id?: IntFilter<"Pet"> | number
    name?: StringFilter<"Pet"> | string
    breed?: StringFilter<"Pet"> | string
    species?: StringFilter<"Pet"> | string
    clientId?: IntFilter<"Pet"> | number
  }

  export type ClientCreateWithoutCpfInput = {
    name: string
    socialName: string
    registrationDate?: Date | string
    rgs?: RgCreateNestedManyWithoutClientInput
    phones?: PhoneCreateNestedManyWithoutClientInput
    consumedProducts?: ConsumedProductCreateNestedManyWithoutClientInput
    consumedServices?: ConsumedServiceCreateNestedManyWithoutClientInput
    pets?: PetCreateNestedManyWithoutClientInput
  }

  export type ClientUncheckedCreateWithoutCpfInput = {
    id?: number
    name: string
    socialName: string
    registrationDate?: Date | string
    rgs?: RgUncheckedCreateNestedManyWithoutClientInput
    phones?: PhoneUncheckedCreateNestedManyWithoutClientInput
    consumedProducts?: ConsumedProductUncheckedCreateNestedManyWithoutClientInput
    consumedServices?: ConsumedServiceUncheckedCreateNestedManyWithoutClientInput
    pets?: PetUncheckedCreateNestedManyWithoutClientInput
  }

  export type ClientCreateOrConnectWithoutCpfInput = {
    where: ClientWhereUniqueInput
    create: XOR<ClientCreateWithoutCpfInput, ClientUncheckedCreateWithoutCpfInput>
  }

  export type ClientUpsertWithoutCpfInput = {
    update: XOR<ClientUpdateWithoutCpfInput, ClientUncheckedUpdateWithoutCpfInput>
    create: XOR<ClientCreateWithoutCpfInput, ClientUncheckedCreateWithoutCpfInput>
    where?: ClientWhereInput
  }

  export type ClientUpdateToOneWithWhereWithoutCpfInput = {
    where?: ClientWhereInput
    data: XOR<ClientUpdateWithoutCpfInput, ClientUncheckedUpdateWithoutCpfInput>
  }

  export type ClientUpdateWithoutCpfInput = {
    name?: StringFieldUpdateOperationsInput | string
    socialName?: StringFieldUpdateOperationsInput | string
    registrationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    rgs?: RgUpdateManyWithoutClientNestedInput
    phones?: PhoneUpdateManyWithoutClientNestedInput
    consumedProducts?: ConsumedProductUpdateManyWithoutClientNestedInput
    consumedServices?: ConsumedServiceUpdateManyWithoutClientNestedInput
    pets?: PetUpdateManyWithoutClientNestedInput
  }

  export type ClientUncheckedUpdateWithoutCpfInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    socialName?: StringFieldUpdateOperationsInput | string
    registrationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    rgs?: RgUncheckedUpdateManyWithoutClientNestedInput
    phones?: PhoneUncheckedUpdateManyWithoutClientNestedInput
    consumedProducts?: ConsumedProductUncheckedUpdateManyWithoutClientNestedInput
    consumedServices?: ConsumedServiceUncheckedUpdateManyWithoutClientNestedInput
    pets?: PetUncheckedUpdateManyWithoutClientNestedInput
  }

  export type ClientCreateWithoutRgsInput = {
    name: string
    socialName: string
    registrationDate?: Date | string
    cpf?: CpfCreateNestedOneWithoutClientInput
    phones?: PhoneCreateNestedManyWithoutClientInput
    consumedProducts?: ConsumedProductCreateNestedManyWithoutClientInput
    consumedServices?: ConsumedServiceCreateNestedManyWithoutClientInput
    pets?: PetCreateNestedManyWithoutClientInput
  }

  export type ClientUncheckedCreateWithoutRgsInput = {
    id?: number
    name: string
    socialName: string
    registrationDate?: Date | string
    cpf?: CpfUncheckedCreateNestedOneWithoutClientInput
    phones?: PhoneUncheckedCreateNestedManyWithoutClientInput
    consumedProducts?: ConsumedProductUncheckedCreateNestedManyWithoutClientInput
    consumedServices?: ConsumedServiceUncheckedCreateNestedManyWithoutClientInput
    pets?: PetUncheckedCreateNestedManyWithoutClientInput
  }

  export type ClientCreateOrConnectWithoutRgsInput = {
    where: ClientWhereUniqueInput
    create: XOR<ClientCreateWithoutRgsInput, ClientUncheckedCreateWithoutRgsInput>
  }

  export type ClientUpsertWithoutRgsInput = {
    update: XOR<ClientUpdateWithoutRgsInput, ClientUncheckedUpdateWithoutRgsInput>
    create: XOR<ClientCreateWithoutRgsInput, ClientUncheckedCreateWithoutRgsInput>
    where?: ClientWhereInput
  }

  export type ClientUpdateToOneWithWhereWithoutRgsInput = {
    where?: ClientWhereInput
    data: XOR<ClientUpdateWithoutRgsInput, ClientUncheckedUpdateWithoutRgsInput>
  }

  export type ClientUpdateWithoutRgsInput = {
    name?: StringFieldUpdateOperationsInput | string
    socialName?: StringFieldUpdateOperationsInput | string
    registrationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    cpf?: CpfUpdateOneWithoutClientNestedInput
    phones?: PhoneUpdateManyWithoutClientNestedInput
    consumedProducts?: ConsumedProductUpdateManyWithoutClientNestedInput
    consumedServices?: ConsumedServiceUpdateManyWithoutClientNestedInput
    pets?: PetUpdateManyWithoutClientNestedInput
  }

  export type ClientUncheckedUpdateWithoutRgsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    socialName?: StringFieldUpdateOperationsInput | string
    registrationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    cpf?: CpfUncheckedUpdateOneWithoutClientNestedInput
    phones?: PhoneUncheckedUpdateManyWithoutClientNestedInput
    consumedProducts?: ConsumedProductUncheckedUpdateManyWithoutClientNestedInput
    consumedServices?: ConsumedServiceUncheckedUpdateManyWithoutClientNestedInput
    pets?: PetUncheckedUpdateManyWithoutClientNestedInput
  }

  export type ClientCreateWithoutPhonesInput = {
    name: string
    socialName: string
    registrationDate?: Date | string
    cpf?: CpfCreateNestedOneWithoutClientInput
    rgs?: RgCreateNestedManyWithoutClientInput
    consumedProducts?: ConsumedProductCreateNestedManyWithoutClientInput
    consumedServices?: ConsumedServiceCreateNestedManyWithoutClientInput
    pets?: PetCreateNestedManyWithoutClientInput
  }

  export type ClientUncheckedCreateWithoutPhonesInput = {
    id?: number
    name: string
    socialName: string
    registrationDate?: Date | string
    cpf?: CpfUncheckedCreateNestedOneWithoutClientInput
    rgs?: RgUncheckedCreateNestedManyWithoutClientInput
    consumedProducts?: ConsumedProductUncheckedCreateNestedManyWithoutClientInput
    consumedServices?: ConsumedServiceUncheckedCreateNestedManyWithoutClientInput
    pets?: PetUncheckedCreateNestedManyWithoutClientInput
  }

  export type ClientCreateOrConnectWithoutPhonesInput = {
    where: ClientWhereUniqueInput
    create: XOR<ClientCreateWithoutPhonesInput, ClientUncheckedCreateWithoutPhonesInput>
  }

  export type ClientUpsertWithoutPhonesInput = {
    update: XOR<ClientUpdateWithoutPhonesInput, ClientUncheckedUpdateWithoutPhonesInput>
    create: XOR<ClientCreateWithoutPhonesInput, ClientUncheckedCreateWithoutPhonesInput>
    where?: ClientWhereInput
  }

  export type ClientUpdateToOneWithWhereWithoutPhonesInput = {
    where?: ClientWhereInput
    data: XOR<ClientUpdateWithoutPhonesInput, ClientUncheckedUpdateWithoutPhonesInput>
  }

  export type ClientUpdateWithoutPhonesInput = {
    name?: StringFieldUpdateOperationsInput | string
    socialName?: StringFieldUpdateOperationsInput | string
    registrationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    cpf?: CpfUpdateOneWithoutClientNestedInput
    rgs?: RgUpdateManyWithoutClientNestedInput
    consumedProducts?: ConsumedProductUpdateManyWithoutClientNestedInput
    consumedServices?: ConsumedServiceUpdateManyWithoutClientNestedInput
    pets?: PetUpdateManyWithoutClientNestedInput
  }

  export type ClientUncheckedUpdateWithoutPhonesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    socialName?: StringFieldUpdateOperationsInput | string
    registrationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    cpf?: CpfUncheckedUpdateOneWithoutClientNestedInput
    rgs?: RgUncheckedUpdateManyWithoutClientNestedInput
    consumedProducts?: ConsumedProductUncheckedUpdateManyWithoutClientNestedInput
    consumedServices?: ConsumedServiceUncheckedUpdateManyWithoutClientNestedInput
    pets?: PetUncheckedUpdateManyWithoutClientNestedInput
  }

  export type ClientCreateWithoutPetsInput = {
    name: string
    socialName: string
    registrationDate?: Date | string
    cpf?: CpfCreateNestedOneWithoutClientInput
    rgs?: RgCreateNestedManyWithoutClientInput
    phones?: PhoneCreateNestedManyWithoutClientInput
    consumedProducts?: ConsumedProductCreateNestedManyWithoutClientInput
    consumedServices?: ConsumedServiceCreateNestedManyWithoutClientInput
  }

  export type ClientUncheckedCreateWithoutPetsInput = {
    id?: number
    name: string
    socialName: string
    registrationDate?: Date | string
    cpf?: CpfUncheckedCreateNestedOneWithoutClientInput
    rgs?: RgUncheckedCreateNestedManyWithoutClientInput
    phones?: PhoneUncheckedCreateNestedManyWithoutClientInput
    consumedProducts?: ConsumedProductUncheckedCreateNestedManyWithoutClientInput
    consumedServices?: ConsumedServiceUncheckedCreateNestedManyWithoutClientInput
  }

  export type ClientCreateOrConnectWithoutPetsInput = {
    where: ClientWhereUniqueInput
    create: XOR<ClientCreateWithoutPetsInput, ClientUncheckedCreateWithoutPetsInput>
  }

  export type ClientUpsertWithoutPetsInput = {
    update: XOR<ClientUpdateWithoutPetsInput, ClientUncheckedUpdateWithoutPetsInput>
    create: XOR<ClientCreateWithoutPetsInput, ClientUncheckedCreateWithoutPetsInput>
    where?: ClientWhereInput
  }

  export type ClientUpdateToOneWithWhereWithoutPetsInput = {
    where?: ClientWhereInput
    data: XOR<ClientUpdateWithoutPetsInput, ClientUncheckedUpdateWithoutPetsInput>
  }

  export type ClientUpdateWithoutPetsInput = {
    name?: StringFieldUpdateOperationsInput | string
    socialName?: StringFieldUpdateOperationsInput | string
    registrationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    cpf?: CpfUpdateOneWithoutClientNestedInput
    rgs?: RgUpdateManyWithoutClientNestedInput
    phones?: PhoneUpdateManyWithoutClientNestedInput
    consumedProducts?: ConsumedProductUpdateManyWithoutClientNestedInput
    consumedServices?: ConsumedServiceUpdateManyWithoutClientNestedInput
  }

  export type ClientUncheckedUpdateWithoutPetsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    socialName?: StringFieldUpdateOperationsInput | string
    registrationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    cpf?: CpfUncheckedUpdateOneWithoutClientNestedInput
    rgs?: RgUncheckedUpdateManyWithoutClientNestedInput
    phones?: PhoneUncheckedUpdateManyWithoutClientNestedInput
    consumedProducts?: ConsumedProductUncheckedUpdateManyWithoutClientNestedInput
    consumedServices?: ConsumedServiceUncheckedUpdateManyWithoutClientNestedInput
  }

  export type ConsumedProductCreateWithoutProductInput = {
    consumedAt?: Date | string
    quantity?: number
    client: ClientCreateNestedOneWithoutConsumedProductsInput
  }

  export type ConsumedProductUncheckedCreateWithoutProductInput = {
    id?: number
    clientId: number
    consumedAt?: Date | string
    quantity?: number
  }

  export type ConsumedProductCreateOrConnectWithoutProductInput = {
    where: ConsumedProductWhereUniqueInput
    create: XOR<ConsumedProductCreateWithoutProductInput, ConsumedProductUncheckedCreateWithoutProductInput>
  }

  export type ConsumedProductCreateManyProductInputEnvelope = {
    data: ConsumedProductCreateManyProductInput | ConsumedProductCreateManyProductInput[]
    skipDuplicates?: boolean
  }

  export type ConsumedProductUpsertWithWhereUniqueWithoutProductInput = {
    where: ConsumedProductWhereUniqueInput
    update: XOR<ConsumedProductUpdateWithoutProductInput, ConsumedProductUncheckedUpdateWithoutProductInput>
    create: XOR<ConsumedProductCreateWithoutProductInput, ConsumedProductUncheckedCreateWithoutProductInput>
  }

  export type ConsumedProductUpdateWithWhereUniqueWithoutProductInput = {
    where: ConsumedProductWhereUniqueInput
    data: XOR<ConsumedProductUpdateWithoutProductInput, ConsumedProductUncheckedUpdateWithoutProductInput>
  }

  export type ConsumedProductUpdateManyWithWhereWithoutProductInput = {
    where: ConsumedProductScalarWhereInput
    data: XOR<ConsumedProductUpdateManyMutationInput, ConsumedProductUncheckedUpdateManyWithoutProductInput>
  }

  export type ConsumedServiceCreateWithoutServiceInput = {
    consumedAt?: Date | string
    quantity?: number
    client: ClientCreateNestedOneWithoutConsumedServicesInput
  }

  export type ConsumedServiceUncheckedCreateWithoutServiceInput = {
    id?: number
    clientId: number
    consumedAt?: Date | string
    quantity?: number
  }

  export type ConsumedServiceCreateOrConnectWithoutServiceInput = {
    where: ConsumedServiceWhereUniqueInput
    create: XOR<ConsumedServiceCreateWithoutServiceInput, ConsumedServiceUncheckedCreateWithoutServiceInput>
  }

  export type ConsumedServiceCreateManyServiceInputEnvelope = {
    data: ConsumedServiceCreateManyServiceInput | ConsumedServiceCreateManyServiceInput[]
    skipDuplicates?: boolean
  }

  export type ConsumedServiceUpsertWithWhereUniqueWithoutServiceInput = {
    where: ConsumedServiceWhereUniqueInput
    update: XOR<ConsumedServiceUpdateWithoutServiceInput, ConsumedServiceUncheckedUpdateWithoutServiceInput>
    create: XOR<ConsumedServiceCreateWithoutServiceInput, ConsumedServiceUncheckedCreateWithoutServiceInput>
  }

  export type ConsumedServiceUpdateWithWhereUniqueWithoutServiceInput = {
    where: ConsumedServiceWhereUniqueInput
    data: XOR<ConsumedServiceUpdateWithoutServiceInput, ConsumedServiceUncheckedUpdateWithoutServiceInput>
  }

  export type ConsumedServiceUpdateManyWithWhereWithoutServiceInput = {
    where: ConsumedServiceScalarWhereInput
    data: XOR<ConsumedServiceUpdateManyMutationInput, ConsumedServiceUncheckedUpdateManyWithoutServiceInput>
  }

  export type ProductCreateWithoutConsumptionsInput = {
    title: string
    value: Decimal | DecimalJsLike | number | string
  }

  export type ProductUncheckedCreateWithoutConsumptionsInput = {
    id?: number
    title: string
    value: Decimal | DecimalJsLike | number | string
  }

  export type ProductCreateOrConnectWithoutConsumptionsInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutConsumptionsInput, ProductUncheckedCreateWithoutConsumptionsInput>
  }

  export type ClientCreateWithoutConsumedProductsInput = {
    name: string
    socialName: string
    registrationDate?: Date | string
    cpf?: CpfCreateNestedOneWithoutClientInput
    rgs?: RgCreateNestedManyWithoutClientInput
    phones?: PhoneCreateNestedManyWithoutClientInput
    consumedServices?: ConsumedServiceCreateNestedManyWithoutClientInput
    pets?: PetCreateNestedManyWithoutClientInput
  }

  export type ClientUncheckedCreateWithoutConsumedProductsInput = {
    id?: number
    name: string
    socialName: string
    registrationDate?: Date | string
    cpf?: CpfUncheckedCreateNestedOneWithoutClientInput
    rgs?: RgUncheckedCreateNestedManyWithoutClientInput
    phones?: PhoneUncheckedCreateNestedManyWithoutClientInput
    consumedServices?: ConsumedServiceUncheckedCreateNestedManyWithoutClientInput
    pets?: PetUncheckedCreateNestedManyWithoutClientInput
  }

  export type ClientCreateOrConnectWithoutConsumedProductsInput = {
    where: ClientWhereUniqueInput
    create: XOR<ClientCreateWithoutConsumedProductsInput, ClientUncheckedCreateWithoutConsumedProductsInput>
  }

  export type ProductUpsertWithoutConsumptionsInput = {
    update: XOR<ProductUpdateWithoutConsumptionsInput, ProductUncheckedUpdateWithoutConsumptionsInput>
    create: XOR<ProductCreateWithoutConsumptionsInput, ProductUncheckedCreateWithoutConsumptionsInput>
    where?: ProductWhereInput
  }

  export type ProductUpdateToOneWithWhereWithoutConsumptionsInput = {
    where?: ProductWhereInput
    data: XOR<ProductUpdateWithoutConsumptionsInput, ProductUncheckedUpdateWithoutConsumptionsInput>
  }

  export type ProductUpdateWithoutConsumptionsInput = {
    title?: StringFieldUpdateOperationsInput | string
    value?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type ProductUncheckedUpdateWithoutConsumptionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    value?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type ClientUpsertWithoutConsumedProductsInput = {
    update: XOR<ClientUpdateWithoutConsumedProductsInput, ClientUncheckedUpdateWithoutConsumedProductsInput>
    create: XOR<ClientCreateWithoutConsumedProductsInput, ClientUncheckedCreateWithoutConsumedProductsInput>
    where?: ClientWhereInput
  }

  export type ClientUpdateToOneWithWhereWithoutConsumedProductsInput = {
    where?: ClientWhereInput
    data: XOR<ClientUpdateWithoutConsumedProductsInput, ClientUncheckedUpdateWithoutConsumedProductsInput>
  }

  export type ClientUpdateWithoutConsumedProductsInput = {
    name?: StringFieldUpdateOperationsInput | string
    socialName?: StringFieldUpdateOperationsInput | string
    registrationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    cpf?: CpfUpdateOneWithoutClientNestedInput
    rgs?: RgUpdateManyWithoutClientNestedInput
    phones?: PhoneUpdateManyWithoutClientNestedInput
    consumedServices?: ConsumedServiceUpdateManyWithoutClientNestedInput
    pets?: PetUpdateManyWithoutClientNestedInput
  }

  export type ClientUncheckedUpdateWithoutConsumedProductsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    socialName?: StringFieldUpdateOperationsInput | string
    registrationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    cpf?: CpfUncheckedUpdateOneWithoutClientNestedInput
    rgs?: RgUncheckedUpdateManyWithoutClientNestedInput
    phones?: PhoneUncheckedUpdateManyWithoutClientNestedInput
    consumedServices?: ConsumedServiceUncheckedUpdateManyWithoutClientNestedInput
    pets?: PetUncheckedUpdateManyWithoutClientNestedInput
  }

  export type ServiceCreateWithoutConsumptionsInput = {
    title: string
    value: Decimal | DecimalJsLike | number | string
  }

  export type ServiceUncheckedCreateWithoutConsumptionsInput = {
    id?: number
    title: string
    value: Decimal | DecimalJsLike | number | string
  }

  export type ServiceCreateOrConnectWithoutConsumptionsInput = {
    where: ServiceWhereUniqueInput
    create: XOR<ServiceCreateWithoutConsumptionsInput, ServiceUncheckedCreateWithoutConsumptionsInput>
  }

  export type ClientCreateWithoutConsumedServicesInput = {
    name: string
    socialName: string
    registrationDate?: Date | string
    cpf?: CpfCreateNestedOneWithoutClientInput
    rgs?: RgCreateNestedManyWithoutClientInput
    phones?: PhoneCreateNestedManyWithoutClientInput
    consumedProducts?: ConsumedProductCreateNestedManyWithoutClientInput
    pets?: PetCreateNestedManyWithoutClientInput
  }

  export type ClientUncheckedCreateWithoutConsumedServicesInput = {
    id?: number
    name: string
    socialName: string
    registrationDate?: Date | string
    cpf?: CpfUncheckedCreateNestedOneWithoutClientInput
    rgs?: RgUncheckedCreateNestedManyWithoutClientInput
    phones?: PhoneUncheckedCreateNestedManyWithoutClientInput
    consumedProducts?: ConsumedProductUncheckedCreateNestedManyWithoutClientInput
    pets?: PetUncheckedCreateNestedManyWithoutClientInput
  }

  export type ClientCreateOrConnectWithoutConsumedServicesInput = {
    where: ClientWhereUniqueInput
    create: XOR<ClientCreateWithoutConsumedServicesInput, ClientUncheckedCreateWithoutConsumedServicesInput>
  }

  export type ServiceUpsertWithoutConsumptionsInput = {
    update: XOR<ServiceUpdateWithoutConsumptionsInput, ServiceUncheckedUpdateWithoutConsumptionsInput>
    create: XOR<ServiceCreateWithoutConsumptionsInput, ServiceUncheckedCreateWithoutConsumptionsInput>
    where?: ServiceWhereInput
  }

  export type ServiceUpdateToOneWithWhereWithoutConsumptionsInput = {
    where?: ServiceWhereInput
    data: XOR<ServiceUpdateWithoutConsumptionsInput, ServiceUncheckedUpdateWithoutConsumptionsInput>
  }

  export type ServiceUpdateWithoutConsumptionsInput = {
    title?: StringFieldUpdateOperationsInput | string
    value?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type ServiceUncheckedUpdateWithoutConsumptionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    value?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type ClientUpsertWithoutConsumedServicesInput = {
    update: XOR<ClientUpdateWithoutConsumedServicesInput, ClientUncheckedUpdateWithoutConsumedServicesInput>
    create: XOR<ClientCreateWithoutConsumedServicesInput, ClientUncheckedCreateWithoutConsumedServicesInput>
    where?: ClientWhereInput
  }

  export type ClientUpdateToOneWithWhereWithoutConsumedServicesInput = {
    where?: ClientWhereInput
    data: XOR<ClientUpdateWithoutConsumedServicesInput, ClientUncheckedUpdateWithoutConsumedServicesInput>
  }

  export type ClientUpdateWithoutConsumedServicesInput = {
    name?: StringFieldUpdateOperationsInput | string
    socialName?: StringFieldUpdateOperationsInput | string
    registrationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    cpf?: CpfUpdateOneWithoutClientNestedInput
    rgs?: RgUpdateManyWithoutClientNestedInput
    phones?: PhoneUpdateManyWithoutClientNestedInput
    consumedProducts?: ConsumedProductUpdateManyWithoutClientNestedInput
    pets?: PetUpdateManyWithoutClientNestedInput
  }

  export type ClientUncheckedUpdateWithoutConsumedServicesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    socialName?: StringFieldUpdateOperationsInput | string
    registrationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    cpf?: CpfUncheckedUpdateOneWithoutClientNestedInput
    rgs?: RgUncheckedUpdateManyWithoutClientNestedInput
    phones?: PhoneUncheckedUpdateManyWithoutClientNestedInput
    consumedProducts?: ConsumedProductUncheckedUpdateManyWithoutClientNestedInput
    pets?: PetUncheckedUpdateManyWithoutClientNestedInput
  }

  export type RgCreateManyClientInput = {
    id?: number
    number: string
    issueDate: Date | string
  }

  export type PhoneCreateManyClientInput = {
    id?: number
    ddd: string
    number: string
  }

  export type ConsumedProductCreateManyClientInput = {
    id?: number
    productId: number
    consumedAt?: Date | string
    quantity?: number
  }

  export type ConsumedServiceCreateManyClientInput = {
    id?: number
    serviceId: number
    consumedAt?: Date | string
    quantity?: number
  }

  export type PetCreateManyClientInput = {
    id?: number
    name: string
    breed: string
    species: string
  }

  export type RgUpdateWithoutClientInput = {
    number?: StringFieldUpdateOperationsInput | string
    issueDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RgUncheckedUpdateWithoutClientInput = {
    id?: IntFieldUpdateOperationsInput | number
    number?: StringFieldUpdateOperationsInput | string
    issueDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RgUncheckedUpdateManyWithoutClientInput = {
    id?: IntFieldUpdateOperationsInput | number
    number?: StringFieldUpdateOperationsInput | string
    issueDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PhoneUpdateWithoutClientInput = {
    ddd?: StringFieldUpdateOperationsInput | string
    number?: StringFieldUpdateOperationsInput | string
  }

  export type PhoneUncheckedUpdateWithoutClientInput = {
    id?: IntFieldUpdateOperationsInput | number
    ddd?: StringFieldUpdateOperationsInput | string
    number?: StringFieldUpdateOperationsInput | string
  }

  export type PhoneUncheckedUpdateManyWithoutClientInput = {
    id?: IntFieldUpdateOperationsInput | number
    ddd?: StringFieldUpdateOperationsInput | string
    number?: StringFieldUpdateOperationsInput | string
  }

  export type ConsumedProductUpdateWithoutClientInput = {
    consumedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    quantity?: IntFieldUpdateOperationsInput | number
    product?: ProductUpdateOneRequiredWithoutConsumptionsNestedInput
  }

  export type ConsumedProductUncheckedUpdateWithoutClientInput = {
    id?: IntFieldUpdateOperationsInput | number
    productId?: IntFieldUpdateOperationsInput | number
    consumedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    quantity?: IntFieldUpdateOperationsInput | number
  }

  export type ConsumedProductUncheckedUpdateManyWithoutClientInput = {
    id?: IntFieldUpdateOperationsInput | number
    productId?: IntFieldUpdateOperationsInput | number
    consumedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    quantity?: IntFieldUpdateOperationsInput | number
  }

  export type ConsumedServiceUpdateWithoutClientInput = {
    consumedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    quantity?: IntFieldUpdateOperationsInput | number
    service?: ServiceUpdateOneRequiredWithoutConsumptionsNestedInput
  }

  export type ConsumedServiceUncheckedUpdateWithoutClientInput = {
    id?: IntFieldUpdateOperationsInput | number
    serviceId?: IntFieldUpdateOperationsInput | number
    consumedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    quantity?: IntFieldUpdateOperationsInput | number
  }

  export type ConsumedServiceUncheckedUpdateManyWithoutClientInput = {
    id?: IntFieldUpdateOperationsInput | number
    serviceId?: IntFieldUpdateOperationsInput | number
    consumedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    quantity?: IntFieldUpdateOperationsInput | number
  }

  export type PetUpdateWithoutClientInput = {
    name?: StringFieldUpdateOperationsInput | string
    breed?: StringFieldUpdateOperationsInput | string
    species?: StringFieldUpdateOperationsInput | string
  }

  export type PetUncheckedUpdateWithoutClientInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    breed?: StringFieldUpdateOperationsInput | string
    species?: StringFieldUpdateOperationsInput | string
  }

  export type PetUncheckedUpdateManyWithoutClientInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    breed?: StringFieldUpdateOperationsInput | string
    species?: StringFieldUpdateOperationsInput | string
  }

  export type ConsumedProductCreateManyProductInput = {
    id?: number
    clientId: number
    consumedAt?: Date | string
    quantity?: number
  }

  export type ConsumedProductUpdateWithoutProductInput = {
    consumedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    quantity?: IntFieldUpdateOperationsInput | number
    client?: ClientUpdateOneRequiredWithoutConsumedProductsNestedInput
  }

  export type ConsumedProductUncheckedUpdateWithoutProductInput = {
    id?: IntFieldUpdateOperationsInput | number
    clientId?: IntFieldUpdateOperationsInput | number
    consumedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    quantity?: IntFieldUpdateOperationsInput | number
  }

  export type ConsumedProductUncheckedUpdateManyWithoutProductInput = {
    id?: IntFieldUpdateOperationsInput | number
    clientId?: IntFieldUpdateOperationsInput | number
    consumedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    quantity?: IntFieldUpdateOperationsInput | number
  }

  export type ConsumedServiceCreateManyServiceInput = {
    id?: number
    clientId: number
    consumedAt?: Date | string
    quantity?: number
  }

  export type ConsumedServiceUpdateWithoutServiceInput = {
    consumedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    quantity?: IntFieldUpdateOperationsInput | number
    client?: ClientUpdateOneRequiredWithoutConsumedServicesNestedInput
  }

  export type ConsumedServiceUncheckedUpdateWithoutServiceInput = {
    id?: IntFieldUpdateOperationsInput | number
    clientId?: IntFieldUpdateOperationsInput | number
    consumedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    quantity?: IntFieldUpdateOperationsInput | number
  }

  export type ConsumedServiceUncheckedUpdateManyWithoutServiceInput = {
    id?: IntFieldUpdateOperationsInput | number
    clientId?: IntFieldUpdateOperationsInput | number
    consumedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    quantity?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}